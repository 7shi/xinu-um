!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!Asm	properties	/properties (req, vararg for parameters)/
!_TAG_FIELD_DESCRIPTION!C++	name	/aliased names/
!_TAG_FIELD_DESCRIPTION!LdScript	assignment	/how a value is assigned to the symbol/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!Asm	d,define	/defines/
!_TAG_KIND_DESCRIPTION!Asm	l,label	/labels/
!_TAG_KIND_DESCRIPTION!Asm	m,macro	/macros/
!_TAG_KIND_DESCRIPTION!Asm	t,type	/types (structs and records)/
!_TAG_KIND_DESCRIPTION!C	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C	m,member	/struct, and union members/
!_TAG_KIND_DESCRIPTION!C	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!C++	c,class	/classes/
!_TAG_KIND_DESCRIPTION!C++	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C++	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C++	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C++	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C++	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C++	m,member	/class, struct, and union members/
!_TAG_KIND_DESCRIPTION!C++	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!C++	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C++	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C++	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C++	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!LEX	c,cond	/start or exclusive condition/
!_TAG_KIND_DESCRIPTION!LEX	r,regex	/named regular expression/
!_TAG_KIND_DESCRIPTION!LdScript	S,section	/sections/
!_TAG_KIND_DESCRIPTION!LdScript	i,inputSection	/input sections/
!_TAG_KIND_DESCRIPTION!LdScript	s,symbol	/symbols/
!_TAG_KIND_DESCRIPTION!LdScript	v,version	/versions/
!_TAG_KIND_DESCRIPTION!Make	I,makefile	/makefiles/
!_TAG_KIND_DESCRIPTION!Make	m,macro	/macros/
!_TAG_KIND_DESCRIPTION!Make	t,target	/targets/
!_TAG_KIND_DESCRIPTION!Markdown	S,subsection	/level 2 sections/
!_TAG_KIND_DESCRIPTION!Markdown	T,l4subsection	/level 4 sections/
!_TAG_KIND_DESCRIPTION!Markdown	c,chapter	/chapters/
!_TAG_KIND_DESCRIPTION!Markdown	h,hashtag	/hashtags/
!_TAG_KIND_DESCRIPTION!Markdown	n,footnote	/footnotes/
!_TAG_KIND_DESCRIPTION!Markdown	s,section	/sections/
!_TAG_KIND_DESCRIPTION!Markdown	t,subsubsection	/level 3 sections/
!_TAG_KIND_DESCRIPTION!Markdown	u,l5subsection	/level 5 sections/
!_TAG_KIND_DESCRIPTION!YACC	l,label	/labels/
!_TAG_KIND_DESCRIPTION!YACC	t,token	/tokens/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!Asm	1.0	/current.age/
!_TAG_PARSER_VERSION!C	1.1	/current.age/
!_TAG_PARSER_VERSION!C++	1.1	/current.age/
!_TAG_PARSER_VERSION!LEX	0.0	/current.age/
!_TAG_PARSER_VERSION!LdScript	1.1	/current.age/
!_TAG_PARSER_VERSION!Make	0.0	/current.age/
!_TAG_PARSER_VERSION!Markdown	1.1	/current.age/
!_TAG_PARSER_VERSION!YACC	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/7shi/xinu/xinu-um/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.1.0	/v6.1.0/
!_TAG_ROLE_DESCRIPTION!C!function	foreigndecl	/declared in foreign languages/
!_TAG_ROLE_DESCRIPTION!C!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!C!struct	foreigndecl	/declared in foreign languages/
!_TAG_ROLE_DESCRIPTION!C++!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C++!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C++!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!LdScript!inputSection	destination	/specified as the destination of code and data/
!_TAG_ROLE_DESCRIPTION!LdScript!inputSection	discarded	/discarded when linking/
!_TAG_ROLE_DESCRIPTION!LdScript!inputSection	mapped	/mapped to output section/
!_TAG_ROLE_DESCRIPTION!LdScript!symbol	aliased	/aliased with __attribute__((alias(...))) in C\/C++ code/
!_TAG_ROLE_DESCRIPTION!LdScript!symbol	entrypoint	/entry points/
!_TAG_ROLE_DESCRIPTION!Make!makefile	included	/included/
!_TAG_ROLE_DESCRIPTION!Make!makefile	optional	/optionally included/
$(BLDDIRS)	compile/Makefile	/^$(BLDDIRS): $/;"	t
$(CONFC)	compile/Makefile	/^$(CONFC): $(CONFFILE) $(CONFPGM)$/;"	t
$(CONFH)	compile/Makefile	/^$(CONFH): $(CONFFILE) $(CONFPGM)$/;"	t
$(CONFPGM)	compile/Makefile	/^$(CONFPGM): $(CONFL) $(CONFY)$/;"	t
$(DEFSFILE)	compile/Makefile	/^$(DEFSFILE):$/;"	t
$(DEPSFILE)	compile/Makefile	/^$(DEPSFILE):$/;"	t
${CONFIG}	config/Makefile	/^${CONFIG}:	lex.yy.c y.tab.c$/;"	t
.bss	compile/ld.script	/^  .bss :                                                                $/;"	S
.data	compile/ld.script	/^  .data :$/;"	S
.text	compile/ld.script	/^  .text : {$/;"	S
ADDR_BIT_MASK	include/e1000e.h	/^#define ADDR_BIT_MASK /;"	d
AMD_BLOCKMOD	include/flash.h	/^#define AMD_BLOCKMOD /;"	d
AMD_CLR_SR	include/flash.h	/^#define AMD_CLR_SR /;"	d
AMD_ERASE_CYCLE3	include/flash.h	/^#define AMD_ERASE_CYCLE3 /;"	d
AMD_ERASE_CYCLE6	include/flash.h	/^#define AMD_ERASE_CYCLE6 /;"	d
AMD_GET_16	include/flash.h	/^#define AMD_GET_16(/;"	d
AMD_GET_8	include/flash.h	/^#define AMD_GET_8(/;"	d
AMD_H_LOCK	include/flash.h	/^#define AMD_H_LOCK /;"	d
AMD_LOCK	include/flash.h	/^#define AMD_LOCK /;"	d
AMD_PROGRAM_CYCLE3	include/flash.h	/^#define AMD_PROGRAM_CYCLE3 /;"	d
AMD_PUT_16	include/flash.h	/^#define AMD_PUT_16(/;"	d
AMD_PUT_8	include/flash.h	/^#define AMD_PUT_8(/;"	d
AMD_READ	include/flash.h	/^#define AMD_READ /;"	d
AMD_REG_CYCLE1	include/flash.h	/^#define AMD_REG_CYCLE1 /;"	d
AMD_REG_CYCLE2	include/flash.h	/^#define AMD_REG_CYCLE2 /;"	d
AMD_RESET	include/flash.h	/^#define AMD_RESET /;"	d
AMD_SR_WSMS	include/flash.h	/^#define AMD_SR_WSMS /;"	d
AMD_S_LOCK	include/flash.h	/^#define AMD_S_LOCK /;"	d
AMD_UNLOCK_CYCLE1	include/flash.h	/^#define AMD_UNLOCK_CYCLE1 /;"	d
AMD_UNLOCK_CYCLE2	include/flash.h	/^#define AMD_UNLOCK_CYCLE2 /;"	d
ARP_HALEN	include/arp.h	/^#define	ARP_HALEN	/;"	d
ARP_HTYPE	include/arp.h	/^#define	ARP_HTYPE	/;"	d
ARP_OP_REQ	include/arp.h	/^#define ARP_OP_REQ	/;"	d
ARP_OP_RPLY	include/arp.h	/^#define ARP_OP_RPLY	/;"	d
ARP_PALEN	include/arp.h	/^#define	ARP_PALEN	/;"	d
ARP_PTYPE	include/arp.h	/^#define ARP_PTYPE	/;"	d
ARP_RETRY	include/arp.h	/^#define	ARP_RETRY	/;"	d
ARP_SIZ	include/arp.h	/^#define	ARP_SIZ	/;"	d
ARP_TIMEOUT	include/arp.h	/^#define	ARP_TIMEOUT	/;"	d
AR_FREE	include/arp.h	/^#define	AR_FREE	/;"	d
AR_PENDING	include/arp.h	/^#define	AR_PENDING	/;"	d
AR_RESOLVED	include/arp.h	/^#define	AR_RESOLVED	/;"	d
BIOS32_MAX_ADDR	include/pci.h	/^#define BIOS32_MAX_ADDR /;"	d
BIOS32_MIN_ADDR	include/pci.h	/^#define BIOS32_MIN_ADDR /;"	d
BIOS32_SIGNATURE	include/pci.h	/^#define BIOS32_SIGNATURE /;"	d
BIOS32_UNITS	include/pci.h	/^#define BIOS32_UNITS /;"	d
BLDDIRS	compile/Makefile	/^BLDDIRS	= binaries$/;"	m
BOOTPLOC	compile/Makefile	/^BOOTPLOC=	0x150000$/;"	m
BOOTP_CODE	system/i386.c	/^#define BOOTP_CODE$/;"	d	file:
BP_MAXB	include/bufpool.h	/^#define	BP_MAXB	/;"	d
BP_MAXN	include/bufpool.h	/^#define	BP_MAXN	/;"	d
BP_MINB	include/bufpool.h	/^#define	BP_MINB	/;"	d
BRELOC	compile/Makefile	/^BRELOC  =	0x150000$/;"	m
BUILDMAKE	compile/Makefile	/^BUILDMAKE	=	$(TOPDIR)\/compile\/bin\/build-make$/;"	m
CC	compile/Makefile	/^CC		=	${COMPILER_ROOT}gcc-4.8$/;"	m
CC	config/Makefile	/^CC	= ${COMPILER_ROOT}gcc$/;"	m
CFE_MAX_BLOCK	include/flash.h	/^#define CFE_MAX_BLOCK /;"	d
CFE_MIN_BLOCK	include/flash.h	/^#define CFE_MIN_BLOCK /;"	d
CFI_COMMAND_SET	include/flash.h	/^#define CFI_COMMAND_SET /;"	d
CFI_DEVICE	include/flash.h	/^#define CFI_DEVICE /;"	d
CFI_DEV_INTERFACE	include/flash.h	/^#define CFI_DEV_INTERFACE /;"	d
CFI_DEV_SIZE	include/flash.h	/^#define CFI_DEV_SIZE /;"	d
CFI_GET_8	include/flash.h	/^#define CFI_GET_8(/;"	d
CFI_MANUFACTURER	include/flash.h	/^#define CFI_MANUFACTURER /;"	d
CFI_MAX_BUFFER	include/flash.h	/^#define CFI_MAX_BUFFER /;"	d
CFI_PUT_8	include/flash.h	/^#define CFI_PUT_8(/;"	d
CFI_QUERY_ADDR	include/flash.h	/^#define CFI_QUERY_ADDR /;"	d
CFI_QUERY_EXIT	include/flash.h	/^#define CFI_QUERY_EXIT /;"	d
CFI_QUERY_MODE	include/flash.h	/^#define CFI_QUERY_MODE /;"	d
CFI_QUERY_STRING	include/flash.h	/^#define CFI_QUERY_STRING /;"	d
CFI_REGION_COUNT	include/flash.h	/^#define CFI_REGION_COUNT /;"	d
CFI_REGION_TAB	include/flash.h	/^#define CFI_REGION_TAB /;"	d
CFI_SIGNATURE	include/flash.h	/^#define CFI_SIGNATURE /;"	d
CFLAGS	compile/Makefile	/^CFLAGS  = -march=i586 -m32 -fno-builtin -fno-stack-protector -nostdlib -c -Wall -O0 ${DEFS} ${IN/;"	m
CFLAGS	config/Makefile	/^CFLAGS	= $/;"	m
CHAR_BIT	include/limits.h	/^#define CHAR_BIT /;"	d
CHAR_MAX	include/limits.h	/^#define CHAR_MAX /;"	d
CHAR_MIN	include/limits.h	/^#define CHAR_MIN /;"	d
CLKCNTL	include/clock.h	/^#define	CLKCNTL	/;"	d
CLKFREQ	config/conf.h	/^#define CLKFREQ /;"	d
CLKTICKS_PER_SEC	include/clock.h	/^#define CLKTICKS_PER_SEC /;"	d
CLOCK0	include/clock.h	/^#define	CLOCK0	/;"	d
CLOCKBASE	include/clock.h	/^#define	CLOCKBASE	/;"	d
CLOSE	config/config.y	/^	CLOSE READ WRITE SEEK CONTROL IS ON GETC PUTC$/;"	t
COLON	config/config.y	/^%token	DEFBRK IFBRK COLON OCTAL INTEGER IDENT CSR IRQ INTR INIT OPEN$/;"	t
COMPILER_ROOT	compile/Makefile	/^COMPILER_ROOT	=	\/usr\/bin\/$/;"	m
COMPILER_ROOT	config/Makefile	/^COMPILER_ROOT	=	\/usr\/bin\/$/;"	m
CONFC	compile/Makefile	/^CONFC		= $(TOPDIR)\/system\/conf.c$/;"	m
CONFFILE	compile/Makefile	/^CONFFILE	= $(TOPDIR)\/config\/Configuration$/;"	m
CONFH	compile/Makefile	/^CONFH		= $(TOPDIR)\/include\/conf.h$/;"	m
CONFIG	config/Makefile	/^CONFIG	= config$/;"	m
CONFL	compile/Makefile	/^CONFL		= $(TOPDIR)\/config\/config.l$/;"	m
CONFPGM	compile/Makefile	/^CONFPGM		= $(TOPDIR)\/config\/config$/;"	m
CONFY	compile/Makefile	/^CONFY		= $(TOPDIR)\/config\/config.y$/;"	m
CONSOLE	config/conf.h	/^#define CONSOLE /;"	d
CONSOLE_RESET	system/initialize.c	/^#define	CONSOLE_RESET	/;"	d	file:
CONTEXT	include/kernel.h	/^#define	CONTEXT	/;"	d
CONTROL	config/config.y	/^	CLOSE READ WRITE SEEK CONTROL IS ON GETC PUTC$/;"	t
CSR	config/config.y	/^%token	DEFBRK IFBRK COLON OCTAL INTEGER IDENT CSR IRQ INTR INIT OPEN$/;"	t
DATE_DST_AUTO	include/date.h	/^#define	DATE_DST_AUTO	/;"	d
DATE_DST_OFF	include/date.h	/^#define	DATE_DST_OFF	/;"	d
DATE_DST_ON	include/date.h	/^#define	DATE_DST_ON	/;"	d
DEBUG_ASCII	include/debug.h	/^#define DEBUG_ASCII /;"	d
DEBUG_HEX	include/debug.h	/^#define DEBUG_HEX /;"	d
DEC	config/config.l	/^DEC [1-9][0-9]*$/;"	r
DEFBRK	config/config.y	/^%token	DEFBRK IFBRK COLON OCTAL INTEGER IDENT CSR IRQ INTR INIT OPEN$/;"	t
DEFER_START	include/resched.h	/^#define	DEFER_START	/;"	d
DEFER_STOP	include/resched.h	/^#define	DEFER_STOP	/;"	d
DEFS	compile/Makefile	/^DEFS		= -DBRELOC=${BRELOC} -DBOOTPLOC=${BOOTPLOC} -DBSDURG -DVERSION=\\""`cat $(VERSIONFILE)`"\\/;"	m
DEFSFILE	compile/Makefile	/^DEFSFILE	=	.defs$/;"	m
DELAY	include/delay.h	/^#define	DELAY(/;"	d
DEPSFILE	compile/Makefile	/^DEPSFILE	=	.deps$/;"	m
DEVNAMLEN	include/device.h	/^#define	DEVNAMLEN	/;"	d
DFILL	device/lfs/lfdballoc.c	/^#define  DFILL /;"	d	file:
DHCP	include/dhcp.h	/^#define DHCP$/;"	d
DHCP_BOOTFILE_NAME	include/dhcp.h	/^#define DHCP_BOOTFILE_NAME /;"	d
DHCP_CLIENT_ID	include/dhcp.h	/^#define DHCP_CLIENT_ID /;"	d
DHCP_CLIENT_MACHINE_ID	include/dhcp.h	/^#define DHCP_CLIENT_MACHINE_ID /;"	d
DHCP_CLIENT_NET_ID	include/dhcp.h	/^#define DHCP_CLIENT_NET_ID /;"	d
DHCP_CLIENT_SYS_ARCH	include/dhcp.h	/^#define DHCP_CLIENT_SYS_ARCH /;"	d
DHCP_DNS_SERVER	include/dhcp.h	/^#define DHCP_DNS_SERVER /;"	d
DHCP_DOMAIN_NAME	include/dhcp.h	/^#define DHCP_DOMAIN_NAME /;"	d
DHCP_IP_ADDR_LEASE_TIME	include/dhcp.h	/^#define DHCP_IP_ADDR_LEASE_TIME /;"	d
DHCP_MAXIMUM_DHCP_MESSAGE_SIZE	include/dhcp.h	/^#define DHCP_MAXIMUM_DHCP_MESSAGE_SIZE /;"	d
DHCP_MESSAGE	include/dhcp.h	/^#define DHCP_MESSAGE /;"	d
DHCP_MESSAGE_END	include/dhcp.h	/^#define DHCP_MESSAGE_END /;"	d
DHCP_MESSAGE_TYPE	include/dhcp.h	/^#define DHCP_MESSAGE_TYPE /;"	d
DHCP_NTP_SERVER_IP	include/dhcp.h	/^#define DHCP_NTP_SERVER_IP /;"	d
DHCP_OPTION_OVERLOAD	include/dhcp.h	/^#define DHCP_OPTION_OVERLOAD /;"	d
DHCP_PADDING	include/dhcp.h	/^#define DHCP_PADDING /;"	d
DHCP_PARAMETER_REQUEST_LIST	include/dhcp.h	/^#define DHCP_PARAMETER_REQUEST_LIST /;"	d
DHCP_REBINDING_TIME_VALUE	include/dhcp.h	/^#define DHCP_REBINDING_TIME_VALUE /;"	d
DHCP_RENEWAL_TIME_VALUE	include/dhcp.h	/^#define DHCP_RENEWAL_TIME_VALUE /;"	d
DHCP_REQUESTED_IP	include/dhcp.h	/^#define DHCP_REQUESTED_IP /;"	d
DHCP_RETRY	include/dhcp.h	/^#define DHCP_RETRY /;"	d
DHCP_ROUTER	include/dhcp.h	/^#define DHCP_ROUTER /;"	d
DHCP_SERVER_ID	include/dhcp.h	/^#define DHCP_SERVER_ID /;"	d
DHCP_SUBNET_MASK	include/dhcp.h	/^#define DHCP_SUBNET_MASK /;"	d
DHCP_TFTP_SERVER_NAME	include/dhcp.h	/^#define DHCP_TFTP_SERVER_NAME /;"	d
DHCP_VENDER_OPTIONS	include/dhcp.h	/^#define DHCP_VENDER_OPTIONS /;"	d
DHCP_VENDOR_CLASS_ID	include/dhcp.h	/^#define DHCP_VENDOR_CLASS_ID /;"	d
DNSDATASIZ	include/dns.h	/^#define	DNSDATASIZ	/;"	d
DNSLPORT	include/dns.h	/^#define	DNSLPORT	/;"	d
DNSPORT	include/dns.h	/^#define	DNSPORT	/;"	d
DNSRETRY	include/dns.h	/^#define	DNSRETRY	/;"	d
DNSTIMEOUT	include/dns.h	/^#define	DNSTIMEOUT	/;"	d
DNS_QC_IN	include/dns.h	/^#define	DNS_QC_IN	/;"	d
DNS_QT_A	include/dns.h	/^#define	DNS_QT_A	/;"	d
DNS_QT_NS	include/dns.h	/^#define DNS_QT_NS	/;"	d
Date	system/ascdate.c	/^struct dateinfo Date = {0, FALSE, DATE_DST_AUTO,$/;"	v	typeref:struct:dateinfo
Defer	system/resched.c	/^struct	defer	Defer;$/;"	v	typeref:struct:defer
E1000_82545EM_MDIC_PHY_ADDR	include/e1000e.h	/^#define E1000_82545EM_MDIC_PHY_ADDR /;"	d
E1000_82545EM_MTA_ENTRIES	include/e1000e.h	/^#define E1000_82545EM_MTA_ENTRIES /;"	d
E1000_82545EM_RAR_ENTRIES	include/e1000e.h	/^#define E1000_82545EM_RAR_ENTRIES /;"	d
E1000_82567LM_MDIC_PHY_ADDR	include/e1000e.h	/^#define E1000_82567LM_MDIC_PHY_ADDR /;"	d
E1000_82567LM_MTA_ENTRIES	include/e1000e.h	/^#define E1000_82567LM_MTA_ENTRIES /;"	d
E1000_82567LM_RAR_ENTRIES	include/e1000e.h	/^#define E1000_82567LM_RAR_ENTRIES /;"	d
E1000_AIT	include/e1000e.h	/^#define E1000_AIT /;"	d
E1000_BM_PHY_PAGE_SELECT	include/e1000e.h	/^#define E1000_BM_PHY_PAGE_SELECT /;"	d
E1000_BM_PSCR_ENABLE_DOWNSHIFT	include/e1000e.h	/^#define E1000_BM_PSCR_ENABLE_DOWNSHIFT /;"	d
E1000_COLD_SHIFT	include/e1000e.h	/^#define E1000_COLD_SHIFT /;"	d
E1000_COLLISION_DISTANCE	include/e1000e.h	/^#define E1000_COLLISION_DISTANCE /;"	d
E1000_COLLISION_THRESHOLD	include/e1000e.h	/^#define E1000_COLLISION_THRESHOLD /;"	d
E1000_CR_1000T_FD_CAPS	include/e1000e.h	/^#define E1000_CR_1000T_FD_CAPS /;"	d
E1000_CR_1000T_HD_CAPS	include/e1000e.h	/^#define E1000_CR_1000T_HD_CAPS /;"	d
E1000_CTRL	include/e1000e.h	/^#define E1000_CTRL /;"	d
E1000_CTRL_EXT	include/e1000e.h	/^#define E1000_CTRL_EXT /;"	d
E1000_CTRL_FRCDPX	include/e1000e.h	/^#define E1000_CTRL_FRCDPX	/;"	d
E1000_CTRL_FRCSPD	include/e1000e.h	/^#define E1000_CTRL_FRCSPD	/;"	d
E1000_CTRL_GIO_MASTER_DISABLE	include/e1000e.h	/^#define E1000_CTRL_GIO_MASTER_DISABLE /;"	d
E1000_CTRL_PHY_RST	include/e1000e.h	/^#define E1000_CTRL_PHY_RST /;"	d
E1000_CTRL_RFCE	include/e1000e.h	/^#define E1000_CTRL_RFCE /;"	d
E1000_CTRL_RST	include/e1000e.h	/^#define E1000_CTRL_RST	/;"	d
E1000_CTRL_SLU	include/e1000e.h	/^#define E1000_CTRL_SLU	/;"	d
E1000_CTRL_TFCE	include/e1000e.h	/^#define E1000_CTRL_TFCE /;"	d
E1000_CT_SHIFT	include/e1000e.h	/^#define E1000_CT_SHIFT /;"	d
E1000_EXTCNF_CTRL	include/e1000e.h	/^#define E1000_EXTCNF_CTRL /;"	d
E1000_EXTCNF_CTRL_SWFLAG	include/e1000e.h	/^#define E1000_EXTCNF_CTRL_SWFLAG /;"	d
E1000_FWSM	include/e1000e.h	/^#define E1000_FWSM /;"	d
E1000_GCR	include/e1000e.h	/^#define E1000_GCR /;"	d
E1000_GCR_RXDSCR_NO_SNOOP	include/e1000e.h	/^#define E1000_GCR_RXDSCR_NO_SNOOP	/;"	d
E1000_GCR_RXDSCW_NO_SNOOP	include/e1000e.h	/^#define E1000_GCR_RXDSCW_NO_SNOOP	/;"	d
E1000_GCR_RXD_NO_SNOOP	include/e1000e.h	/^#define E1000_GCR_RXD_NO_SNOOP	/;"	d
E1000_GCR_TXDSCR_NO_SNOOP	include/e1000e.h	/^#define E1000_GCR_TXDSCR_NO_SNOOP	/;"	d
E1000_GCR_TXDSCW_NO_SNOOP	include/e1000e.h	/^#define E1000_GCR_TXDSCW_NO_SNOOP	/;"	d
E1000_GCR_TXD_NO_SNOOP	include/e1000e.h	/^#define E1000_GCR_TXD_NO_SNOOP	/;"	d
E1000_GEN_POLL_TIMEOUT	include/e1000e.h	/^#define E1000_GEN_POLL_TIMEOUT /;"	d
E1000_ICH_FWSM_RSPCIPHY	include/e1000e.h	/^#define E1000_ICH_FWSM_RSPCIPHY /;"	d
E1000_ICH_LAN_INIT_TIMEOUT	include/e1000e.h	/^#define E1000_ICH_LAN_INIT_TIMEOUT /;"	d
E1000_ICR	include/e1000e.h	/^#define E1000_ICR /;"	d
E1000_ICR_LSC	include/e1000e.h	/^#define E1000_ICR_LSC /;"	d
E1000_ICR_RXO	include/e1000e.h	/^#define E1000_ICR_RXO /;"	d
E1000_ICR_RXSEQ	include/e1000e.h	/^#define E1000_ICR_RXSEQ /;"	d
E1000_ICR_RXT0	include/e1000e.h	/^#define E1000_ICR_RXT0 /;"	d
E1000_ICR_TXDW	include/e1000e.h	/^#define E1000_ICR_TXDW /;"	d
E1000_ICS	include/e1000e.h	/^#define E1000_ICS /;"	d
E1000_IMC	include/e1000e.h	/^#define E1000_IMC /;"	d
E1000_IMS	include/e1000e.h	/^#define E1000_IMS /;"	d
E1000_IMS_ENABLE_MASK	include/e1000e.h	/^#define E1000_IMS_ENABLE_MASK /;"	d
E1000_IMS_LSC	include/e1000e.h	/^#define E1000_IMS_LSC /;"	d
E1000_IMS_RXO	include/e1000e.h	/^#define E1000_IMS_RXO /;"	d
E1000_IMS_RXSEQ	include/e1000e.h	/^#define E1000_IMS_RXSEQ /;"	d
E1000_IMS_RXT0	include/e1000e.h	/^#define E1000_IMS_RXT0 /;"	d
E1000_IMS_TXDW	include/e1000e.h	/^#define E1000_IMS_TXDW /;"	d
E1000_IO_IOADDR	include/e1000e.h	/^#define E1000_IO_IOADDR	/;"	d
E1000_IO_IODATA	include/e1000e.h	/^#define E1000_IO_IODATA	/;"	d
E1000_ITR	include/e1000e.h	/^#define E1000_ITR /;"	d
E1000_ITR_DEFAULT	include/e1000e.h	/^#define E1000_ITR_DEFAULT	/;"	d
E1000_KABGTXD	include/e1000e.h	/^#define E1000_KABGTXD /;"	d
E1000_KABGTXD_BGSQLBIAS	include/e1000e.h	/^#define E1000_KABGTXD_BGSQLBIAS /;"	d
E1000_KMRNCTRLSTA	include/e1000e.h	/^#define E1000_KMRNCTRLSTA /;"	d
E1000_KMRNCTRLSTA_INBAND_PARAM	include/e1000e.h	/^#define E1000_KMRNCTRLSTA_INBAND_PARAM /;"	d
E1000_KMRNCTRLSTA_OFFSET	include/e1000e.h	/^#define E1000_KMRNCTRLSTA_OFFSET /;"	d
E1000_KMRNCTRLSTA_OFFSET_SHIFT	include/e1000e.h	/^#define E1000_KMRNCTRLSTA_OFFSET_SHIFT /;"	d
E1000_KMRNCTRLSTA_REN	include/e1000e.h	/^#define E1000_KMRNCTRLSTA_REN /;"	d
E1000_KMRNCTRLSTA_TIMEOUTS	include/e1000e.h	/^#define E1000_KMRNCTRLSTA_TIMEOUTS /;"	d
E1000_MASTER_DISABLE_TIMEOUT	include/e1000e.h	/^#define E1000_MASTER_DISABLE_TIMEOUT /;"	d
E1000_MAX_PHY_MULTI_PAGE_REG	include/e1000e.h	/^#define E1000_MAX_PHY_MULTI_PAGE_REG /;"	d
E1000_MAX_PHY_REG_ADDRESS	include/e1000e.h	/^#define E1000_MAX_PHY_REG_ADDRESS /;"	d
E1000_MDIC	include/e1000e.h	/^#define E1000_MDIC /;"	d
E1000_MDIC_ERROR	include/e1000e.h	/^#define E1000_MDIC_ERROR /;"	d
E1000_MDIC_OP_READ	include/e1000e.h	/^#define E1000_MDIC_OP_READ /;"	d
E1000_MDIC_OP_WRITE	include/e1000e.h	/^#define E1000_MDIC_OP_WRITE /;"	d
E1000_MDIC_PHY_MASK	include/e1000e.h	/^#define E1000_MDIC_PHY_MASK /;"	d
E1000_MDIC_PHY_SHIFT	include/e1000e.h	/^#define E1000_MDIC_PHY_SHIFT /;"	d
E1000_MDIC_READY	include/e1000e.h	/^#define E1000_MDIC_READY /;"	d
E1000_MDIC_REG_SHIFT	include/e1000e.h	/^#define E1000_MDIC_REG_SHIFT /;"	d
E1000_MII_CR_AUTO_NEG_EN	include/e1000e.h	/^#define E1000_MII_CR_AUTO_NEG_EN /;"	d
E1000_MII_CR_RESET	include/e1000e.h	/^#define E1000_MII_CR_RESET /;"	d
E1000_MII_CR_RESTART_AUTO_NEG	include/e1000e.h	/^#define E1000_MII_CR_RESTART_AUTO_NEG /;"	d
E1000_MII_SR_AUTONEG_COMPLETE	include/e1000e.h	/^#define E1000_MII_SR_AUTONEG_COMPLETE	/;"	d
E1000_MII_SR_LINK_STATUS	include/e1000e.h	/^#define E1000_MII_SR_LINK_STATUS	/;"	d
E1000_MTA	include/e1000e.h	/^#define E1000_MTA /;"	d
E1000_NWAY_AR_100TX_FD_CAPS	include/e1000e.h	/^#define E1000_NWAY_AR_100TX_FD_CAPS /;"	d
E1000_NWAY_AR_100TX_HD_CAPS	include/e1000e.h	/^#define E1000_NWAY_AR_100TX_HD_CAPS /;"	d
E1000_NWAY_AR_10T_FD_CAPS	include/e1000e.h	/^#define E1000_NWAY_AR_10T_FD_CAPS /;"	d
E1000_NWAY_AR_10T_HD_CAPS	include/e1000e.h	/^#define E1000_NWAY_AR_10T_HD_CAPS /;"	d
E1000_NWAY_AR_ASM_DIR	include/e1000e.h	/^#define E1000_NWAY_AR_ASM_DIR /;"	d
E1000_NWAY_AR_PAUSE	include/e1000e.h	/^#define E1000_NWAY_AR_PAUSE /;"	d
E1000_PBA	include/e1000e.h	/^#define E1000_PBA /;"	d
E1000_PBA_10K	include/e1000e.h	/^#define E1000_PBA_10K /;"	d
E1000_PBA_48K	include/e1000e.h	/^#define E1000_PBA_48K /;"	d
E1000_PCIE_NO_SNOOP_ALL	include/e1000e.h	/^#define E1000_PCIE_NO_SNOOP_ALL /;"	d
E1000_PCI_CMD_MASK	include/e1000e.h	/^#define E1000_PCI_CMD_MASK	/;"	d
E1000_PCI_COMMAND	include/e1000e.h	/^#define E1000_PCI_COMMAND /;"	d
E1000_PCI_FLASHBASE	include/e1000e.h	/^#define E1000_PCI_FLASHBASE /;"	d
E1000_PCI_IOBASE	include/e1000e.h	/^#define E1000_PCI_IOBASE /;"	d
E1000_PCI_IRQ	include/e1000e.h	/^#define E1000_PCI_IRQ /;"	d
E1000_PCI_MEMBASE	include/e1000e.h	/^#define E1000_PCI_MEMBASE /;"	d
E1000_PCI_STATUS	include/e1000e.h	/^#define E1000_PCI_STATUS /;"	d
E1000_PHY_1000T_CTRL	include/e1000e.h	/^#define E1000_PHY_1000T_CTRL /;"	d
E1000_PHY_AUTONEG_ADV	include/e1000e.h	/^#define E1000_PHY_AUTONEG_ADV /;"	d
E1000_PHY_CFG_TIMEOUT	include/e1000e.h	/^#define E1000_PHY_CFG_TIMEOUT /;"	d
E1000_PHY_CONTROL	include/e1000e.h	/^#define E1000_PHY_CONTROL /;"	d
E1000_PHY_PAGE_SELECT	include/e1000e.h	/^#define E1000_PHY_PAGE_SELECT /;"	d
E1000_PHY_PAGE_SHIFT	include/e1000e.h	/^#define E1000_PHY_PAGE_SHIFT /;"	d
E1000_PHY_STATUS	include/e1000e.h	/^#define E1000_PHY_STATUS /;"	d
E1000_RADV	include/e1000e.h	/^#define E1000_RADV /;"	d
E1000_RADV_DEFAULT	include/e1000e.h	/^#define E1000_RADV_DEFAULT	/;"	d
E1000_RAH	include/e1000e.h	/^#define E1000_RAH(/;"	d
E1000_RAH_AV	include/e1000e.h	/^#define E1000_RAH_AV /;"	d
E1000_RAH_MAC_ADDR_LEN	include/e1000e.h	/^#define E1000_RAH_MAC_ADDR_LEN /;"	d
E1000_RAL	include/e1000e.h	/^#define E1000_RAL(/;"	d
E1000_RAL_MAC_ADDR_LEN	include/e1000e.h	/^#define E1000_RAL_MAC_ADDR_LEN /;"	d
E1000_RCTL	include/e1000e.h	/^#define E1000_RCTL /;"	d
E1000_RCTL_BAM	include/e1000e.h	/^#define E1000_RCTL_BAM /;"	d
E1000_RCTL_BSEX	include/e1000e.h	/^#define E1000_RCTL_BSEX /;"	d
E1000_RCTL_DPF	include/e1000e.h	/^#define E1000_RCTL_DPF /;"	d
E1000_RCTL_DTYP_MASK	include/e1000e.h	/^#define E1000_RCTL_DTYP_MASK /;"	d
E1000_RCTL_EN	include/e1000e.h	/^#define E1000_RCTL_EN /;"	d
E1000_RCTL_FLXBUF_MASK	include/e1000e.h	/^#define E1000_RCTL_FLXBUF_MASK /;"	d
E1000_RCTL_LBM_NO	include/e1000e.h	/^#define E1000_RCTL_LBM_NO /;"	d
E1000_RCTL_LPE	include/e1000e.h	/^#define E1000_RCTL_LPE /;"	d
E1000_RCTL_MDR	include/e1000e.h	/^#define E1000_RCTL_MDR /;"	d
E1000_RCTL_MO_0	include/e1000e.h	/^#define E1000_RCTL_MO_0 /;"	d
E1000_RCTL_MO_1	include/e1000e.h	/^#define E1000_RCTL_MO_1 /;"	d
E1000_RCTL_MO_2	include/e1000e.h	/^#define E1000_RCTL_MO_2 /;"	d
E1000_RCTL_MO_3	include/e1000e.h	/^#define E1000_RCTL_MO_3 /;"	d
E1000_RCTL_MO_SHIFT	include/e1000e.h	/^#define E1000_RCTL_MO_SHIFT /;"	d
E1000_RCTL_MPE	include/e1000e.h	/^#define E1000_RCTL_MPE /;"	d
E1000_RCTL_PMCF	include/e1000e.h	/^#define E1000_RCTL_PMCF /;"	d
E1000_RCTL_RDMTS_HALF	include/e1000e.h	/^#define E1000_RCTL_RDMTS_HALF /;"	d
E1000_RCTL_RST	include/e1000e.h	/^#define E1000_RCTL_RST /;"	d
E1000_RCTL_SBP	include/e1000e.h	/^#define E1000_RCTL_SBP /;"	d
E1000_RCTL_SECRC	include/e1000e.h	/^#define E1000_RCTL_SECRC /;"	d
E1000_RCTL_SZ_2048	include/e1000e.h	/^#define E1000_RCTL_SZ_2048 /;"	d
E1000_RCTL_SZ_4096	include/e1000e.h	/^#define E1000_RCTL_SZ_4096 /;"	d
E1000_RCTL_UPE	include/e1000e.h	/^#define E1000_RCTL_UPE /;"	d
E1000_RDBAH	include/e1000e.h	/^#define E1000_RDBAH(/;"	d
E1000_RDBAL	include/e1000e.h	/^#define E1000_RDBAL(/;"	d
E1000_RDH	include/e1000e.h	/^#define E1000_RDH(/;"	d
E1000_RDLEN	include/e1000e.h	/^#define E1000_RDLEN(/;"	d
E1000_RDSIZE	include/e1000e.h	/^#define E1000_RDSIZE /;"	d
E1000_RDT	include/e1000e.h	/^#define E1000_RDT(/;"	d
E1000_RDTR	include/e1000e.h	/^#define E1000_RDTR /;"	d
E1000_RDTR_DEFAULT	include/e1000e.h	/^#define E1000_RDTR_DEFAULT	/;"	d
E1000_RFCTL	include/e1000e.h	/^#define E1000_RFCTL /;"	d
E1000_RFCTL_NFSR_DIS	include/e1000e.h	/^#define E1000_RFCTL_NFSR_DIS /;"	d
E1000_RFCTL_NFSW_DIS	include/e1000e.h	/^#define E1000_RFCTL_NFSW_DIS /;"	d
E1000_RING_BOUNDARY	include/e1000e.h	/^#define E1000_RING_BOUNDARY /;"	d
E1000_RXCSUM	include/e1000e.h	/^#define E1000_RXCSUM /;"	d
E1000_RXCSUM_IPOFL	include/e1000e.h	/^#define E1000_RXCSUM_IPOFL /;"	d
E1000_RXCSUM_TUOFL	include/e1000e.h	/^#define E1000_RXCSUM_TUOFL /;"	d
E1000_RXD_STAT_DD	include/e1000e.h	/^#define E1000_RXD_STAT_DD /;"	d
E1000_RXD_STAT_EOP	include/e1000e.h	/^#define E1000_RXD_STAT_EOP /;"	d
E1000_RX_RING_SIZE	include/e1000e.h	/^#define E1000_RX_RING_SIZE /;"	d
E1000_STATUS	include/e1000e.h	/^#define E1000_STATUS /;"	d
E1000_STATUS_GIO_MASTER_ENABLE	include/e1000e.h	/^#define E1000_STATUS_GIO_MASTER_ENABLE /;"	d
E1000_STATUS_LAN_INIT_DONE	include/e1000e.h	/^#define E1000_STATUS_LAN_INIT_DONE /;"	d
E1000_STATUS_PHYRA	include/e1000e.h	/^#define E1000_STATUS_PHYRA /;"	d
E1000_SW_FLAG_TIMEOUT	include/e1000e.h	/^#define E1000_SW_FLAG_TIMEOUT /;"	d
E1000_TADV	include/e1000e.h	/^#define E1000_TADV /;"	d
E1000_TADV_DEFAULT	include/e1000e.h	/^#define E1000_TADV_DEFAULT	/;"	d
E1000_TARC	include/e1000e.h	/^#define E1000_TARC(/;"	d
E1000_TBT	include/e1000e.h	/^#define E1000_TBT /;"	d
E1000_TCTL	include/e1000e.h	/^#define E1000_TCTL /;"	d
E1000_TCTL_COLD	include/e1000e.h	/^#define E1000_TCTL_COLD /;"	d
E1000_TCTL_CT	include/e1000e.h	/^#define E1000_TCTL_CT /;"	d
E1000_TCTL_EN	include/e1000e.h	/^#define E1000_TCTL_EN /;"	d
E1000_TCTL_PSP	include/e1000e.h	/^#define E1000_TCTL_PSP /;"	d
E1000_TCTL_RST	include/e1000e.h	/^#define E1000_TCTL_RST /;"	d
E1000_TCTL_RTLC	include/e1000e.h	/^#define E1000_TCTL_RTLC /;"	d
E1000_TDBAH	include/e1000e.h	/^#define E1000_TDBAH(/;"	d
E1000_TDBAL	include/e1000e.h	/^#define E1000_TDBAL(/;"	d
E1000_TDH	include/e1000e.h	/^#define E1000_TDH(/;"	d
E1000_TDLEN	include/e1000e.h	/^#define E1000_TDLEN(/;"	d
E1000_TDSIZE	include/e1000e.h	/^#define E1000_TDSIZE /;"	d
E1000_TDT	include/e1000e.h	/^#define E1000_TDT(/;"	d
E1000_TIDV	include/e1000e.h	/^#define E1000_TIDV /;"	d
E1000_TIDV_DEFAULT	include/e1000e.h	/^#define E1000_TIDV_DEFAULT	/;"	d
E1000_TIPG	include/e1000e.h	/^#define E1000_TIPG /;"	d
E1000_TIPG_IPGR1_DEFAULT	include/e1000e.h	/^#define E1000_TIPG_IPGR1_DEFAULT	/;"	d
E1000_TIPG_IPGR1_SHIFT	include/e1000e.h	/^#define E1000_TIPG_IPGR1_SHIFT	/;"	d
E1000_TIPG_IPGR2_DEFAULT	include/e1000e.h	/^#define E1000_TIPG_IPGR2_DEFAULT /;"	d
E1000_TIPG_IPGR2_SHIFT	include/e1000e.h	/^#define E1000_TIPG_IPGR2_SHIFT	/;"	d
E1000_TIPG_IPGT_COPPER_DEFAULT	include/e1000e.h	/^#define E1000_TIPG_IPGT_COPPER_DEFAULT	/;"	d
E1000_TXDCTL	include/e1000e.h	/^#define E1000_TXDCTL(/;"	d
E1000_TXDCTL_GRAN	include/e1000e.h	/^#define E1000_TXDCTL_GRAN /;"	d
E1000_TXDCTL_MAX_TX_DESC_PREFETCH	include/e1000e.h	/^#define E1000_TXDCTL_MAX_TX_DESC_PREFETCH /;"	d
E1000_TXDCTL_WTHRESH	include/e1000e.h	/^#define E1000_TXDCTL_WTHRESH /;"	d
E1000_TXD_CMD_DEXT	include/e1000e.h	/^#define E1000_TXD_CMD_DEXT /;"	d
E1000_TXD_CMD_EOP	include/e1000e.h	/^#define E1000_TXD_CMD_EOP /;"	d
E1000_TXD_CMD_IC	include/e1000e.h	/^#define E1000_TXD_CMD_IC /;"	d
E1000_TXD_CMD_IDE	include/e1000e.h	/^#define E1000_TXD_CMD_IDE /;"	d
E1000_TXD_CMD_IFCS	include/e1000e.h	/^#define E1000_TXD_CMD_IFCS /;"	d
E1000_TXD_CMD_RS	include/e1000e.h	/^#define E1000_TXD_CMD_RS /;"	d
E1000_TXD_STAT_DD	include/e1000e.h	/^#define E1000_TXD_STAT_DD /;"	d
E1000_TX_RING_SIZE	include/e1000e.h	/^#define E1000_TX_RING_SIZE /;"	d
ECHO$(MACHINE)	compile/Makefile	/^ECHO$(MACHINE) = echo; echo "On Vbox, the following command would be run:  "$/;"	m
ELOOP_BUFSIZE	include/ethloop.h	/^#define ELOOP_BUFSIZE /;"	d
ELOOP_CTRL_CLRFLAG	include/ethloop.h	/^#define ELOOP_CTRL_CLRFLAG	/;"	d
ELOOP_CTRL_GETHOLD	include/ethloop.h	/^#define ELOOP_CTRL_GETHOLD	/;"	d
ELOOP_CTRL_SETFLAG	include/ethloop.h	/^#define ELOOP_CTRL_SETFLAG /;"	d
ELOOP_FLAG_DROPALL	include/ethloop.h	/^#define ELOOP_FLAG_DROPALL	/;"	d
ELOOP_FLAG_DROPNXT	include/ethloop.h	/^#define ELOOP_FLAG_DROPNXT	/;"	d
ELOOP_FLAG_HOLDNXT	include/ethloop.h	/^#define ELOOP_FLAG_HOLDNXT	/;"	d
ELOOP_LINKHDRSIZE	include/ethloop.h	/^#define ELOOP_LINKHDRSIZE /;"	d
ELOOP_MTU	include/ethloop.h	/^#define ELOOP_MTU /;"	d
ELOOP_NBUF	include/ethloop.h	/^#define ELOOP_NBUF /;"	d
ELOOP_STATE_ALLOC	include/ethloop.h	/^#define ELOOP_STATE_ALLOC /;"	d
ELOOP_STATE_FREE	include/ethloop.h	/^#define ELOOP_STATE_FREE /;"	d
EMPTY	include/queue.h	/^#define	EMPTY	/;"	d
EMPTY	lib/fscanf.c	/^#define EMPTY /;"	d	file:
EOF	include/kernel.h	/^#define	EOF	/;"	d
EOF	lib/doscan.c	/^#define EOF /;"	d	file:
EOF	lib/fgetc.c	/^#define EOF /;"	d	file:
EOF	lib/fputc.c	/^#define EOF /;"	d	file:
EOF	lib/fscanf.c	/^#define EOF /;"	d	file:
EOF	lib/sscanf.c	/^#define EOF /;"	d	file:
EOI	include/icu.h	/^#define	EOI	/;"	d
EOI	include/icu.s	/^	.set	EOI,0x20	\/* Non-specific end of interrupt	*\/$/;"	d
ETHER0	config/conf.h	/^#define	ETHER0	/;"	d
ETHER0	config/conf.h	/^#define ETHER0 /;"	d
ETH_ADDR_LEN	include/ether.h	/^#define	ETH_ADDR_LEN	/;"	d
ETH_ARP	include/net.h	/^#define	ETH_ARP /;"	d
ETH_BUF_SIZE	include/ether.h	/^#define	ETH_BUF_SIZE	/;"	d
ETH_CRC_LEN	include/ether.h	/^#define ETH_CRC_LEN	/;"	d
ETH_CTRL_ADD_MCAST	include/ether.h	/^#define ETH_CTRL_ADD_MCAST	/;"	d
ETH_CTRL_GET_MAC	include/ether.h	/^#define	ETH_CTRL_GET_MAC /;"	d
ETH_CTRL_REMOVE_MCAST	include/ether.h	/^#define ETH_CTRL_REMOVE_MCAST	/;"	d
ETH_CTRL_SET_MAC	include/ether.h	/^#define	ETH_CTRL_SET_MAC	/;"	d
ETH_HDR_LEN	include/ether.h	/^#define	ETH_HDR_LEN	/;"	d
ETH_IP	include/net.h	/^#define	ETH_IP /;"	d
ETH_IPv6	include/net.h	/^#define	ETH_IPv6 /;"	d
ETH_MAX_PKT_LEN	include/ether.h	/^#define	ETH_MAX_PKT_LEN	/;"	d
ETH_MTU	include/ether.h	/^#define	ETH_MTU	/;"	d
ETH_NUM_MCAST	include/ether.h	/^#define ETH_NUM_MCAST	/;"	d
ETH_STATE_DOWN	include/ether.h	/^#define	ETH_STATE_DOWN	/;"	d
ETH_STATE_FREE	include/ether.h	/^#define	ETH_STATE_FREE	/;"	d
ETH_STATE_UP	include/ether.h	/^#define	ETH_STATE_UP	/;"	d
ETH_VLAN_LEN	include/ether.h	/^#define	ETH_VLAN_LEN	/;"	d
Eaddr	include/ether.h	/^typedef	byte Eaddr[ETH_ADDR_LEN];	\/* Physical Ethernet address	*\/$/;"	t	typeref:typename:byte[ETH_ADDR_LEN]
FALSE	include/kernel.h	/^#define FALSE	/;"	d
FILESYS	device/nam/naminit.c	/^#define	FILESYS	/;"	d	file:
FLASH_AMD_ECS	include/flash.h	/^#define FLASH_AMD_ECS /;"	d
FLASH_AMD_SCS	include/flash.h	/^#define FLASH_AMD_SCS /;"	d
FLASH_BLK_SIZE	include/flash.h	/^#define FLASH_BLK_SIZE /;"	d
FLASH_BLOCK	include/flash.h	/^#define FLASH_BLOCK /;"	d
FLASH_BLOCK_CLEAN	include/flash.h	/^#define FLASH_BLOCK_CLEAN /;"	d
FLASH_BLOCK_DIRTY	include/flash.h	/^#define FLASH_BLOCK_DIRTY /;"	d
FLASH_BLOCK_FREE	include/flash.h	/^#define FLASH_BLOCK_FREE /;"	d
FLASH_BLOCK_SIZE	include/flash.h	/^#define FLASH_BLOCK_SIZE /;"	d
FLASH_ERASE_PREP	include/flash.h	/^#define FLASH_ERASE_PREP /;"	d
FLASH_INTEL_ECS	include/flash.h	/^#define FLASH_INTEL_ECS /;"	d
FLASH_INTEL_SCS	include/flash.h	/^#define FLASH_INTEL_SCS /;"	d
FLASH_LOCK	include/flash.h	/^#define FLASH_LOCK /;"	d
FLASH_LOCKDOWN	include/flash.h	/^#define FLASH_LOCKDOWN /;"	d
FLASH_LOCKED	include/flash.h	/^#define FLASH_LOCKED /;"	d
FLASH_LOGBLOCK	include/flash.h	/^#define FLASH_LOGBLOCK /;"	d
FLASH_MODE	include/flash.h	/^#define FLASH_MODE /;"	d
FLASH_MTSU_ECS	include/flash.h	/^#define FLASH_MTSU_ECS /;"	d
FLASH_MTSU_SCS	include/flash.h	/^#define FLASH_MTSU_SCS /;"	d
FLASH_N_BLOCKS	include/flash.h	/^#define FLASH_N_BLOCKS /;"	d
FLASH_RESET	include/flash.h	/^#define FLASH_RESET /;"	d
FLASH_STATUS	include/flash.h	/^#define FLASH_STATUS /;"	d
FLASH_SYNC	include/flash.h	/^#define FLASH_SYNC /;"	d
FLASH_UNLOCK	include/flash.h	/^#define FLASH_UNLOCK /;"	d
FLASH_WIDEMODE	include/flash.h	/^#define FLASH_WIDEMODE /;"	d
F_CTL_DEL	include/file.h	/^#define	F_CTL_DEL	/;"	d
F_CTL_MKDIR	include/file.h	/^#define	F_CTL_MKDIR	/;"	d
F_CTL_RMDIR	include/file.h	/^#define	F_CTL_RMDIR	/;"	d
F_CTL_SIZE	include/file.h	/^#define F_CTL_SIZE	/;"	d
F_CTL_TRUNC	include/file.h	/^#define	F_CTL_TRUNC	/;"	d
F_MODE_N	include/file.h	/^#define	F_MODE_N	/;"	d
F_MODE_NO	include/file.h	/^#define	F_MODE_NO	/;"	d
F_MODE_O	include/file.h	/^#define	F_MODE_O	/;"	d
F_MODE_R	include/file.h	/^#define	F_MODE_R	/;"	d
F_MODE_RW	include/file.h	/^#define	F_MODE_RW	/;"	d
F_MODE_W	include/file.h	/^#define	F_MODE_W	/;"	d
GETC	config/config.y	/^	CLOSE READ WRITE SEEK CONTROL IS ON GETC PUTC$/;"	t
HEX	config/config.l	/^HEX 0x[0-9a-fA-F]+$/;"	r
HOLEEND	include/memory.h	/^#define	HOLEEND	/;"	d
HOLESTART	include/memory.h	/^#define	HOLESTART	/;"	d
ICMP_ECHOREPLY	include/icmp.h	/^#define	ICMP_ECHOREPLY	/;"	d
ICMP_ECHOREQST	include/icmp.h	/^#define ICMP_ECHOREQST	/;"	d
ICMP_FREE	include/icmp.h	/^#define	ICMP_FREE	/;"	d
ICMP_HDR_LEN	include/icmp.h	/^#define ICMP_HDR_LEN	/;"	d
ICMP_QSIZ	include/icmp.h	/^#define	ICMP_QSIZ	/;"	d
ICMP_RECV	include/icmp.h	/^#define	ICMP_RECV	/;"	d
ICMP_SLOTS	include/icmp.h	/^#define	ICMP_SLOTS	/;"	d
ICMP_USED	include/icmp.h	/^#define	ICMP_USED	/;"	d
ICU1	include/icu.h	/^#define	ICU1	/;"	d
ICU1	include/icu.s	/^	.set	ICU1,0x20	\/* I\/O port address, 8259A #1		*\/$/;"	d
ICU2	include/icu.h	/^#define	ICU2	/;"	d
ICU2	include/icu.s	/^	.set	ICU2,0xA0	\/* I\/O port address, 8258A #2		*\/$/;"	d
ID	config/config.l	/^ID [a-z_A-Z][a-z_A-Z0-9]*$/;"	r
IDENT	config/config.y	/^%token	DEFBRK IFBRK COLON OCTAL INTEGER IDENT CSR IRQ INTR INIT OPEN$/;"	t
IFBRK	config/config.y	/^%token	DEFBRK IFBRK COLON OCTAL INTEGER IDENT CSR IRQ INTR INIT OPEN$/;"	t
IGDT_INTR	include/i386.h	/^#define	IGDT_INTR	/;"	d
IGDT_TASK	include/i386.h	/^#define	IGDT_TASK	/;"	d
IGDT_TRAPG	include/i386.h	/^#define	IGDT_TRAPG	/;"	d
IMR	include/icu.h	/^#define	IMR	/;"	d
IMR1	include/icu.s	/^	.set	IMR1,ICU1 + 1	\/* Interrupt Mask Register for #1	*\/$/;"	d
IMR1	system/i386.c	/^#define	IMR1	/;"	d	file:
IMR2	include/icu.s	/^	.set	IMR2,ICU2 + 1	\/* Interrupt Mask Register for #2	*\/$/;"	d
IMR2	system/i386.c	/^#define	IMR2	/;"	d	file:
INCLUDE	compile/Makefile	/^INCLUDE		=	-I$(TOPDIR)\/include$/;"	m
INIT	config/config.y	/^%token	DEFBRK IFBRK COLON OCTAL INTEGER IDENT CSR IRQ INTR INIT OPEN$/;"	t
INITPRIO	include/process.h	/^#define	INITPRIO	/;"	d
INITRET	include/process.h	/^#define	INITRET	/;"	d
INITSTK	include/process.h	/^#define	INITSTK	/;"	d
INTEGER	config/config.y	/^%token	DEFBRK IFBRK COLON OCTAL INTEGER IDENT CSR IRQ INTR INIT OPEN$/;"	t
INTEL_82545EM_DEVICE_ID	include/e1000e.h	/^#define INTEL_82545EM_DEVICE_ID	/;"	d
INTEL_BLOCKMOD	include/flash.h	/^#define INTEL_BLOCKMOD /;"	d
INTEL_CLR_SR	include/flash.h	/^#define INTEL_CLR_SR /;"	d
INTEL_CONFIRM	include/flash.h	/^#define INTEL_CONFIRM /;"	d
INTEL_ERASE	include/flash.h	/^#define INTEL_ERASE /;"	d
INTEL_GET_16	include/flash.h	/^#define INTEL_GET_16(/;"	d
INTEL_GET_8	include/flash.h	/^#define INTEL_GET_8(/;"	d
INTEL_H_LOCK	include/flash.h	/^#define INTEL_H_LOCK /;"	d
INTEL_ID_BLS	include/flash.h	/^#define INTEL_ID_BLS /;"	d
INTEL_ID_DEV	include/flash.h	/^#define INTEL_ID_DEV /;"	d
INTEL_ID_MFG	include/flash.h	/^#define INTEL_ID_MFG /;"	d
INTEL_LOCK	include/flash.h	/^#define INTEL_LOCK /;"	d
INTEL_LOCKDOWN	include/flash.h	/^#define INTEL_LOCKDOWN /;"	d
INTEL_PROGRAM	include/flash.h	/^#define INTEL_PROGRAM /;"	d
INTEL_PUT_16	include/flash.h	/^#define INTEL_PUT_16(/;"	d
INTEL_PUT_8	include/flash.h	/^#define INTEL_PUT_8(/;"	d
INTEL_QUARK_LEGBR_PCI_DID	include/quark_irq.h	/^#define INTEL_QUARK_LEGBR_PCI_DID	/;"	d
INTEL_QUARK_LEGBR_PCI_VID	include/quark_irq.h	/^#define INTEL_QUARK_LEGBR_PCI_VID	/;"	d
INTEL_QUARK_SDIO_PCI_DID	include/sdmc.h	/^#define INTEL_QUARK_SDIO_PCI_DID	/;"	d
INTEL_QUARK_SDIO_PCI_VID	include/sdmc.h	/^#define INTEL_QUARK_SDIO_PCI_VID	/;"	d
INTEL_READ	include/flash.h	/^#define INTEL_READ /;"	d
INTEL_READ_ID	include/flash.h	/^#define INTEL_READ_ID /;"	d
INTEL_READ_SR	include/flash.h	/^#define INTEL_READ_SR /;"	d
INTEL_RESUME	include/flash.h	/^#define INTEL_RESUME /;"	d
INTEL_SR_BLS	include/flash.h	/^#define INTEL_SR_BLS /;"	d
INTEL_SR_ES	include/flash.h	/^#define INTEL_SR_ES /;"	d
INTEL_SR_ESS	include/flash.h	/^#define INTEL_SR_ESS /;"	d
INTEL_SR_PS	include/flash.h	/^#define INTEL_SR_PS /;"	d
INTEL_SR_PSS	include/flash.h	/^#define INTEL_SR_PSS /;"	d
INTEL_SR_WSMS	include/flash.h	/^#define INTEL_SR_WSMS /;"	d
INTEL_SUSPEND	include/flash.h	/^#define INTEL_SUSPEND /;"	d
INTEL_S_LOCK	include/flash.h	/^#define INTEL_S_LOCK /;"	d
INTEL_UART_PCI_DID	include/uart.h	/^#define INTEL_UART_PCI_DID	/;"	d
INTEL_UART_PCI_VID	include/uart.h	/^#define INTEL_UART_PCI_VID	/;"	d
INTEL_UNLOCK	include/flash.h	/^#define INTEL_UNLOCK /;"	d
INTEL_VENDOR_ID	include/e1000e.h	/^#define INTEL_VENDOR_ID	/;"	d
INTR	config/config.y	/^%token	DEFBRK IFBRK COLON OCTAL INTEGER IDENT CSR IRQ INTR INIT OPEN$/;"	t
INT_MAX	include/limits.h	/^#define INT_MAX /;"	d
INT_MIN	include/limits.h	/^#define INT_MIN /;"	d
IP_ALLZEROS	include/ip.h	/^#define	IP_ALLZEROS	/;"	d
IP_ASIZE	include/ip.h	/^#define	IP_ASIZE	/;"	d
IP_BCAST	include/ip.h	/^#define	IP_BCAST	/;"	d
IP_HDR_LEN	include/ip.h	/^#define	IP_HDR_LEN	/;"	d
IP_ICMP	include/ip.h	/^#define	IP_ICMP	/;"	d
IP_OQSIZ	include/ip.h	/^#define	IP_OQSIZ	/;"	d
IP_THIS	include/ip.h	/^#define	IP_THIS	/;"	d
IP_UDP	include/ip.h	/^#define	IP_UDP	/;"	d
IP_VH	include/ip.h	/^#define IP_VH	/;"	d
IRQ	config/config.y	/^%token	DEFBRK IFBRK COLON OCTAL INTEGER IDENT CSR IRQ INTR INIT OPEN$/;"	t
IRQAGENT0_OFFSET	include/quark_irq.h	/^#define IRQAGENT0_OFFSET	/;"	d
IRQAGENT0_VALUE	include/quark_irq.h	/^#define IRQAGENT0_VALUE	/;"	d
IRQAGENT1_OFFSET	include/quark_irq.h	/^#define IRQAGENT1_OFFSET	/;"	d
IRQAGENT1_VALUE	include/quark_irq.h	/^#define IRQAGENT1_VALUE	/;"	d
IRQAGENT2_OFFSET	include/quark_irq.h	/^#define IRQAGENT2_OFFSET	/;"	d
IRQAGENT2_VALUE	include/quark_irq.h	/^#define IRQAGENT2_VALUE /;"	d
IRQAGENT3_OFFSET	include/quark_irq.h	/^#define IRQAGENT3_OFFSET	/;"	d
IRQAGENT3_VALUE	include/quark_irq.h	/^#define IRQAGENT3_VALUE /;"	d
IRQBASE	config/conf.h	/^#define	IRQBASE	/;"	d
IRQBASE	include/i386.h	/^#define	IRQBASE	/;"	d
IRQ_ATH_MISC	config/conf.h	/^#define	IRQ_ATH_MISC /;"	d
IRQ_TIMER	config/conf.h	/^#define	IRQ_TIMER /;"	d
IS	config/config.y	/^	CLOSE READ WRITE SEEK CONTROL IS ON GETC PUTC$/;"	t
KCODE	system/i386.c	/^#define	KCODE	/;"	d	file:
KDATA	system/i386.c	/^#define	KDATA	/;"	d	file:
KERNEL_MAX_BLOCK	include/flash.h	/^#define KERNEL_MAX_BLOCK /;"	d
KERNEL_MIN_BLOCK	include/flash.h	/^#define KERNEL_MIN_BLOCK /;"	d
KSTACK	system/i386.c	/^#define	KSTACK	/;"	d	file:
L1	system/start.S	/^L1:$/;"	l
LD	compile/Makefile	/^LD		=	${COMPILER_ROOT}ld$/;"	m
LDFLAGS	compile/Makefile	/^LDFLAGS = -dn -m elf_i386 -Map xinu.map -T $(LDSCRIPT)$/;"	m
LDSCRIPT	compile/Makefile	/^LDSCRIPT	=	ld.script$/;"	m
LD_LIST	compile/Makefile	/^LD_LIST = binaries\/start.o $(filter-out binaries\/start.o,$(OBJ_FILES))$/;"	m
LEX	config/Makefile	/^LEX	= ${COMPILER_ROOT}flex$/;"	m
LFILE0	config/conf.h	/^#define LFILE0 /;"	d
LFILE1	config/conf.h	/^#define LFILE1 /;"	d
LFILE2	config/conf.h	/^#define LFILE2 /;"	d
LFILE3	config/conf.h	/^#define LFILE3 /;"	d
LFILE4	config/conf.h	/^#define LFILE4 /;"	d
LFILE5	config/conf.h	/^#define LFILE5 /;"	d
LFILESYS	config/conf.h	/^#define LFILESYS /;"	d
LFILESYS	device/nam/naminit.c	/^#define	LFILESYS	/;"	d	file:
LFLAGS	config/Makefile	/^LFLAGS	= -lfl$/;"	m
LFS_ID	include/lfilesys.h	/^#define	LFS_ID	/;"	d
LF_AREA_DIR	include/lfilesys.h	/^#define	LF_AREA_DIR	/;"	d
LF_AREA_IB	include/lfilesys.h	/^#define	LF_AREA_IB	/;"	d
LF_BLKSIZ	include/lfilesys.h	/^#define	LF_BLKSIZ	/;"	d
LF_CTL_DEL	include/lfilesys.h	/^#define	LF_CTL_DEL	/;"	d
LF_CTL_SIZE	include/lfilesys.h	/^#define LF_CTL_SIZE	/;"	d
LF_CTL_TRUNC	include/lfilesys.h	/^#define	LF_CTL_TRUNC	/;"	d
LF_DMASK	include/lfilesys.h	/^#define	LF_DMASK	/;"	d
LF_DNULL	include/lfilesys.h	/^#define	LF_DNULL	/;"	d
LF_FREE	include/lfilesys.h	/^#define	LF_FREE	/;"	d
LF_IBLEN	include/lfilesys.h	/^#define	LF_IBLEN	/;"	d
LF_IDATA	include/lfilesys.h	/^#define	LF_IDATA	/;"	d
LF_IMASK	include/lfilesys.h	/^#define	LF_IMASK	/;"	d
LF_INULL	include/lfilesys.h	/^#define	LF_INULL	/;"	d
LF_MODE_N	include/lfilesys.h	/^#define	LF_MODE_N	/;"	d
LF_MODE_O	include/lfilesys.h	/^#define	LF_MODE_O	/;"	d
LF_MODE_R	include/lfilesys.h	/^#define	LF_MODE_R	/;"	d
LF_MODE_RW	include/lfilesys.h	/^#define	LF_MODE_RW	/;"	d
LF_MODE_W	include/lfilesys.h	/^#define	LF_MODE_W	/;"	d
LF_NAME_LEN	include/lfilesys.h	/^#define	LF_NAME_LEN	/;"	d
LF_NUM_DIR_ENT	include/lfilesys.h	/^#define	LF_NUM_DIR_ENT	/;"	d
LF_USED	include/lfilesys.h	/^#define	LF_USED	/;"	d
LONG	lib/doscan.c	/^#define	LONG	/;"	d	file:
LONG_MAX	include/limits.h	/^#define LONG_MAX /;"	d
LONG_MIN	include/limits.h	/^#define LONG_MIN /;"	d
Lf_data	device/lfs/lfsinit.c	/^struct	lfdata	Lf_data;$/;"	v	typeref:struct:lfdata
M88E1000_PHY_SPEC_CTRL	include/e1000e.h	/^#define M88E1000_PHY_SPEC_CTRL /;"	d
M88E1000_PHY_SPEC_STATUS	include/e1000e.h	/^#define M88E1000_PHY_SPEC_STATUS /;"	d
M88E1000_PSCR_AUTO_X_MODE	include/e1000e.h	/^#define M88E1000_PSCR_AUTO_X_MODE /;"	d
M88E1000_PSCR_POLARITY_REVERSAL	include/e1000e.h	/^#define M88E1000_PSCR_POLARITY_REVERSAL /;"	d
MAKEDEP	compile/Makefile	/^MAKEDEP		=	$(CC) -M -MG$/;"	m
MAKEXBIN	compile/Makefile	/^MAKEXBIN 	=	$(TOPDIR)\/compile\/bin\/buildxbin$/;"	m
MAXKEY	include/queue.h	/^#define	MAXKEY	/;"	d
MAXMARK	include/mark.h	/^#define	MAXMARK	/;"	d
MAXPRIO	include/kernel.h	/^#define	MAXPRIO	/;"	d
MAXSECONDS	system/sleep.c	/^#define	MAXSECONDS	/;"	d	file:
MAXSTR	lib/doprnt.c	/^#define	MAXSTR	/;"	d	file:
MAXSTR	lib/fdoprnt.c	/^#define	MAXSTR	/;"	d	file:
MAX_LIVE_BLOCKS	include/flash.h	/^#define MAX_LIVE_BLOCKS /;"	d
MAX_REGIONS	include/flash.h	/^#define MAX_REGIONS /;"	d
MDELAY	include/delay.h	/^#define	MDELAY(/;"	d
MINKEY	include/queue.h	/^#define	MINKEY	/;"	d
MINSTK	include/kernel.h	/^#define	MINSTK	/;"	d
MKVERS	compile/Makefile	/^MKVERS		=	$(TOPDIR)\/compile\/bin\/mkvers$/;"	m
MULTIBOOT_BOOFINFO_MEM	include/multiboot.h	/^#define MULTIBOOT_BOOFINFO_MEM	/;"	d
MULTIBOOT_BOOTINFO_BOOTDEV	include/multiboot.h	/^#define MULTIBOOT_BOOTINFO_BOOTDEV	/;"	d
MULTIBOOT_BOOTINFO_CMDLINE	include/multiboot.h	/^#define MULTIBOOT_BOOTINFO_CMDLINE	/;"	d
MULTIBOOT_BOOTINFO_MMAP	include/multiboot.h	/^#define MULTIBOOT_BOOTINFO_MMAP	/;"	d
MULTIBOOT_BOOTINFO_MMAP	system/start.S	/^#define	MULTIBOOT_BOOTINFO_MMAP	/;"	d	file:
MULTIBOOT_BOOTINFO_MODS	include/multiboot.h	/^#define MULTIBOOT_BOOTINFO_MODS	/;"	d
MULTIBOOT_HEADER_FLAGS	include/multiboot.h	/^#define	MULTIBOOT_HEADER_FLAGS /;"	d
MULTIBOOT_HEADER_FLAGS	system/start.S	/^#define	MULTIBOOT_HEADER_FLAGS /;"	d	file:
MULTIBOOT_HEADER_MAGIC	include/multiboot.h	/^#define	MULTIBOOT_HEADER_MAGIC /;"	d
MULTIBOOT_HEADER_MAGIC	system/start.S	/^#define	MULTIBOOT_HEADER_MAGIC /;"	d	file:
MULTIBOOT_MMAP_TYPE_USABLE	include/multiboot.h	/^#define	MULTIBOOT_MMAP_TYPE_USABLE	/;"	d
MULTIBOOT_SIGNATURE	include/multiboot.h	/^#define MULTIBOOT_SIGNATURE	/;"	d
MULTIBOOT_SIGNATURE	system/start.S	/^#define	MULTIBOOT_SIGNATURE	/;"	d	file:
NAMESPACE	config/conf.h	/^#define NAMESPACE /;"	d
NBPG	include/i386.h	/^#define	NBPG	/;"	d
NBPOOLS	include/bufpool.h	/^#define	NBPOOLS	/;"	d
NDESC	include/process.h	/^#define NDESC	/;"	d
NDEVS	config/conf.h	/^#define NDEVS /;"	d
NETBOOTFILE	include/net.h	/^#define NETBOOTFILE	/;"	d
NETPRIO	include/net.h	/^#define NETPRIO	/;"	d
NETSTK	include/net.h	/^#define NETSTK	/;"	d
NGD	include/i386.h	/^#define	NGD	/;"	d
NIC_TYPE_82545EM	include/ether.h	/^#define	NIC_TYPE_82545EM	/;"	d
NID	include/i386.h	/^#define	NID	/;"	d
NM_MAXLEN	include/name.h	/^#define	NM_MAXLEN	/;"	d
NM_PRELEN	include/name.h	/^#define	NM_PRELEN	/;"	d
NM_REPLLEN	include/name.h	/^#define	NM_REPLLEN	/;"	d
NNAMES	include/name.h	/^#define	NNAMES	/;"	d
NPORTS	include/ports.h	/^#define	NPORTS	/;"	d
NPROC	config/conf.h	/^#define	NPROC	/;"	d
NPROC	include/process.h	/^#define	NPROC	/;"	d
NQENT	include/queue.h	/^#define NQENT	/;"	d
NSEM	config/conf.h	/^#define	NSEM	/;"	d
NSEM	include/semaphore.h	/^#define	NSEM	/;"	d
NULL	include/kernel.h	/^#define NULL	/;"	d
NULL	lib/doprnt.c	/^#define NULL /;"	d	file:
NULL	lib/doscan.c	/^#define	NULL	/;"	d	file:
NULL	lib/fdoprnt.c	/^#define NULL /;"	d	file:
NULL	lib/fgets.c	/^#define NULL /;"	d	file:
NULLCH	include/kernel.h	/^#define NULLCH	/;"	d
NULLDEV	config/conf.h	/^#define NULLDEV /;"	d
NULLPROC	include/process.h	/^#define	NULLPROC	/;"	d
NULLSTK	include/kernel.h	/^#define	NULLSTK	/;"	d
NULLSTR	include/kernel.h	/^#define	NULLSTR	/;"	d
NVRAM_MAX_BLOCK	include/flash.h	/^#define NVRAM_MAX_BLOCK /;"	d
NVRAM_MIN_BLOCK	include/flash.h	/^#define NVRAM_MIN_BLOCK /;"	d
NetData	net/net.c	/^struct	network	NetData;$/;"	v	typeref:struct:network
Neth	config/conf.h	/^#define	Neth	/;"	d
Neth	device/eth/ethinit.c	/^#define	Neth	/;"	d	file:
Nlfl	config/conf.h	/^#define	Nlfl	/;"	d
Nlfl	include/lfilesys.h	/^#define	Nlfl	/;"	d
Nlfs	config/conf.h	/^#define	Nlfs	/;"	d
Nnam	config/conf.h	/^#define	Nnam	/;"	d
Nnull	config/conf.h	/^#define	Nnull	/;"	d
Npip	config/conf.h	/^#define	Npip	/;"	d
Npipem	config/conf.h	/^#define	Npipem	/;"	d
Nram	config/conf.h	/^#define	Nram	/;"	d
Nrds	config/conf.h	/^#define	Nrds	/;"	d
Nrds	include/rdisksys.h	/^#define	Nrds	/;"	d
Nrfl	config/conf.h	/^#define	Nrfl	/;"	d
Nrfl	include/rfilesys.h	/^#define	Nrfl	/;"	d
Nrfs	config/conf.h	/^#define	Nrfs	/;"	d
Nsdmc	include/sdmc.h	/^#define	Nsdmc	/;"	d
Ntty	config/conf.h	/^#define	Ntty	/;"	d
Ntty	include/tty.h	/^#define	Ntty	/;"	d
OBJCOPY	compile/Makefile	/^OBJCOPY		=	${COMPILER_ROOT}objcopy$/;"	m
OCR	include/icu.h	/^#define	OCR	/;"	d
OCT	config/config.l	/^OCT 0[0-7]*$/;"	r
OCTAL	config/config.y	/^%token	DEFBRK IFBRK COLON OCTAL INTEGER IDENT CSR IRQ INTR INIT OPEN$/;"	t
OCW1_2	include/icu.s	/^	.set	OCW1_2,ICU1	$/;"	d
OCW2_2	include/icu.s	/^	.set	OCW2_2,ICU2$/;"	d
OK	include/kernel.h	/^#define OK	/;"	d
ON	config/config.y	/^	CLOSE READ WRITE SEEK CONTROL IS ON GETC PUTC$/;"	t
OPEN	config/config.y	/^%token	DEFBRK IFBRK COLON OCTAL INTEGER IDENT CSR IRQ INTR INIT OPEN$/;"	t
PABCDRC_OFFSET	include/quark_irq.h	/^#define PABCDRC_OFFSET	/;"	d
PABCDRC_VALUE	include/quark_irq.h	/^#define PABCDRC_VALUE	/;"	d
PACKLEN	include/net.h	/^#define	PACKLEN	/;"	d
PAGE_SIZE	include/memory.h	/^#define	PAGE_SIZE	/;"	d
PCIBIOS_BAD_REGISTER_NUMBER	include/pci.h	/^#define PCIBIOS_BAD_REGISTER_NUMBER /;"	d
PCIBIOS_BAD_VENDOR_ID	include/pci.h	/^#define PCIBIOS_BAD_VENDOR_ID /;"	d
PCIBIOS_BUFFER_TOO_SMALL	include/pci.h	/^#define PCIBIOS_BUFFER_TOO_SMALL /;"	d
PCIBIOS_DEVICE_NOT_FOUND	include/pci.h	/^#define PCIBIOS_DEVICE_NOT_FOUND /;"	d
PCIBIOS_ETHERNET_CLASS	include/pci.h	/^#define PCIBIOS_ETHERNET_CLASS /;"	d
PCIBIOS_FIND_PCI_CLASS_CODE	include/pci.h	/^#define PCIBIOS_FIND_PCI_CLASS_CODE /;"	d
PCIBIOS_FIND_PCI_DEVICE	include/pci.h	/^#define PCIBIOS_FIND_PCI_DEVICE /;"	d
PCIBIOS_FUNC_NOT_SUPPORTED	include/pci.h	/^#define PCIBIOS_FUNC_NOT_SUPPORTED /;"	d
PCIBIOS_GENERATE_SPECIAL_CYCLE	include/pci.h	/^#define PCIBIOS_GENERATE_SPECIAL_CYCLE /;"	d
PCIBIOS_GET_IRQ_ROUTING_OPTIONS	include/pci.h	/^#define PCIBIOS_GET_IRQ_ROUTING_OPTIONS /;"	d
PCIBIOS_MAX_DEVICE	include/pci.h	/^#define PCIBIOS_MAX_DEVICE /;"	d
PCIBIOS_MAX_INDEX	include/pci.h	/^#define PCIBIOS_MAX_INDEX /;"	d
PCIBIOS_MAX_VENDOR	include/pci.h	/^#define PCIBIOS_MAX_VENDOR /;"	d
PCIBIOS_PCI_BIOS_PRESENT	include/pci.h	/^#define PCIBIOS_PCI_BIOS_PRESENT /;"	d
PCIBIOS_READ_CONFIG_BYTE	include/pci.h	/^#define PCIBIOS_READ_CONFIG_BYTE /;"	d
PCIBIOS_READ_CONFIG_DWORD	include/pci.h	/^#define PCIBIOS_READ_CONFIG_DWORD /;"	d
PCIBIOS_READ_CONFIG_WORD	include/pci.h	/^#define PCIBIOS_READ_CONFIG_WORD /;"	d
PCIBIOS_SET_FAILED	include/pci.h	/^#define PCIBIOS_SET_FAILED /;"	d
PCIBIOS_SET_PCI_IRQ	include/pci.h	/^#define PCIBIOS_SET_PCI_IRQ /;"	d
PCIBIOS_SUCCESSFUL	include/pci.h	/^#define PCIBIOS_SUCCESSFUL /;"	d
PCIBIOS_WRITE_CONFIG_BYTE	include/pci.h	/^#define PCIBIOS_WRITE_CONFIG_BYTE /;"	d
PCIBIOS_WRITE_CONFIG_DWORD	include/pci.h	/^#define PCIBIOS_WRITE_CONFIG_DWORD /;"	d
PCIBIOS_WRITE_CONFIG_WORD	include/pci.h	/^#define PCIBIOS_WRITE_CONFIG_WORD /;"	d
PCI_SERVICE	include/pci.h	/^#define PCI_SERVICE /;"	d
PCI_SIGNATURE	include/pci.h	/^#define PCI_SIGNATURE /;"	d
PEFGHRC_OFFSET	include/quark_irq.h	/^#define PEFGHRC_OFFSET	/;"	d
PEFGHRC_VALUE	include/quark_irq.h	/^#define PEFGHRC_VALUE	/;"	d
PIPE	config/conf.h	/^#define PIPE /;"	d
PIPE0	config/conf.h	/^#define PIPE0 /;"	d
PIPE1	config/conf.h	/^#define PIPE1 /;"	d
PIPE2	config/conf.h	/^#define PIPE2 /;"	d
PIPE3	config/conf.h	/^#define PIPE3 /;"	d
PIPE4	config/conf.h	/^#define PIPE4 /;"	d
PIPE5	config/conf.h	/^#define PIPE5 /;"	d
PIPE6	config/conf.h	/^#define PIPE6 /;"	d
PIPE7	config/conf.h	/^#define PIPE7 /;"	d
PIPE8	config/conf.h	/^#define PIPE8 /;"	d
PIPE9	config/conf.h	/^#define PIPE9 /;"	d
PIPE_BUF_SIZE	include/pipe.h	/^#define	PIPE_BUF_SIZE	/;"	d
PIPE_EOF	include/pipe.h	/^#define	PIPE_EOF	/;"	d
PIPE_FREE	include/pipe.h	/^#define	PIPE_FREE	/;"	d
PIPE_OPEN	include/pipe.h	/^#define	PIPE_OPEN	/;"	d
PLAT	compile/Makefile	/^PLAT		=	Platform_$(PNAME)$/;"	m
PNAME	compile/Makefile	/^PNAME		=	Vbox$/;"	m
PNMLEN	include/process.h	/^#define	PNMLEN	/;"	d
PRECISION	lib/doprnt.c	/^#define PRECISION /;"	d	file:
PR_CURR	include/process.h	/^#define	PR_CURR	/;"	d
PR_FREE	include/process.h	/^#define	PR_FREE	/;"	d
PR_READY	include/process.h	/^#define	PR_READY	/;"	d
PR_RECTIM	include/process.h	/^#define	PR_RECTIM	/;"	d
PR_RECV	include/process.h	/^#define	PR_RECV	/;"	d
PR_SLEEP	include/process.h	/^#define	PR_SLEEP	/;"	d
PR_SUSP	include/process.h	/^#define	PR_SUSP	/;"	d
PR_WAIT	include/process.h	/^#define	PR_WAIT	/;"	d
PT_ALLOC	include/ports.h	/^#define	PT_ALLOC	/;"	d
PT_FREE	include/ports.h	/^#define	PT_FREE	/;"	d
PT_LIMBO	include/ports.h	/^#define	PT_LIMBO	/;"	d
PT_MSGS	include/ports.h	/^#define	PT_MSGS	/;"	d
PUTC	config/config.y	/^	CLOSE READ WRITE SEEK CONTROL IS ON GETC PUTC$/;"	t
PXE_CLIENT_STRING	include/pxe.h	/^#define PXE_CLIENT_STRING /;"	d
PXE_CLIENT_STRING_LEN	include/pxe.h	/^#define PXE_CLIENT_STRING_LEN /;"	d
QUANTUM	include/kernel.h	/^#define	QUANTUM	/;"	d
QUARK_MAC1_DESC	include/quark_pdat.h	/^#define QUARK_MAC1_DESC /;"	d
QUARK_MAC1_ID	include/quark_pdat.h	/^#define QUARK_MAC1_ID /;"	d
QUARK_MAC2_DESC	include/quark_pdat.h	/^#define QUARK_MAC2_DESC /;"	d
QUARK_MAC2_ID	include/quark_pdat.h	/^#define QUARK_MAC2_ID /;"	d
QUARK_MRCPARAMS_DESC	include/quark_pdat.h	/^#define QUARK_MRCPARAMS_DESC /;"	d
QUARK_MRCPARAMS_ID	include/quark_pdat.h	/^#define QUARK_MRCPARAMS_ID /;"	d
QUARK_PDAT_MAGIC	include/quark_pdat.h	/^#define QUARK_PDAT_MAGIC /;"	d
QUARK_PDAT_MEMORY_LOC	include/quark_pdat.h	/^#define QUARK_PDAT_MEMORY_LOC /;"	d
QUARK_PLAT_TYPE_DESC	include/quark_pdat.h	/^#define QUARK_PLAT_TYPE_DESC /;"	d
QUARK_PLAT_TYPE_ID	include/quark_pdat.h	/^#define QUARK_PLAT_TYPE_ID /;"	d
RAM0	config/conf.h	/^#define RAM0 /;"	d
RAND_MAX	include/stdlib.h	/^#define RAND_MAX /;"	d
RCBA_MASK	include/quark_irq.h	/^#define RCBA_MASK	/;"	d
RCBA_OFFSET	include/quark_irq.h	/^#define RCBA_OFFSET	/;"	d
RDISK	config/conf.h	/^#define RDISK /;"	d
RDS_CTL_CLOSE	include/rdisksys.h	/^#define	RDS_CTL_CLOSE	/;"	d
RDS_CTL_DEL	include/rdisksys.h	/^#define	RDS_CTL_DEL	/;"	d
RDS_CTL_SYNC	include/rdisksys.h	/^#define RDS_CTL_SYNC	/;"	d
RD_BLKSIZ	include/rdisksys.h	/^#define	RD_BLKSIZ	/;"	d
RD_CLOSED	include/rdisksys.h	/^#define	RD_CLOSED	/;"	d
RD_CNODES	include/rdisksys.h	/^#define	RD_CNODES	/;"	d
RD_DELETING	include/rdisksys.h	/^#define RD_DELETING	/;"	d
RD_IDLEN	include/rdisksys.h	/^#define	RD_IDLEN	/;"	d
RD_LOC_PORT	include/rdisksys.h	/^#define	RD_LOC_PORT	/;"	d
RD_MAX_REQ	include/rdisksys.h	/^#define	RD_MAX_REQ	/;"	d
RD_MIN_REQ	include/rdisksys.h	/^#define	RD_MIN_REQ	/;"	d
RD_MSG_CREQ	include/rdisksys.h	/^#define	RD_MSG_CREQ	/;"	d
RD_MSG_CRES	include/rdisksys.h	/^#define	RD_MSG_CRES	/;"	d
RD_MSG_DREQ	include/rdisksys.h	/^#define	RD_MSG_DREQ	/;"	d
RD_MSG_DRES	include/rdisksys.h	/^#define	RD_MSG_DRES	/;"	d
RD_MSG_HDR	include/rdisksys.h	/^#define	RD_MSG_HDR	/;"	d
RD_MSG_OREQ	include/rdisksys.h	/^#define	RD_MSG_OREQ	/;"	d
RD_MSG_ORES	include/rdisksys.h	/^#define	RD_MSG_ORES	/;"	d
RD_MSG_RESPONSE	include/rdisksys.h	/^#define	RD_MSG_RESPONSE	/;"	d
RD_MSG_RREQ	include/rdisksys.h	/^#define	RD_MSG_RREQ	/;"	d
RD_MSG_RRES	include/rdisksys.h	/^#define	RD_MSG_RRES	/;"	d
RD_MSG_WREQ	include/rdisksys.h	/^#define	RD_MSG_WREQ	/;"	d
RD_MSG_WRES	include/rdisksys.h	/^#define	RD_MSG_WRES	/;"	d
RD_OPEN	include/rdisksys.h	/^#define	RD_OPEN	/;"	d
RD_OP_READ	include/rdisksys.h	/^#define	RD_OP_READ	/;"	d
RD_OP_SYNC	include/rdisksys.h	/^#define	RD_OP_SYNC	/;"	d
RD_OP_WRITE	include/rdisksys.h	/^#define	RD_OP_WRITE	/;"	d
RD_PEND	include/rdisksys.h	/^#define	RD_PEND	/;"	d
RD_PRIO	include/rdisksys.h	/^#define	RD_PRIO	/;"	d
RD_QNODES	include/rdisksys.h	/^#define	RD_QNODES	/;"	d
RD_RETRIES	include/rdisksys.h	/^#define	RD_RETRIES	/;"	d
RD_SERVER	include/rdisksys.h	/^#define	RD_SERVER	/;"	d
RD_SERVER_PORT	include/rdisksys.h	/^#define	RD_SERVER_PORT	/;"	d
RD_SSIZE	include/rdisksys.h	/^#define	RD_SSIZE	/;"	d
RD_STACK	include/rdisksys.h	/^#define	RD_STACK	/;"	d
RD_TIMEOUT	include/rdisksys.h	/^#define	RD_TIMEOUT	/;"	d
READ	config/config.y	/^	CLOSE READ WRITE SEEK CONTROL IS ON GETC PUTC$/;"	t
REBUILDFLAGS	compile/Makefile	/^REBUILDFLAGS	=	-s $(TOPDIR)\/system  debug.c 	\\$/;"	m
REGDUMP	system/evec.c	/^#define REGDUMP$/;"	d	file:
REGULAR	lib/doscan.c	/^#define	REGULAR	/;"	d	file:
RFILE0	config/conf.h	/^#define RFILE0 /;"	d
RFILE1	config/conf.h	/^#define RFILE1 /;"	d
RFILE2	config/conf.h	/^#define RFILE2 /;"	d
RFILE3	config/conf.h	/^#define RFILE3 /;"	d
RFILE4	config/conf.h	/^#define RFILE4 /;"	d
RFILE5	config/conf.h	/^#define RFILE5 /;"	d
RFILE6	config/conf.h	/^#define RFILE6 /;"	d
RFILE7	config/conf.h	/^#define RFILE7 /;"	d
RFILE8	config/conf.h	/^#define RFILE8 /;"	d
RFILE9	config/conf.h	/^#define RFILE9 /;"	d
RFILESYS	config/conf.h	/^#define RFILESYS /;"	d
RFILESYS	device/nam/naminit.c	/^#define	RFILESYS	/;"	d	file:
RFS_CTL_DEL	include/rfilesys.h	/^#define	RFS_CTL_DEL	/;"	d
RFS_CTL_MKDIR	include/rfilesys.h	/^#define	RFS_CTL_MKDIR	/;"	d
RFS_CTL_RMDIR	include/rfilesys.h	/^#define	RFS_CTL_RMDIR	/;"	d
RFS_CTL_SIZE	include/rfilesys.h	/^#define RFS_CTL_SIZE	/;"	d
RFS_CTL_TRUNC	include/rfilesys.h	/^#define	RFS_CTL_TRUNC	/;"	d
RF_DATALEN	include/rfilesys.h	/^#define	RF_DATALEN	/;"	d
RF_FREE	include/rfilesys.h	/^#define	RF_FREE	/;"	d
RF_LOC_PORT	include/rfilesys.h	/^#define	RF_LOC_PORT	/;"	d
RF_MAX_REQ	include/rfilesys.h	/^#define	RF_MAX_REQ	/;"	d
RF_MIN_REQ	include/rfilesys.h	/^#define	RF_MIN_REQ	/;"	d
RF_MODE_N	include/rfilesys.h	/^#define	RF_MODE_N	/;"	d
RF_MODE_NO	include/rfilesys.h	/^#define	RF_MODE_NO	/;"	d
RF_MODE_O	include/rfilesys.h	/^#define	RF_MODE_O	/;"	d
RF_MODE_R	include/rfilesys.h	/^#define	RF_MODE_R	/;"	d
RF_MODE_RW	include/rfilesys.h	/^#define	RF_MODE_RW	/;"	d
RF_MODE_W	include/rfilesys.h	/^#define	RF_MODE_W	/;"	d
RF_MSG_CREQ	include/rfilesys.h	/^#define RF_MSG_CREQ	/;"	d
RF_MSG_CRES	include/rfilesys.h	/^#define RF_MSG_CRES	/;"	d
RF_MSG_DREQ	include/rfilesys.h	/^#define	RF_MSG_DREQ	/;"	d
RF_MSG_DRES	include/rfilesys.h	/^#define	RF_MSG_DRES	/;"	d
RF_MSG_HDR	include/rfilesys.h	/^#define	RF_MSG_HDR	/;"	d
RF_MSG_MREQ	include/rfilesys.h	/^#define	RF_MSG_MREQ	/;"	d
RF_MSG_MRES	include/rfilesys.h	/^#define	RF_MSG_MRES	/;"	d
RF_MSG_OREQ	include/rfilesys.h	/^#define	RF_MSG_OREQ	/;"	d
RF_MSG_ORES	include/rfilesys.h	/^#define	RF_MSG_ORES	/;"	d
RF_MSG_RESPONSE	include/rfilesys.h	/^#define	RF_MSG_RESPONSE	/;"	d
RF_MSG_RREQ	include/rfilesys.h	/^#define	RF_MSG_RREQ	/;"	d
RF_MSG_RRES	include/rfilesys.h	/^#define	RF_MSG_RRES	/;"	d
RF_MSG_SREQ	include/rfilesys.h	/^#define	RF_MSG_SREQ	/;"	d
RF_MSG_SRES	include/rfilesys.h	/^#define	RF_MSG_SRES	/;"	d
RF_MSG_TREQ	include/rfilesys.h	/^#define	RF_MSG_TREQ	/;"	d
RF_MSG_TRES	include/rfilesys.h	/^#define	RF_MSG_TRES	/;"	d
RF_MSG_WREQ	include/rfilesys.h	/^#define	RF_MSG_WREQ	/;"	d
RF_MSG_WRES	include/rfilesys.h	/^#define	RF_MSG_WRES	/;"	d
RF_MSG_XREQ	include/rfilesys.h	/^#define	RF_MSG_XREQ	/;"	d
RF_MSG_XRES	include/rfilesys.h	/^#define	RF_MSG_XRES	/;"	d
RF_NAMLEN	include/rfilesys.h	/^#define	RF_NAMLEN	/;"	d
RF_RETRIES	include/rfilesys.h	/^#define	RF_RETRIES	/;"	d
RF_SERVER	include/rfilesys.h	/^#define	RF_SERVER	/;"	d
RF_SERVER_PORT	include/rfilesys.h	/^#define	RF_SERVER_PORT	/;"	d
RF_TIMEOUT	include/rfilesys.h	/^#define	RF_TIMEOUT	/;"	d
RF_USED	include/rfilesys.h	/^#define	RF_USED	/;"	d
RM_BLKS	include/ramdisk.h	/^#define	RM_BLKS	/;"	d
RM_BLKSIZ	include/ramdisk.h	/^#define	RM_BLKSIZ	/;"	d
Ram	device/ram/raminit.c	/^struct	ramdisk	Ram;$/;"	v	typeref:struct:ramdisk
Rf_data	device/rfs/rfsinit.c	/^struct	rfdata	Rf_data;$/;"	v	typeref:struct:rfdata
SCHAR_MAX	include/limits.h	/^#define SCHAR_MAX /;"	d
SCHAR_MIN	include/limits.h	/^#define SCHAR_MIN /;"	d
SDMC_ABT	include/sdmc.h	/^#define SDMC_ABT	/;"	d
SDMC_ACMD41	include/sdmc.h	/^#define SDMC_ACMD41	/;"	d
SDMC_ACMD41_HCS	include/sdmc.h	/^#define SDMC_ACMD41_HCS	/;"	d
SDMC_ACMD41_S18R	include/sdmc.h	/^#define SDMC_ACMD41_S18R	/;"	d
SDMC_ACMD41_XPC	include/sdmc.h	/^#define SDMC_ACMD41_XPC	/;"	d
SDMC_BLK_GAP_EVENT_SIG_EN	include/sdmc.h	/^#define SDMC_BLK_GAP_EVENT_SIG_EN	/;"	d
SDMC_BLK_GAP_EVENT_STAT_EN	include/sdmc.h	/^#define SDMC_BLK_GAP_EVENT_STAT_EN	/;"	d
SDMC_BUF_RD_RDY_SIG_EN	include/sdmc.h	/^#define SDMC_BUF_RD_RDY_SIG_EN	/;"	d
SDMC_BUF_RD_RDY_STAT_EN	include/sdmc.h	/^#define SDMC_BUF_RD_RDY_STAT_EN	/;"	d
SDMC_BUF_WR_RDY_SIG_EN	include/sdmc.h	/^#define SDMC_BUF_WR_RDY_SIG_EN	/;"	d
SDMC_BUF_WR_RDY_STAT_EN	include/sdmc.h	/^#define SDMC_BUF_WR_RDY_STAT_EN	/;"	d
SDMC_CAP_VOLT_SUPPORT_1P8V	include/sdmc.h	/^#define SDMC_CAP_VOLT_SUPPORT_1P8V	/;"	d
SDMC_CAP_VOLT_SUPPORT_3P0V	include/sdmc.h	/^#define SDMC_CAP_VOLT_SUPPORT_3P0V	/;"	d
SDMC_CAP_VOLT_SUPPORT_3P3V	include/sdmc.h	/^#define SDMC_CAP_VOLT_SUPPORT_3P3V	/;"	d
SDMC_CLK_CTL_CLK_GEN_SEL	include/sdmc.h	/^#define SDMC_CLK_CTL_CLK_GEN_SEL	/;"	d
SDMC_CLK_CTL_INT_CLK_EN	include/sdmc.h	/^#define SDMC_CLK_CTL_INT_CLK_EN	/;"	d
SDMC_CLK_CTL_INT_CLK_STABLE	include/sdmc.h	/^#define SDMC_CLK_CTL_INT_CLK_STABLE	/;"	d
SDMC_CLK_CTL_SD_CLK_EN	include/sdmc.h	/^#define SDMC_CLK_CTL_SD_CLK_EN	/;"	d
SDMC_CLK_CTL_SD_FREQ_HIGH_MASK	include/sdmc.h	/^#define SDMC_CLK_CTL_SD_FREQ_HIGH_MASK	/;"	d
SDMC_CMD0	include/sdmc.h	/^#define SDMC_CMD0	/;"	d
SDMC_CMD10	include/sdmc.h	/^#define SDMC_CMD10	/;"	d
SDMC_CMD12	include/sdmc.h	/^#define SDMC_CMD12	/;"	d
SDMC_CMD13	include/sdmc.h	/^#define SDMC_CMD13	/;"	d
SDMC_CMD16	include/sdmc.h	/^#define SDMC_CMD16	/;"	d
SDMC_CMD17	include/sdmc.h	/^#define SDMC_CMD17	/;"	d
SDMC_CMD2	include/sdmc.h	/^#define SDMC_CMD2	/;"	d
SDMC_CMD3	include/sdmc.h	/^#define SDMC_CMD3	/;"	d
SDMC_CMD55	include/sdmc.h	/^#define SDMC_CMD55	/;"	d
SDMC_CMD7	include/sdmc.h	/^#define SDMC_CMD7	/;"	d
SDMC_CMD8	include/sdmc.h	/^#define SDMC_CMD8	/;"	d
SDMC_CMD9	include/sdmc.h	/^#define SDMC_CMD9	/;"	d
SDMC_CMD_COMP_SIG_EN	include/sdmc.h	/^#define SDMC_CMD_COMP_SIG_EN	/;"	d
SDMC_CMD_COMP_STAT_EN	include/sdmc.h	/^#define SDMC_CMD_COMP_STAT_EN	/;"	d
SDMC_CMD_DAT_TRNS	include/sdmc.h	/^#define SDMC_CMD_DAT_TRNS	/;"	d
SDMC_CMD_DELAY	include/sdmc.h	/^#define SDMC_CMD_DELAY	/;"	d
SDMC_CMD_NO_ERR_RCVY	include/sdmc.h	/^#define SDMC_CMD_NO_ERR_RCVY	/;"	d
SDMC_CMD_NO_FLAGS	include/sdmc.h	/^#define SDMC_CMD_NO_FLAGS	/;"	d
SDMC_CRD_INS_SIG_EN	include/sdmc.h	/^#define SDMC_CRD_INS_SIG_EN	/;"	d
SDMC_CRD_INS_STAT_EN	include/sdmc.h	/^#define SDMC_CRD_INS_STAT_EN	/;"	d
SDMC_CRD_INT_SIG_EN	include/sdmc.h	/^#define SDMC_CRD_INT_SIG_EN	/;"	d
SDMC_CRD_INT_STAT_EN	include/sdmc.h	/^#define SDMC_CRD_INT_STAT_EN	/;"	d
SDMC_CRD_RMV_SIG_EN	include/sdmc.h	/^#define SDMC_CRD_RMV_SIG_EN	/;"	d
SDMC_CRD_RMV_STAT_EN	include/sdmc.h	/^#define SDMC_CRD_RMV_STAT_EN	/;"	d
SDMC_DMA_INT_SIG_EN	include/sdmc.h	/^#define SDMC_DMA_INT_SIG_EN	/;"	d
SDMC_DMA_INT_STAT_EN	include/sdmc.h	/^#define SDMC_DMA_INT_STAT_EN	/;"	d
SDMC_ERR_INT_ADMA_ERR	include/sdmc.h	/^#define SDMC_ERR_INT_ADMA_ERR	/;"	d
SDMC_ERR_INT_ADMA_ERR_SIG_EN	include/sdmc.h	/^#define SDMC_ERR_INT_ADMA_ERR_SIG_EN	/;"	d
SDMC_ERR_INT_ADMA_ERR_STAT_EN	include/sdmc.h	/^#define SDMC_ERR_INT_ADMA_ERR_STAT_EN	/;"	d
SDMC_ERR_INT_CEATA_ERR	include/sdmc.h	/^#define SDMC_ERR_INT_CEATA_ERR	/;"	d
SDMC_ERR_INT_CEATA_ERR_EN	include/sdmc.h	/^#define SDMC_ERR_INT_CEATA_ERR_EN	/;"	d
SDMC_ERR_INT_CEATA_ERR_SIG_EN	include/sdmc.h	/^#define SDMC_ERR_INT_CEATA_ERR_SIG_EN	/;"	d
SDMC_ERR_INT_CMD12_ERR	include/sdmc.h	/^#define SDMC_ERR_INT_CMD12_ERR	/;"	d
SDMC_ERR_INT_CMD12_ERR_SIG_EN	include/sdmc.h	/^#define SDMC_ERR_INT_CMD12_ERR_SIG_EN	/;"	d
SDMC_ERR_INT_CMD12_ERR_STAT_EN	include/sdmc.h	/^#define SDMC_ERR_INT_CMD12_ERR_STAT_EN	/;"	d
SDMC_ERR_INT_CMD_CRC_ERR	include/sdmc.h	/^#define SDMC_ERR_INT_CMD_CRC_ERR	/;"	d
SDMC_ERR_INT_CMD_CRC_ERR_SIG_EN	include/sdmc.h	/^#define SDMC_ERR_INT_CMD_CRC_ERR_SIG_EN	/;"	d
SDMC_ERR_INT_CMD_CRC_ERR_STAT_EN	include/sdmc.h	/^#define SDMC_ERR_INT_CMD_CRC_ERR_STAT_EN	/;"	d
SDMC_ERR_INT_CMD_END_BIT_ERR	include/sdmc.h	/^#define SDMC_ERR_INT_CMD_END_BIT_ERR	/;"	d
SDMC_ERR_INT_CMD_END_BIT_ERR_SIG_EN	include/sdmc.h	/^#define SDMC_ERR_INT_CMD_END_BIT_ERR_SIG_EN	/;"	d
SDMC_ERR_INT_CMD_END_BIT_ERR_STAT_EN	include/sdmc.h	/^#define SDMC_ERR_INT_CMD_END_BIT_ERR_STAT_EN	/;"	d
SDMC_ERR_INT_CMD_INDEX_ERR	include/sdmc.h	/^#define SDMC_ERR_INT_CMD_INDEX_ERR	/;"	d
SDMC_ERR_INT_CMD_IND_ERR_SIG_EN	include/sdmc.h	/^#define SDMC_ERR_INT_CMD_IND_ERR_SIG_EN	/;"	d
SDMC_ERR_INT_CMD_IND_ERR_STAT_EN	include/sdmc.h	/^#define SDMC_ERR_INT_CMD_IND_ERR_STAT_EN	/;"	d
SDMC_ERR_INT_CMD_TIMEOUT_ERR	include/sdmc.h	/^#define SDMC_ERR_INT_CMD_TIMEOUT_ERR	/;"	d
SDMC_ERR_INT_CMD_TIMEOUT_ERR_SIG_EN	include/sdmc.h	/^#define SDMC_ERR_INT_CMD_TIMEOUT_ERR_SIG_EN	/;"	d
SDMC_ERR_INT_CMD_TIMEOUT_ERR_STAT_EN	include/sdmc.h	/^#define SDMC_ERR_INT_CMD_TIMEOUT_ERR_STAT_EN	/;"	d
SDMC_ERR_INT_CUR_LIMIT_ERR	include/sdmc.h	/^#define SDMC_ERR_INT_CUR_LIMIT_ERR	/;"	d
SDMC_ERR_INT_CUR_LIMIT_ERR_SIG_EN	include/sdmc.h	/^#define SDMC_ERR_INT_CUR_LIMIT_ERR_SIG_EN	/;"	d
SDMC_ERR_INT_CUR_LIMIT_ERR_STAT_EN	include/sdmc.h	/^#define SDMC_ERR_INT_CUR_LIMIT_ERR_STAT_EN	/;"	d
SDMC_ERR_INT_DATA_CRC_ERR	include/sdmc.h	/^#define SDMC_ERR_INT_DATA_CRC_ERR	/;"	d
SDMC_ERR_INT_DATA_CRC_ERR_SIG_EN	include/sdmc.h	/^#define SDMC_ERR_INT_DATA_CRC_ERR_SIG_EN	/;"	d
SDMC_ERR_INT_DATA_CRC_ERR_STAT_EN	include/sdmc.h	/^#define SDMC_ERR_INT_DATA_CRC_ERR_STAT_EN	/;"	d
SDMC_ERR_INT_DATA_END_BIT_ERR	include/sdmc.h	/^#define SDMC_ERR_INT_DATA_END_BIT_ERR	/;"	d
SDMC_ERR_INT_DATA_END_BIT_ERR_SIG_EN	include/sdmc.h	/^#define SDMC_ERR_INT_DATA_END_BIT_ERR_SIG_EN	/;"	d
SDMC_ERR_INT_DATA_END_BIT_ERR_STAT_EN	include/sdmc.h	/^#define SDMC_ERR_INT_DATA_END_BIT_ERR_STAT_EN	/;"	d
SDMC_ERR_INT_DATA_TIMEOUT_ERR	include/sdmc.h	/^#define SDMC_ERR_INT_DATA_TIMEOUT_ERR	/;"	d
SDMC_ERR_INT_DATA_TIMEOUT_ERR_SIG_EN	include/sdmc.h	/^#define SDMC_ERR_INT_DATA_TIMEOUT_ERR_SIG_EN	/;"	d
SDMC_ERR_INT_DATA_TIMEOUT_ERR_STAT_EN	include/sdmc.h	/^#define SDMC_ERR_INT_DATA_TIMEOUT_ERR_STAT_EN	/;"	d
SDMC_ERR_INT_TGT_RSP_ERR	include/sdmc.h	/^#define SDMC_ERR_INT_TGT_RSP_ERR	/;"	d
SDMC_ERR_INT_TGT_RSP_ERR_EN	include/sdmc.h	/^#define SDMC_ERR_INT_TGT_RSP_ERR_EN	/;"	d
SDMC_ERR_INT_TGT_RSP_ERR_SIG_EN	include/sdmc.h	/^#define SDMC_ERR_INT_TGT_RSP_ERR_SIG_EN	/;"	d
SDMC_ERR_INT_TUNE_ERR	include/sdmc.h	/^#define SDMC_ERR_INT_TUNE_ERR	/;"	d
SDMC_ERR_INT_TUNE_ERR_SIG_EN	include/sdmc.h	/^#define SDMC_ERR_INT_TUNE_ERR_SIG_EN	/;"	d
SDMC_ERR_INT_TUNE_ERR_STAT_EN	include/sdmc.h	/^#define SDMC_ERR_INT_TUNE_ERR_STAT_EN	/;"	d
SDMC_INT_A_SIG_EN	include/sdmc.h	/^#define SDMC_INT_A_SIG_EN	/;"	d
SDMC_INT_A_STAT_EN	include/sdmc.h	/^#define SDMC_INT_A_STAT_EN	/;"	d
SDMC_INT_B_SIG_EN	include/sdmc.h	/^#define SDMC_INT_B_SIG_EN	/;"	d
SDMC_INT_B_STAT_EN	include/sdmc.h	/^#define SDMC_INT_B_STAT_EN	/;"	d
SDMC_INT_C_SIG_EN	include/sdmc.h	/^#define SDMC_INT_C_SIG_EN	/;"	d
SDMC_INT_C_STAT_EN	include/sdmc.h	/^#define SDMC_INT_C_STAT_EN	/;"	d
SDMC_NML_INT_BLK_GAP_EVENT	include/sdmc.h	/^#define SDMC_NML_INT_BLK_GAP_EVENT	/;"	d
SDMC_NML_INT_BOOT_CK_RCV	include/sdmc.h	/^#define SDMC_NML_INT_BOOT_CK_RCV	/;"	d
SDMC_NML_INT_BOOT_TER_INT	include/sdmc.h	/^#define SDMC_NML_INT_BOOT_TER_INT	/;"	d
SDMC_NML_INT_BUF_RD_RDY	include/sdmc.h	/^#define SDMC_NML_INT_BUF_RD_RDY	/;"	d
SDMC_NML_INT_BUF_WR_RDY	include/sdmc.h	/^#define SDMC_NML_INT_BUF_WR_RDY	/;"	d
SDMC_NML_INT_CMD_COMP	include/sdmc.h	/^#define SDMC_NML_INT_CMD_COMP	/;"	d
SDMC_NML_INT_CRD_INS	include/sdmc.h	/^#define SDMC_NML_INT_CRD_INS	/;"	d
SDMC_NML_INT_CRD_INT	include/sdmc.h	/^#define SDMC_NML_INT_CRD_INT	/;"	d
SDMC_NML_INT_CRD_RM	include/sdmc.h	/^#define SDMC_NML_INT_CRD_RM	/;"	d
SDMC_NML_INT_DMA_INT	include/sdmc.h	/^#define SDMC_NML_INT_DMA_INT	/;"	d
SDMC_NML_INT_ERR_INT	include/sdmc.h	/^#define SDMC_NML_INT_ERR_INT	/;"	d
SDMC_NML_INT_INT_A	include/sdmc.h	/^#define SDMC_NML_INT_INT_A	/;"	d
SDMC_NML_INT_INT_B	include/sdmc.h	/^#define SDMC_NML_INT_INT_B	/;"	d
SDMC_NML_INT_INT_C	include/sdmc.h	/^#define SDMC_NML_INT_INT_C	/;"	d
SDMC_NML_INT_RE_TUNE	include/sdmc.h	/^#define SDMC_NML_INT_RE_TUNE	/;"	d
SDMC_NML_INT_TX_COMP	include/sdmc.h	/^#define SDMC_NML_INT_TX_COMP	/;"	d
SDMC_OCR_MASK	include/sdmc.h	/^#define SDMC_OCR_MASK	/;"	d
SDMC_PRE_STATE_CMD_INHIBIT_CMD	include/sdmc.h	/^#define SDMC_PRE_STATE_CMD_INHIBIT_CMD	/;"	d
SDMC_PRE_STATE_CMD_INHIBIT_DAT	include/sdmc.h	/^#define SDMC_PRE_STATE_CMD_INHIBIT_DAT	/;"	d
SDMC_PRE_STATE_CRD_INS	include/sdmc.h	/^#define SDMC_PRE_STATE_CRD_INS	/;"	d
SDMC_PRE_STATE_DATA_LN_SIG_LVL	include/sdmc.h	/^#define SDMC_PRE_STATE_DATA_LN_SIG_LVL	/;"	d
SDMC_PWR_CTL_HW_RST	include/sdmc.h	/^#define SDMC_PWR_CTL_HW_RST	/;"	d
SDMC_PWR_CTL_SD_BUS_PWR	include/sdmc.h	/^#define SDMC_PWR_CTL_SD_BUS_PWR	/;"	d
SDMC_PWR_CTL_SD_BUS_VOL_SEL_1P8V	include/sdmc.h	/^#define SDMC_PWR_CTL_SD_BUS_VOL_SEL_1P8V	/;"	d
SDMC_PWR_CTL_SD_BUS_VOL_SEL_3P0V	include/sdmc.h	/^#define SDMC_PWR_CTL_SD_BUS_VOL_SEL_3P0V	/;"	d
SDMC_PWR_CTL_SD_BUS_VOL_SEL_3P3V	include/sdmc.h	/^#define SDMC_PWR_CTL_SD_BUS_VOL_SEL_3P3V	/;"	d
SDMC_PWR_CTL_SD_BUS_VOL_SEL_CLR	include/sdmc.h	/^#define SDMC_PWR_CTL_SD_BUS_VOL_SEL_CLR	/;"	d
SDMC_R1_ADDRESS_ERROR	include/sdmc.h	/^#define SDMC_R1_ADDRESS_ERROR	/;"	d
SDMC_R1_AKE_SEQ_ERROR	include/sdmc.h	/^#define SDMC_R1_AKE_SEQ_ERROR	/;"	d
SDMC_R1_APP_CMD	include/sdmc.h	/^#define SDMC_R1_APP_CMD	/;"	d
SDMC_R1_BLOCK_LEN_ERROR	include/sdmc.h	/^#define SDMC_R1_BLOCK_LEN_ERROR	/;"	d
SDMC_R1_CARD_ECC_DISABLED	include/sdmc.h	/^#define SDMC_R1_CARD_ECC_DISABLED	/;"	d
SDMC_R1_CARD_ECC_FAILED	include/sdmc.h	/^#define SDMC_R1_CARD_ECC_FAILED	/;"	d
SDMC_R1_CARD_IS_LOCKED	include/sdmc.h	/^#define SDMC_R1_CARD_IS_LOCKED	/;"	d
SDMC_R1_CC_ERROR	include/sdmc.h	/^#define SDMC_R1_CC_ERROR	/;"	d
SDMC_R1_COM_CRC_ERROR	include/sdmc.h	/^#define SDMC_R1_COM_CRC_ERROR	/;"	d
SDMC_R1_CSD_OVERWRITE	include/sdmc.h	/^#define SDMC_R1_CSD_OVERWRITE	/;"	d
SDMC_R1_CURRENT_STATE	include/sdmc.h	/^#define SDMC_R1_CURRENT_STATE	/;"	d
SDMC_R1_DATA_STATE	include/sdmc.h	/^#define SDMC_R1_DATA_STATE	/;"	d
SDMC_R1_ERASE_PARAM	include/sdmc.h	/^#define SDMC_R1_ERASE_PARAM	/;"	d
SDMC_R1_ERASE_RESET	include/sdmc.h	/^#define SDMC_R1_ERASE_RESET	/;"	d
SDMC_R1_ERASE_SEQ_ERROR	include/sdmc.h	/^#define SDMC_R1_ERASE_SEQ_ERROR	/;"	d
SDMC_R1_ERROR	include/sdmc.h	/^#define SDMC_R1_ERROR	/;"	d
SDMC_R1_IDENT_STATE	include/sdmc.h	/^#define SDMC_R1_IDENT_STATE	/;"	d
SDMC_R1_IDLE_STATE	include/sdmc.h	/^#define SDMC_R1_IDLE_STATE	/;"	d
SDMC_R1_ILLEGAL_COMMAND	include/sdmc.h	/^#define SDMC_R1_ILLEGAL_COMMAND	/;"	d
SDMC_R1_LOCK_UNLOCK_FAILED	include/sdmc.h	/^#define SDMC_R1_LOCK_UNLOCK_FAILED	/;"	d
SDMC_R1_OUT_OF_RANGE	include/sdmc.h	/^#define SDMC_R1_OUT_OF_RANGE	/;"	d
SDMC_R1_PRG_STATE	include/sdmc.h	/^#define SDMC_R1_PRG_STATE	/;"	d
SDMC_R1_RCV_STATE	include/sdmc.h	/^#define SDMC_R1_RCV_STATE	/;"	d
SDMC_R1_READY_FOR_DATA	include/sdmc.h	/^#define SDMC_R1_READY_FOR_DATA	/;"	d
SDMC_R1_READY_STATE	include/sdmc.h	/^#define SDMC_R1_READY_STATE	/;"	d
SDMC_R1_TRAN_STATE	include/sdmc.h	/^#define SDMC_R1_TRAN_STATE	/;"	d
SDMC_R1_WP_ERASE_SKIP	include/sdmc.h	/^#define SDMC_R1_WP_ERASE_SKIP	/;"	d
SDMC_R1_WP_VIOLATION	include/sdmc.h	/^#define SDMC_R1_WP_VIOLATION	/;"	d
SDMC_R3_2P7_2P8	include/sdmc.h	/^#define SDMC_R3_2P7_2P8	/;"	d
SDMC_R3_2P8_2P9	include/sdmc.h	/^#define SDMC_R3_2P8_2P9	/;"	d
SDMC_R3_2P9_3P0	include/sdmc.h	/^#define SDMC_R3_2P9_3P0	/;"	d
SDMC_R3_3P0_3P1	include/sdmc.h	/^#define SDMC_R3_3P0_3P1	/;"	d
SDMC_R3_3P1_3P2	include/sdmc.h	/^#define SDMC_R3_3P1_3P2	/;"	d
SDMC_R3_3P2_3P3	include/sdmc.h	/^#define SDMC_R3_3P2_3P3	/;"	d
SDMC_R3_3P3_3P4	include/sdmc.h	/^#define SDMC_R3_3P3_3P4	/;"	d
SDMC_R3_3P4_3P5	include/sdmc.h	/^#define SDMC_R3_3P4_3P5	/;"	d
SDMC_R3_3P5_3P6	include/sdmc.h	/^#define SDMC_R3_3P5_3P6	/;"	d
SDMC_R3_BUSY	include/sdmc.h	/^#define SDMC_R3_BUSY	/;"	d
SDMC_R3_CCS	include/sdmc.h	/^#define SDMC_R3_CCS	/;"	d
SDMC_R3_S18A	include/sdmc.h	/^#define SDMC_R3_S18A	/;"	d
SDMC_R3_UHS_II_STS	include/sdmc.h	/^#define SDMC_R3_UHS_II_STS	/;"	d
SDMC_R6_AKE_SEQ_ERROR	include/sdmc.h	/^#define SDMC_R6_AKE_SEQ_ERROR	/;"	d
SDMC_R6_APP_CMD	include/sdmc.h	/^#define SDMC_R6_APP_CMD	/;"	d
SDMC_R6_COM_CRC_ERROR	include/sdmc.h	/^#define SDMC_R6_COM_CRC_ERROR	/;"	d
SDMC_R6_CURRENT_STATE	include/sdmc.h	/^#define SDMC_R6_CURRENT_STATE	/;"	d
SDMC_R6_ERROR	include/sdmc.h	/^#define SDMC_R6_ERROR	/;"	d
SDMC_R6_ILLEGAL_COMMAND	include/sdmc.h	/^#define SDMC_R6_ILLEGAL_COMMAND	/;"	d
SDMC_R6_RCA_MASK	include/sdmc.h	/^#define SDMC_R6_RCA_MASK	/;"	d
SDMC_R6_READY_FOR_DATA	include/sdmc.h	/^#define SDMC_R6_READY_FOR_DATA	/;"	d
SDMC_RC_NON_RECOVERABLE_ERROR	include/sdmc.h	/^#define SDMC_RC_NON_RECOVERABLE_ERROR	/;"	d
SDMC_RC_OK	include/sdmc.h	/^#define SDMC_RC_OK	/;"	d
SDMC_RC_RECOVERABLE_ERR	include/sdmc.h	/^#define SDMC_RC_RECOVERABLE_ERR	/;"	d
SDMC_RE_TUNE_SIG_EN	include/sdmc.h	/^#define SDMC_RE_TUNE_SIG_EN	/;"	d
SDMC_RE_TUNE_STAT_EN	include/sdmc.h	/^#define SDMC_RE_TUNE_STAT_EN	/;"	d
SDMC_SW_RST_ALL	include/sdmc.h	/^#define SDMC_SW_RST_ALL	/;"	d
SDMC_SW_RST_CMD_LN	include/sdmc.h	/^#define SDMC_SW_RST_CMD_LN	/;"	d
SDMC_SW_RST_DAT_LN	include/sdmc.h	/^#define SDMC_SW_RST_DAT_LN	/;"	d
SDMC_TX_COMP_SIG_EN	include/sdmc.h	/^#define SDMC_TX_COMP_SIG_EN	/;"	d
SDMC_TX_COMP_STAT_EN	include/sdmc.h	/^#define SDMC_TX_COMP_STAT_EN	/;"	d
SDT_INTG	include/i386.h	/^#define	SDT_INTG	/;"	d
SECPERDY	include/date.h	/^#define	SECPERDY	/;"	d
SECPERHR	include/date.h	/^#define	SECPERHR	/;"	d
SECPERMN	include/date.h	/^#define	SECPERMN	/;"	d
SEEK	config/config.y	/^	CLOSE READ WRITE SEEK CONTROL IS ON GETC PUTC$/;"	t
SFLAGS	compile/Makefile	/^SFLAGS  = ${INCLUDE}$/;"	m
SHELL_ARGLEN	include/shell.h	/^#define	SHELL_ARGLEN	/;"	d
SHELL_BAN0	include/shell.h	/^#define	SHELL_BAN0	/;"	d
SHELL_BAN1	include/shell.h	/^#define SHELL_BAN1 /;"	d
SHELL_BAN2	include/shell.h	/^#define SHELL_BAN2 /;"	d
SHELL_BAN3	include/shell.h	/^#define SHELL_BAN3 /;"	d
SHELL_BAN4	include/shell.h	/^#define SHELL_BAN4 /;"	d
SHELL_BAN5	include/shell.h	/^#define SHELL_BAN5 /;"	d
SHELL_BAN6	include/shell.h	/^#define SHELL_BAN6 /;"	d
SHELL_BAN7	include/shell.h	/^#define SHELL_BAN7 /;"	d
SHELL_BAN8	include/shell.h	/^#define SHELL_BAN8 /;"	d
SHELL_BAN9	include/shell.h	/^#define	SHELL_BAN9	/;"	d
SHELL_BGERRMSG	include/shell.h	/^#define SHELL_BGERRMSG	/;"	d
SHELL_BUFLEN	include/shell.h	/^#define SHELL_BUFLEN	/;"	d
SHELL_CMDPRIO	include/shell.h	/^#define SHELL_CMDPRIO	/;"	d
SHELL_CMDSTK	include/shell.h	/^#define SHELL_CMDSTK	/;"	d
SHELL_CREATEMSG	include/shell.h	/^#define SHELL_CREATEMSG	/;"	d
SHELL_ERROR	include/shell.h	/^#define	SHELL_ERROR	/;"	d
SHELL_EXIT	include/shell.h	/^#define	SHELL_EXIT	/;"	d
SHELL_EXITMSG	include/shell.h	/^#define SHELL_EXITMSG	/;"	d
SHELL_INERRMSG	include/shell.h	/^#define SHELL_INERRMSG	/;"	d
SHELL_MAXTOK	include/shell.h	/^#define SHELL_MAXTOK	/;"	d
SHELL_OK	include/shell.h	/^#define	SHELL_OK	/;"	d
SHELL_OUTERRMSG	include/shell.h	/^#define SHELL_OUTERRMSG	/;"	d
SHELL_PIPEMSG	include/shell.h	/^#define SHELL_PIPEMSG	/;"	d
SHELL_PROMPT	include/shell.h	/^#define SHELL_PROMPT	/;"	d
SHELL_STRTMSG	include/shell.h	/^#define SHELL_STRTMSG	/;"	d
SHELL_SYNERRMSG	include/shell.h	/^#define SHELL_SYNERRMSG	/;"	d
SHORT	lib/doscan.c	/^#define	SHORT	/;"	d	file:
SHRT_MAX	include/limits.h	/^#define SHRT_MAX /;"	d
SHRT_MIN	include/limits.h	/^#define SHRT_MIN /;"	d
SH_AMPER	include/shell.h	/^#define	SH_AMPER	/;"	d
SH_BLANK	include/shell.h	/^#define	SH_BLANK	/;"	d
SH_DQUOTE	include/shell.h	/^#define	SH_DQUOTE	/;"	d
SH_EOF	include/shell.h	/^#define	SH_EOF	/;"	d
SH_GREATER	include/shell.h	/^#define	SH_GREATER	/;"	d
SH_LESS	include/shell.h	/^#define	SH_LESS	/;"	d
SH_NEWLINE	include/shell.h	/^#define	SH_NEWLINE	/;"	d
SH_PIPE	include/shell.h	/^#define	SH_PIPE	/;"	d
SH_SQUOTE	include/shell.h	/^#define	SH_SQUOTE	/;"	d
SH_TAB	include/shell.h	/^#define	SH_TAB	/;"	d
SH_TOK_AMPER	include/shell.h	/^#define	SH_TOK_AMPER	/;"	d
SH_TOK_GREATER	include/shell.h	/^#define	SH_TOK_GREATER	/;"	d
SH_TOK_LESS	include/shell.h	/^#define	SH_TOK_LESS	/;"	d
SH_TOK_OTHER	include/shell.h	/^#define	SH_TOK_OTHER	/;"	d
SH_TOK_PIPE	include/shell.h	/^#define	SH_TOK_PIPE	/;"	d
SMDC_R1_DIS_STATE	include/sdmc.h	/^#define SMDC_R1_DIS_STATE	/;"	d
SMDC_R1_STBY_STATE	include/sdmc.h	/^#define SMDC_R1_STBY_STATE	/;"	d
SPC	lib/doscan.c	/^#define	SPC	/;"	d	file:
STACKMAGIC	include/process.h	/^#define	STACKMAGIC	/;"	d
STKDETAIL	system/stacktrace.c	/^#define STKDETAIL$/;"	d	file:
STP	lib/doscan.c	/^#define	STP	/;"	d	file:
SYSERR	include/kernel.h	/^#define	SYSERR	/;"	d
SYSERR	lib/fputc.c	/^#define	SYSERR /;"	d	file:
SYSID_ENTRY_POINT_EADDR	include/pxe.h	/^#define SYSID_ENTRY_POINT_EADDR /;"	d
SYSID_ENTRY_POINT_HDR	include/pxe.h	/^#define SYSID_ENTRY_POINT_HDR /;"	d
SYSID_ENTRY_POINT_SADDR	include/pxe.h	/^#define SYSID_ENTRY_POINT_SADDR /;"	d
SYSID_ENTRY_UUID_HDR	include/pxe.h	/^#define SYSID_ENTRY_UUID_HDR /;"	d
S_FREE	include/semaphore.h	/^#define	S_FREE	/;"	d
S_USED	include/semaphore.h	/^#define	S_USED	/;"	d
TC_ECHO	include/tty.h	/^#define	TC_ECHO	/;"	d
TC_ICHARS	include/tty.h	/^#define	TC_ICHARS	/;"	d
TC_MODEC	include/tty.h	/^#define	TC_MODEC	/;"	d
TC_MODEK	include/tty.h	/^#define	TC_MODEK	/;"	d
TC_MODER	include/tty.h	/^#define	TC_MODER	/;"	d
TC_NEXTC	include/tty.h	/^#define	TC_NEXTC	/;"	d
TC_NOECHO	include/tty.h	/^#define	TC_NOECHO	/;"	d
TESTSTK	include/testsuite.h	/^#define	TESTSTK	/;"	d
TFTP_ACK	include/tftp.h	/^#define TFTP_ACK /;"	d
TFTP_DATA	include/tftp.h	/^#define TFTP_DATA /;"	d
TFTP_ERROR	include/tftp.h	/^#define TFTP_ERROR /;"	d
TFTP_ERROR_ACCESS_VIOLATION	include/tftp.h	/^#define TFTP_ERROR_ACCESS_VIOLATION /;"	d
TFTP_ERROR_DISK_FULL	include/tftp.h	/^#define TFTP_ERROR_DISK_FULL /;"	d
TFTP_ERROR_FILE_EXISTS	include/tftp.h	/^#define TFTP_ERROR_FILE_EXISTS /;"	d
TFTP_ERROR_FILE_NOT_FOUND	include/tftp.h	/^#define TFTP_ERROR_FILE_NOT_FOUND /;"	d
TFTP_ERROR_ILLEGAL_OP	include/tftp.h	/^#define TFTP_ERROR_ILLEGAL_OP /;"	d
TFTP_ERROR_NOT_DEFINED	include/tftp.h	/^#define TFTP_ERROR_NOT_DEFINED /;"	d
TFTP_ERROR_NO_SUCH_USER	include/tftp.h	/^#define TFTP_ERROR_NO_SUCH_USER /;"	d
TFTP_ERROR_UNKNOWN_TRANSFER_ID	include/tftp.h	/^#define TFTP_ERROR_UNKNOWN_TRANSFER_ID /;"	d
TFTP_MAXDATA	include/tftp.h	/^#define	TFTP_MAXDATA /;"	d
TFTP_MAXNAM	include/tftp.h	/^#define	TFTP_MAXNAM	/;"	d
TFTP_MAXRETRIES	include/tftp.h	/^#define	TFTP_MAXRETRIES	/;"	d
TFTP_NON_VERBOSE	include/tftp.h	/^#define TFTP_NON_VERBOSE /;"	d
TFTP_PORT	include/tftp.h	/^#define TFTP_PORT /;"	d
TFTP_RRQ	include/tftp.h	/^#define TFTP_RRQ /;"	d
TFTP_VERBOSE	include/tftp.h	/^#define TFTP_VERBOSE /;"	d
TFTP_WAIT	include/tftp.h	/^#define	TFTP_WAIT /;"	d
TFTP_WRQ	include/tftp.h	/^#define TFTP_WRQ /;"	d
TIMELPORT	include/date.h	/^#define	TIMELPORT	/;"	d
TIMEOUT	include/kernel.h	/^#define	TIMEOUT	/;"	d
TIMERPORT	include/date.h	/^#define	TIMERPORT	/;"	d
TIMESERVER	include/date.h	/^#define	TIMESERVER	/;"	d
TIMETIMEOUT	include/date.h	/^#define	TIMETIMEOUT	/;"	d
TIMEZONE	include/date.h	/^#define	TIMEZONE	/;"	d
TOPDIR	compile/Makefile	/^TOPDIR		=	..$/;"	m
TRUE	include/kernel.h	/^#define TRUE	/;"	d
TRX_MAGIC	include/flash.h	/^#define TRX_MAGIC /;"	d
TY_BACKSP	include/tty.h	/^#define	TY_BACKSP	/;"	d
TY_BACKSP2	include/tty.h	/^#define	TY_BACKSP2	/;"	d
TY_BELL	include/tty.h	/^#define	TY_BELL	/;"	d
TY_BLANK	include/tty.h	/^#define	TY_BLANK	/;"	d
TY_EBUFLEN	include/tty.h	/^#define	TY_EBUFLEN	/;"	d
TY_EOFCH	include/tty.h	/^#define	TY_EOFCH	/;"	d
TY_FULLCH	include/tty.h	/^#define	TY_FULLCH	/;"	d
TY_IBUFLEN	include/tty.h	/^#define	TY_IBUFLEN	/;"	d
TY_IMCBREAK	include/tty.h	/^#define	TY_IMCBREAK	/;"	d
TY_IMCOOKED	include/tty.h	/^#define	TY_IMCOOKED	/;"	d
TY_IMRAW	include/tty.h	/^#define	TY_IMRAW	/;"	d
TY_KILLCH	include/tty.h	/^#define	TY_KILLCH	/;"	d
TY_NEWLINE	include/tty.h	/^#define	TY_NEWLINE	/;"	d
TY_OBMINSP	include/tty.h	/^#define	TY_OBMINSP	/;"	d
TY_OBUFLEN	include/tty.h	/^#define	TY_OBUFLEN	/;"	d
TY_OMRAW	include/tty.h	/^#define	TY_OMRAW	/;"	d
TY_RETURN	include/tty.h	/^#define	TY_RETURN	/;"	d
TY_STOPCH	include/tty.h	/^#define	TY_STOPCH	/;"	d
TY_STRTCH	include/tty.h	/^#define	TY_STRTCH	/;"	d
TY_UPARROW	include/tty.h	/^#define	TY_UPARROW	/;"	d
UART_BAUD	include/uart.h	/^#define UART_BAUD	/;"	d
UART_DLL	include/uart.h	/^#define	UART_DLL	/;"	d
UART_DLM	include/uart.h	/^#define UART_DLM	/;"	d
UART_FCR_EFIFO	include/uart.h	/^#define UART_FCR_EFIFO	/;"	d
UART_FCR_RRESET	include/uart.h	/^#define UART_FCR_RRESET /;"	d
UART_FCR_TRESET	include/uart.h	/^#define UART_FCR_TRESET /;"	d
UART_FCR_TRIG0	include/uart.h	/^#define UART_FCR_TRIG0	/;"	d
UART_FCR_TRIG1	include/uart.h	/^#define UART_FCR_TRIG1	/;"	d
UART_FCR_TRIG2	include/uart.h	/^#define UART_FCR_TRIG2	/;"	d
UART_FCR_TRIG3	include/uart.h	/^#define UART_FCR_TRIG3	/;"	d
UART_FIFO_SIZE	include/uart.h	/^#define	UART_FIFO_SIZE	/;"	d
UART_IER_ELSI	include/uart.h	/^#define UART_IER_ELSI	/;"	d
UART_IER_EMSI	include/uart.h	/^#define UART_IER_EMSI	/;"	d
UART_IER_ERBFI	include/uart.h	/^#define UART_IER_ERBFI	/;"	d
UART_IER_ETBEI	include/uart.h	/^#define UART_IER_ETBEI	/;"	d
UART_IIR_IDMASK	include/uart.h	/^#define UART_IIR_IDMASK /;"	d
UART_IIR_IRQ	include/uart.h	/^#define UART_IIR_IRQ	/;"	d
UART_IIR_MSC	include/uart.h	/^#define UART_IIR_MSC	/;"	d
UART_IIR_RDA	include/uart.h	/^#define UART_IIR_RDA	/;"	d
UART_IIR_RLSI	include/uart.h	/^#define UART_IIR_RLSI	/;"	d
UART_IIR_RTO	include/uart.h	/^#define UART_IIR_RTO	/;"	d
UART_IIR_THRE	include/uart.h	/^#define UART_IIR_THRE	/;"	d
UART_LCR_8N1	include/uart.h	/^#define	UART_LCR_8N1	/;"	d
UART_LCR_DLAB	include/uart.h	/^#define	UART_LCR_DLAB	/;"	d
UART_LSR_BI	include/uart.h	/^#define	UART_LSR_BI	/;"	d
UART_LSR_DR	include/uart.h	/^#define UART_LSR_DR	/;"	d
UART_LSR_TEMT	include/uart.h	/^#define UART_LSR_TEMT	/;"	d
UART_LSR_THRE	include/uart.h	/^#define UART_LSR_THRE	/;"	d
UART_MCR_DTR	include/uart.h	/^#define UART_MCR_DTR /;"	d
UART_MCR_LOOP	include/uart.h	/^#define UART_MCR_LOOP	/;"	d
UART_MCR_OUT2	include/uart.h	/^#define UART_MCR_OUT2	/;"	d
UART_MCR_RTS	include/uart.h	/^#define UART_MCR_RTS /;"	d
UART_OUT_IDLE	include/uart.h	/^#define	UART_OUT_IDLE	/;"	d
UCHAR_MAX	include/limits.h	/^#define UCHAR_MAX /;"	d
UDP_ANYIF	include/udp.h	/^#define	UDP_ANYIF	/;"	d
UDP_DHCP_CPORT	include/udp.h	/^#define	UDP_DHCP_CPORT	/;"	d
UDP_DHCP_SPORT	include/udp.h	/^#define	UDP_DHCP_SPORT	/;"	d
UDP_FREE	include/udp.h	/^#define	UDP_FREE	/;"	d
UDP_HDR_LEN	include/udp.h	/^#define UDP_HDR_LEN	/;"	d
UDP_QSIZ	include/udp.h	/^#define	UDP_QSIZ	/;"	d
UDP_RECV	include/udp.h	/^#define	UDP_RECV	/;"	d
UDP_SLOTS	include/udp.h	/^#define	UDP_SLOTS	/;"	d
UDP_USED	include/udp.h	/^#define	UDP_USED	/;"	d
UINT_MAX	include/limits.h	/^#define UINT_MAX /;"	d
ULONG_MAX	include/limits.h	/^#define ULONG_MAX /;"	d
USHRT_MAX	include/limits.h	/^#define USHRT_MAX /;"	d
User Mode Xinu	README.md	/^# User Mode Xinu$/;"	c
VERSIONFILE	compile/Makefile	/^VERSIONFILE	=	version$/;"	m
WRITE	config/config.y	/^	CLOSE READ WRITE SEEK CONTROL IS ON GETC PUTC$/;"	t
XINU	compile/Makefile	/^XINU		=	$(TOPDIR)\/compile\/xinu.elf$/;"	m
XINUBIN	compile/Makefile	/^XINUBIN		=	$(TOPDIR)\/compile\/xinu.bin$/;"	m
XINUXBIN	compile/Makefile	/^XINUXBIN	=	$(TOPDIR)\/compile\/xinu$/;"	m
Xtrap	system/intr.S	/^Xtrap:$/;"	l
YACC	config/Makefile	/^YACC	= ${COMPILER_ROOT}bison -y	# Flag enables yacc-compatible filenames$/;"	m
ZONE_CST	include/date.h	/^#define	ZONE_CST	/;"	d
ZONE_EST	include/date.h	/^#define	ZONE_EST	/;"	d
ZONE_MST	include/date.h	/^#define	ZONE_MST	/;"	d
ZONE_PST	include/date.h	/^#define	ZONE_PST	/;"	d
_82545EMInit	device/eth/82545EMInit.c	/^status 	_82545EMInit($/;"	f	typeref:typename:status
_82545EM_configure_rx	device/eth/82545EMInit.c	/^local void _82545EM_configure_rx($/;"	f	typeref:typename:local void
_82545EM_configure_tx	device/eth/82545EMInit.c	/^local void _82545EM_configure_tx($/;"	f	typeref:typename:local void
_82545EM_init_hw	device/eth/82545EMInit.c	/^local status _82545EM_init_hw($/;"	f	typeref:typename:local status
_82545EM_read_phy_reg	device/eth/82545EMInit.c	/^status _82545EM_read_phy_reg($/;"	f	typeref:typename:status
_82545EM_reset_hw	device/eth/82545EMInit.c	/^local void _82545EM_reset_hw($/;"	f	typeref:typename:local void
_82545EM_write_phy_reg	device/eth/82545EMInit.c	/^status _82545EM_write_phy_reg($/;"	f	typeref:typename:status
_C	include/ctype.h	/^#define _C /;"	d
_ETHLOOP_H_	include/ethloop.h	/^#define _ETHLOOP_H_$/;"	d
_FLASH_H_	include/flash.h	/^#define _FLASH_H_$/;"	d
_L	include/ctype.h	/^#define _L /;"	d
_LIMITS_H_	include/limits.h	/^#define _LIMITS_H_$/;"	d
_N	include/ctype.h	/^#define _N /;"	d
_P	include/ctype.h	/^#define _P /;"	d
_S	include/ctype.h	/^#define _S /;"	d
_U	include/ctype.h	/^#define _U /;"	d
_X	include/ctype.h	/^#define _X /;"	d
_Xint0	system/intr.S	/^	.globl	_Xint0			\/* Divide error			*\/$/;"	s
_Xint0	system/intr.S	/^_Xint0:$/;"	l
_Xint1	system/intr.S	/^	.globl  _Xint1			\/* Debug exception		*\/$/;"	s
_Xint1	system/intr.S	/^_Xint1:$/;"	l
_Xint10	system/intr.S	/^	.globl  _Xint10			\/* Invalid TSS			*\/$/;"	s
_Xint10	system/intr.S	/^_Xint10:$/;"	l
_Xint11	system/intr.S	/^	.globl  _Xint11			\/* Segment not present		*\/$/;"	s
_Xint11	system/intr.S	/^_Xint11:$/;"	l
_Xint12	system/intr.S	/^	.globl  _Xint12			\/* Stack exception		*\/$/;"	s
_Xint12	system/intr.S	/^_Xint12:$/;"	l
_Xint13	system/intr.S	/^	.globl  _Xint13			\/* General protection		*\/$/;"	s
_Xint13	system/intr.S	/^_Xint13:$/;"	l
_Xint14	system/intr.S	/^	.globl  _Xint14			\/* Page fault			*\/$/;"	s
_Xint14	system/intr.S	/^_Xint14:$/;"	l
_Xint15	system/intr.S	/^	.globl  _Xint15			\/* (reserved)			*\/$/;"	s
_Xint15	system/intr.S	/^_Xint15:$/;"	l
_Xint16	system/intr.S	/^	.globl  _Xint16			\/* Coprocessor error		*\/$/;"	s
_Xint16	system/intr.S	/^_Xint16:$/;"	l
_Xint17	system/intr.S	/^	.globl  _Xint17			\/* (reserved)			*\/$/;"	s
_Xint17	system/intr.S	/^_Xint17:$/;"	l
_Xint18	system/intr.S	/^	.globl  _Xint18			\/* (reserved)			*\/$/;"	s
_Xint18	system/intr.S	/^_Xint18:$/;"	l
_Xint19	system/intr.S	/^	.globl  _Xint19			\/* (reserved)			*\/$/;"	s
_Xint19	system/intr.S	/^_Xint19:$/;"	l
_Xint2	system/intr.S	/^	.globl  _Xint2			\/* Nonmaskable interrupt	*\/$/;"	s
_Xint2	system/intr.S	/^_Xint2:$/;"	l
_Xint20	system/intr.S	/^	.globl  _Xint20			\/* (reserved)			*\/$/;"	s
_Xint20	system/intr.S	/^_Xint20:$/;"	l
_Xint21	system/intr.S	/^	.globl  _Xint21			\/* (reserved)			*\/$/;"	s
_Xint21	system/intr.S	/^_Xint21:$/;"	l
_Xint22	system/intr.S	/^	.globl  _Xint22			\/* (reserved)			*\/$/;"	s
_Xint22	system/intr.S	/^_Xint22:$/;"	l
_Xint23	system/intr.S	/^	.globl  _Xint23			\/* (reserved)			*\/$/;"	s
_Xint23	system/intr.S	/^_Xint23:$/;"	l
_Xint24	system/intr.S	/^	.globl  _Xint24			\/* (reserved)			*\/$/;"	s
_Xint24	system/intr.S	/^_Xint24:$/;"	l
_Xint25	system/intr.S	/^	.globl  _Xint25			\/* (reserved)			*\/$/;"	s
_Xint25	system/intr.S	/^_Xint25:$/;"	l
_Xint26	system/intr.S	/^	.globl  _Xint26			\/* (reserved)			*\/$/;"	s
_Xint26	system/intr.S	/^_Xint26:$/;"	l
_Xint27	system/intr.S	/^	.globl  _Xint27			\/* (reserved)			*\/$/;"	s
_Xint27	system/intr.S	/^_Xint27:$/;"	l
_Xint28	system/intr.S	/^	.globl  _Xint28			\/* (reserved)			*\/$/;"	s
_Xint28	system/intr.S	/^_Xint28:$/;"	l
_Xint29	system/intr.S	/^	.globl  _Xint29			\/* (reserved)			*\/$/;"	s
_Xint29	system/intr.S	/^_Xint29:$/;"	l
_Xint3	system/intr.S	/^	.globl  _Xint3			\/* Breakpoint (one-byte INT 3	*\/$/;"	s
_Xint3	system/intr.S	/^_Xint3:$/;"	l
_Xint30	system/intr.S	/^	.globl  _Xint30			\/* (reserved)			*\/$/;"	s
_Xint30	system/intr.S	/^_Xint30:$/;"	l
_Xint31	system/intr.S	/^	.globl  _Xint31			\/* (reserved)			*\/$/;"	s
_Xint31	system/intr.S	/^_Xint31:$/;"	l
_Xint32	system/intr.S	/^	.globl  _Xint32			\/* available for ext. interrupt	*\/$/;"	s
_Xint32	system/intr.S	/^_Xint32:$/;"	l
_Xint33	system/intr.S	/^	.globl  _Xint33			\/* available for ext. interrupt	*\/$/;"	s
_Xint33	system/intr.S	/^_Xint33:$/;"	l
_Xint34	system/intr.S	/^	.globl  _Xint34			\/* available for ext. interrupt	*\/$/;"	s
_Xint34	system/intr.S	/^_Xint34:$/;"	l
_Xint35	system/intr.S	/^	.globl  _Xint35			\/* available for ext. interrupt	*\/$/;"	s
_Xint35	system/intr.S	/^_Xint35:$/;"	l
_Xint36	system/intr.S	/^	.globl  _Xint36			\/* available for ext. interrupt	*\/$/;"	s
_Xint36	system/intr.S	/^_Xint36:$/;"	l
_Xint37	system/intr.S	/^	.globl  _Xint37			\/* available for ext. interrupt	*\/$/;"	s
_Xint37	system/intr.S	/^_Xint37:$/;"	l
_Xint38	system/intr.S	/^	.globl  _Xint38			\/* available for ext. interrupt	*\/$/;"	s
_Xint38	system/intr.S	/^_Xint38:$/;"	l
_Xint39	system/intr.S	/^	.globl  _Xint39			\/* available for ext. interrupt	*\/$/;"	s
_Xint39	system/intr.S	/^_Xint39:$/;"	l
_Xint4	system/intr.S	/^	.globl  _Xint4			\/* Overflow (INTO instruction)	*\/$/;"	s
_Xint4	system/intr.S	/^_Xint4:$/;"	l
_Xint40	system/intr.S	/^	.globl  _Xint40			\/* available for ext. interrupt	*\/$/;"	s
_Xint40	system/intr.S	/^_Xint40:$/;"	l
_Xint41	system/intr.S	/^	.globl  _Xint41			\/* available for ext. interrupt	*\/$/;"	s
_Xint41	system/intr.S	/^_Xint41:$/;"	l
_Xint42	system/intr.S	/^	.globl  _Xint42			\/* available for ext. interrupt	*\/$/;"	s
_Xint42	system/intr.S	/^_Xint42:$/;"	l
_Xint43	system/intr.S	/^	.globl  _Xint43			\/* available for ext. interrupt	*\/$/;"	s
_Xint43	system/intr.S	/^_Xint43:$/;"	l
_Xint44	system/intr.S	/^	.globl  _Xint44			\/* available for ext. interrupt	*\/$/;"	s
_Xint44	system/intr.S	/^_Xint44:$/;"	l
_Xint45	system/intr.S	/^	.globl  _Xint45			\/* available for ext. interrupt	*\/$/;"	s
_Xint45	system/intr.S	/^_Xint45:$/;"	l
_Xint46	system/intr.S	/^	.globl  _Xint46			\/* available for ext. interrupt	*\/$/;"	s
_Xint46	system/intr.S	/^_Xint46:$/;"	l
_Xint5	system/intr.S	/^	.globl  _Xint5			\/* Bounds check (BOUND instr)	*\/$/;"	s
_Xint5	system/intr.S	/^_Xint5:$/;"	l
_Xint6	system/intr.S	/^	.globl  _Xint6			\/* Invalid opcode		*\/$/;"	s
_Xint6	system/intr.S	/^_Xint6:$/;"	l
_Xint7	system/intr.S	/^	.globl  _Xint7			\/* Coprocessor not available	*\/$/;"	s
_Xint7	system/intr.S	/^_Xint7:$/;"	l
_Xint8	system/intr.S	/^	.globl  _Xint8			\/* Double fault			*\/$/;"	s
_Xint8	system/intr.S	/^_Xint8:$/;"	l
_Xint9	system/intr.S	/^	.globl  _Xint9			\/* (reserved)			*\/$/;"	s
_Xint9	system/intr.S	/^_Xint9:$/;"	l
___divsi3	system/start.S	/^	.globl ___divsi3$/;"	s
___divsi3	system/start.S	/^___divsi3:$/;"	l
___udivsi3	system/start.S	/^	.globl ___udivsi3$/;"	s
___udivsi3	system/start.S	/^___udivsi3:$/;"	l
__anon2602d319010a	include/e1000e.h	/^	union {$/;"	u	struct:eth_tx_desc
__anon2602d3190208	include/e1000e.h	/^	 struct {$/;"	s	union:eth_tx_desc::__anon2602d319010a
__anon2602d319030a	include/e1000e.h	/^	union {$/;"	u	struct:eth_tx_desc
__anon2602d3190408	include/e1000e.h	/^	 struct {$/;"	s	union:eth_tx_desc::__anon2602d319030a
__anon47fde26d010a	include/dhcp.h	/^	union {$/;"	u	struct:dhcpmsg
__anon47fde26d0208	include/dhcp.h	/^		struct {$/;"	s	union:dhcpmsg::__anon47fde26d010a
__anon6a33e0860108	system/pci.c	/^static struct {$/;"	s	file:
__anon6a33e0860208	system/pci.c	/^static struct {$/;"	s	file:
__anon6d358dec010a	include/tftp.h	/^	union {$/;"	u	struct:tftp_msg
__anon6d358dec0208	include/tftp.h	/^	 struct	{$/;"	s	union:tftp_msg::__anon6d358dec010a
__anon6d358dec0308	include/tftp.h	/^	 struct {$/;"	s	union:tftp_msg::__anon6d358dec010a
__anon6d358dec0408	include/tftp.h	/^	 struct {$/;"	s	union:tftp_msg::__anon6d358dec010a
__anon6d358dec0508	include/tftp.h	/^	 struct {$/;"	s	union:tftp_msg::__anon6d358dec010a
__anona51abb730108	include/dns.h	/^	struct	{$/;"	s	struct:dnspkt
__anona51abb730208	include/dns.h	/^	struct	{$/;"	s	struct:dnspkt
__anona5cac555010a	include/net.h	/^	union {$/;"	u	struct:netpacket
__anona5cac5550208	include/net.h	/^	 struct {$/;"	s	union:netpacket::__anona5cac555010a
__anona5cac5550308	include/net.h	/^	 struct {$/;"	s	union:netpacket::__anona5cac555010a
__zero	system/start.S	/^	.globl	__zero			# artificial value for entry point$/;"	s
__zero	system/start.S	/^	.set	__zero,0$/;"	d
_bootdev	system/start.S	/^	.globl	_bootdev$/;"	s
_bootdev	system/start.S	/^_bootdev:	.long	0$/;"	l
_ctype_	lib/ctype_.c	/^const char _ctype_[] = {$/;"	v	typeref:typename:const char[]
_cyloffset	system/start.S	/^	.globl	_cyloffset$/;"	s
_cyloffset	system/start.S	/^_cyloffset:	.long	0$/;"	l
_doprnt	lib/doprnt.c	/^void	_doprnt($/;"	f	typeref:typename:void
_doscan	lib/doscan.c	/^int	_doscan($/;"	f	typeref:typename:int
_edata	compile/ld.script	/^    _edata = ABSOLUTE(.) ;	\/* _edata: end of data section		*\/$/;"	s	section:.data
_edata	system/start.S	/^	.globl	_edata$/;"	s
_end	compile/ld.script	/^    _end = ABSOLUTE(.);         \/* _end: end of image                   *\/$/;"	s	section:.bss
_end	system/start.S	/^	.globl	_end$/;"	s
_fdoprnt	lib/fdoprnt.c	/^void	_fdoprnt($/;"	f	typeref:typename:void
_getccl	lib/doscan.c	/^static char	*_getccl($/;"	f	typeref:typename:char *	file:
_innum	lib/doscan.c	/^static int	_innum($/;"	f	typeref:typename:int	file:
_instr	lib/doscan.c	/^static int	_instr($/;"	f	typeref:typename:int	file:
_prtX16	lib/doprnt.c	/^static void	_prtX16($/;"	f	typeref:typename:void	file:
_prtX16	lib/fdoprnt.c	/^static void	_prtX16($/;"	f	typeref:typename:void	file:
_prtdbl	lib/doprnt.c	/^static void	_prtdbl($/;"	f	typeref:typename:void	file:
_prtl10	lib/doprnt.c	/^static void		_prtl10($/;"	f	typeref:typename:void	file:
_prtl10	lib/fdoprnt.c	/^static void	_prtl10($/;"	f	typeref:typename:void	file:
_prtl16	lib/doprnt.c	/^static void	_prtl16($/;"	f	typeref:typename:void	file:
_prtl16	lib/fdoprnt.c	/^static void	_prtl16($/;"	f	typeref:typename:void	file:
_prtl2	lib/doprnt.c	/^static void	_prtl2($/;"	f	typeref:typename:void	file:
_prtl2	lib/fdoprnt.c	/^static void	_prtl2($/;"	f	typeref:typename:void	file:
_prtl8	lib/doprnt.c	/^static void	_prtl8($/;"	f	typeref:typename:void	file:
_prtl8	lib/fdoprnt.c	/^static void	_prtl8($/;"	f	typeref:typename:void	file:
_ptclear	system/ptclear.c	/^void	_ptclear($/;"	f	typeref:typename:void
_rtcin	system/start.S	/^	.globl	_rtcin$/;"	s
_rtcin	system/start.S	/^_rtcin:	movl	4(%esp), %eax$/;"	l
_sctab	lib/doscan.c	/^char _sctab[128] = {$/;"	v	typeref:typename:char[128]
aa	include/dns.h	/^		byte	aa:1;		\/* Authoritative Answer		*\/$/;"	m	struct:dnspkt::__anona51abb730108	typeref:typename:byte:1
abs	lib/abs.c	/^int	abs($/;"	f	typeref:typename:int
addargs	shell/addargs.c	/^status	addargs($/;"	f	typeref:typename:status
addr	include/i386.h	/^    unsigned int	addr : 32;$/;"	m	struct:segtr	typeref:typename:unsigned int:32
addrLen	include/ether.h	/^	uint8	addrLen;	\/* Hardware address length	      	*\/$/;"	m	struct:ethcblk	typeref:typename:uint8
address	system/pci.c	/^	unsigned long address;$/;"	m	struct:__anon6a33e0860108	typeref:typename:unsigned long	file:
address	system/pci.c	/^    unsigned long address;$/;"	m	struct:__anon6a33e0860208	typeref:typename:unsigned long	file:
adma2_support	include/sdmc.h	/^	uint32	adma2_support		:1;	\/* ADMA2 Support			*\/$/;"	m	struct:sdmc_capabilities	typeref:typename:uint32:1
adma_err_stat	include/sdmc.h	/^	uint8	adma_err_stat;		\/* adma error status register 		*\/$/;"	m	struct:sdmc_csreg	typeref:typename:uint8
adma_sys_addr	include/sdmc.h	/^	uint32	adma_sys_addr;		\/* adma system address register *\/$/;"	m	struct:sdmc_csreg	typeref:typename:uint32
all	compile/Makefile	/^all:	xinu$/;"	t
all	config/Makefile	/^all:		conf.h conf.c$/;"	t
ancount	include/dns.h	/^	uint16	ancount;		\/* No. of RRs in Answer		*\/$/;"	m	struct:dnspkt	typeref:typename:uint16
apm_table	include/multiboot.h	/^	uint32	apm_table;		\/* Address of APM table		*\/$/;"	m	struct:mbootinfo	typeref:typename:uint32
arcount	include/dns.h	/^	uint16	arcount;		\/* No. of RRs in Additional info*\/$/;"	m	struct:dnspkt	typeref:typename:uint16
argument	include/sdmc.h	/^	uint32	argument;		\/* argument register 			*\/$/;"	m	struct:sdmc_csreg	typeref:typename:uint32
arhaddr	include/arp.h	/^	byte	arhaddr[ARP_HALEN];	\/* Ethernet address of the entry*\/$/;"	m	struct:arpentry	typeref:typename:byte[]
arp_alloc	net/arp.c	/^int32	arp_alloc ()$/;"	f	typeref:typename:int32
arp_dmp	shell/xsh_arp.c	/^static	void arp_dmp ()$/;"	f	typeref:typename:void	file:
arp_dump	net/arp_dump.c	/^void	arp_dump($/;"	f	typeref:typename:void
arp_ethdst	include/arp.h	/^	byte	arp_ethdst[ETH_ADDR_LEN];\/* Ethernet dest. MAC addr	*\/$/;"	m	struct:arppacket	typeref:typename:byte[]
arp_ethsrc	include/arp.h	/^	byte	arp_ethsrc[ETH_ADDR_LEN];\/* Ethernet source MAC address *\/$/;"	m	struct:arppacket	typeref:typename:byte[]
arp_ethtype	include/arp.h	/^	uint16	arp_ethtype;		\/* Ethernet type field		*\/$/;"	m	struct:arppacket	typeref:typename:uint16
arp_hlen	include/arp.h	/^	byte	arp_hlen;		\/* ARP hardware address length	*\/$/;"	m	struct:arppacket	typeref:typename:byte
arp_hton	net/arp.c	/^void 	arp_hton($/;"	f	typeref:typename:void
arp_htype	include/arp.h	/^	uint16	arp_htype;		\/* ARP hardware type		*\/$/;"	m	struct:arppacket	typeref:typename:uint16
arp_in	net/arp.c	/^void	arp_in ($/;"	f	typeref:typename:void
arp_init	net/arp.c	/^void	arp_init(void)$/;"	f	typeref:typename:void
arp_ntoh	net/arp.c	/^void 	arp_ntoh($/;"	f	typeref:typename:void
arp_op	include/arp.h	/^	uint16	arp_op;			\/* ARP operation		*\/$/;"	m	struct:arppacket	typeref:typename:uint16
arp_plen	include/arp.h	/^	byte	arp_plen;		\/* ARP protocol address length	*\/$/;"	m	struct:arppacket	typeref:typename:byte
arp_ptype	include/arp.h	/^	uint16	arp_ptype;		\/* ARP protocol type		*\/$/;"	m	struct:arppacket	typeref:typename:uint16
arp_resolve	net/arp.c	/^status	arp_resolve ($/;"	f	typeref:typename:status
arp_sndha	include/arp.h	/^	byte	arp_sndha[ARP_HALEN];	\/* ARP sender's Ethernet addr 	*\/$/;"	m	struct:arppacket	typeref:typename:byte[]
arp_sndpa	include/arp.h	/^	uint32	arp_sndpa;		\/* ARP sender's IP address	*\/$/;"	m	struct:arppacket	typeref:typename:uint32
arp_tarha	include/arp.h	/^	byte	arp_tarha[ARP_HALEN];	\/* ARP target's Ethernet addr	*\/$/;"	m	struct:arppacket	typeref:typename:byte[]
arp_tarpa	include/arp.h	/^	uint32	arp_tarpa;		\/* ARP target's IP address	*\/$/;"	m	struct:arppacket	typeref:typename:uint32
arpaddr	include/arp.h	/^	uint32	arpaddr;		\/* IP address of the entry	*\/$/;"	m	struct:arpentry	typeref:typename:uint32
arpcache	net/arp.c	/^struct	arpentry  arpcache[ARP_SIZ];	\/* ARP cache			*\/$/;"	v	typeref:struct:arpentry[]
arpentry	include/arp.h	/^struct	arpentry {			\/* Entry in the ARP cache	*\/$/;"	s
arpid	include/arp.h	/^	pid32	arpid;			\/* Waiting process or -1 	*\/$/;"	m	struct:arpentry	typeref:typename:pid32
arppacket	include/arp.h	/^struct	arppacket {			\/* ARP packet for IP & Ethernet	*\/$/;"	s
arstate	include/arp.h	/^	int32	arstate;		\/* State of the entry		*\/$/;"	m	struct:arpentry	typeref:typename:int32
ascdate	system/ascdate.c	/^status	ascdate ($/;"	f	typeref:typename:status
async_int_support	include/sdmc.h	/^	uint32	async_int_support	:1;	\/* Asynchronous Interrupt Support	*\/$/;"	m	struct:sdmc_capabilities	typeref:typename:uint32:1
atoi	lib/atoi.c	/^int	atoi($/;"	f	typeref:typename:int
atol	lib/atol.c	/^long	atol($/;"	f	typeref:typename:long
attempt	include/resched.h	/^	bool8	attempt;	\/* Was resched called during the	*\/$/;"	m	struct:defer	typeref:typename:bool8
attr	config/config.y	/^attr:		  CSR number		{ addattr(CSR,    $2);	}$/;"	l
attr_list	config/config.y	/^attr_list:	\/* nothing *\/$/;"	l
base	include/flash.h	/^    uint32 base;                 \/**< base address for flash memory       *\/$/;"	m	struct:flash	typeref:typename:uint32
base_addr	include/multiboot.h	/^	uint64	base_addr;		\/* Memory region base address	*\/$/;"	m	struct:mbmregion	typeref:typename:uint64
base_clock_frequency_sd_clk	include/sdmc.h	/^	uint32	base_clock_frequency_sd_clk:8;	\/* Base Clock Frequency for SD Clock	*\/$/;"	m	struct:sdmc_capabilities	typeref:typename:uint32:8
bcopy	system/start.S	/^	.globl	bcopy$/;"	s
bcopy	system/start.S	/^bcopy:$/;"	l
bios32	include/pci.h	/^typedef struct bios32 {$/;"	s
bios32	include/pci.h	/^} bios32;$/;"	t	typeref:struct:bios32
bios32_entry	include/pci.h	/^    unsigned long   bios32_entry;       \/* 32 bit physical address for$/;"	m	struct:bios32	typeref:typename:unsigned long
bios32_entry	system/pci.c	/^static unsigned long bios32_entry = 0;$/;"	v	typeref:typename:unsigned long	file:
bios32_indirect	system/pci.c	/^} bios32_indirect = { 0, 0 + 5*0x08 \/* 0x10  KERNEL_CS *\/ };$/;"	v	typeref:struct:__anon6a33e0860108
bios32_service	system/pci.c	/^static unsigned long bios32_service(unsigned long service)$/;"	f	typeref:typename:unsigned long	file:
bios32ptr	system/pci.c	/^static	bios32	 *bios32ptr;	\/* pointer to the BIOS 32 structure *\/$/;"	v	typeref:typename:bios32 *	file:
bios_struct_count	include/pxe.h	/^	uint16 bios_struct_count;$/;"	m	struct:sysid_entry_point	typeref:typename:uint16
bios_structure_addr	include/pxe.h	/^	uint32 bios_structure_addr;$/;"	m	struct:sysid_entry_point	typeref:typename:uint32
blk_count	include/sdmc.h	/^	uint16	blk_count;		\/* block count register 		*\/$/;"	m	struct:sdmc_csreg	typeref:typename:uint16
blk_gap_ctl	include/sdmc.h	/^	uint8	blk_gap_ctl;		\/* block gap control register 		*\/$/;"	m	struct:sdmc_csreg	typeref:typename:uint8
blk_size	include/sdmc.h	/^	uint16	blk_size;		\/* block size register 			*\/$/;"	m	struct:sdmc_csreg	typeref:typename:uint16
block_size	include/flash.h	/^    uint32 block_size;           \/**< size of block in region             *\/$/;"	m	struct:flash_region	typeref:typename:uint32
bool8	include/kernel.h	/^typedef	byte	bool8;		\/* Boolean type				*\/$/;"	t	typeref:typename:byte
boot_device	include/multiboot.h	/^	uint32	boot_device;		\/* Boot device containing image	*\/$/;"	m	struct:mbootinfo	typeref:typename:uint32
boot_loader_name	include/multiboot.h	/^	uint32	boot_loader_name;	\/* Address of boot loader name	*\/$/;"	m	struct:mbootinfo	typeref:typename:uint32
boot_timeout_ctrl	include/sdmc.h	/^	uint32	boot_timeout_ctrl;	\/* boot time-out control register *\/$/;"	m	struct:sdmc_csreg	typeref:typename:uint32
bootfile	include/dhcp.h	/^			byte   bootfile[128];	\/* TFTP File name	*\/$/;"	m	struct:dhcpmsg::__anon47fde26d010a::__anon47fde26d0208	typeref:typename:byte[128]
bootfile	include/net.h	/^	char	bootfile[NETBOOTFILE];	\/* Name of boot file		*\/$/;"	m	struct:network	typeref:typename:char[]
bootserver	include/net.h	/^	uint32	bootserver;		\/* Boot server address		*\/$/;"	m	struct:network	typeref:typename:uint32
bpentry	include/bufpool.h	/^struct	bpentry	{		\/* Description of a single buffer pool	*\/$/;"	s
bpid32	include/kernel.h	/^typedef	int32	bpid32;		\/* Buffer pool ID			*\/$/;"	t	typeref:typename:int32
bpnext	include/bufpool.h	/^	struct	bpentry *bpnext;\/* Pointer to next free buffer		*\/$/;"	m	struct:bpentry	typeref:struct:bpentry *
bpsem	include/bufpool.h	/^	sid32	bpsem;		\/* Semaphore that counts buffers	*\/$/;"	m	struct:bpentry	typeref:typename:sid32
bss	compile/ld.script	/^    bss = ABSOLUTE(.);          \/* bss: beginning of bss segment        *\/$/;"	s	section:.bss
buf_data_port	include/sdmc.h	/^	uint32	buf_data_port;		\/* buffer data port register 		*\/$/;"	m	struct:sdmc_csreg	typeref:typename:uint32
buffer	include/ethloop.h	/^    char *buffer[ELOOP_NBUF];   \/**< input buffer                       *\/$/;"	m	struct:ethloop	typeref:typename:char * []
buffer	include/flash.h	/^    void *buffer;               \/**< buffer for this block               *\/$/;"	m	struct:flash_block	typeref:typename:void *
buffer	include/uart.h	/^	volatile byte	buffer;	\/* receive buffer (when read)		*\/$/;"	m	struct:uart_csreg	typeref:typename:volatile byte
buffer_addr	include/e1000e.h	/^	uint64  buffer_addr;		\/* Address of the descriptor's 	*\/$/;"	m	struct:eth_rx_desc	typeref:typename:uint64
buffer_addr	include/e1000e.h	/^	uint64  buffer_addr;		\/* Address of the descriptor's  *\/$/;"	m	struct:eth_tx_desc	typeref:typename:uint64
bufinit	system/bufinit.c	/^status	bufinit(void)$/;"	f	typeref:typename:status
buftab	system/bufinit.c	/^struct	bpentry	buftab[NBPOOLS];		\/* Buffer pool table	*\/$/;"	v	typeref:struct:bpentry[]
build_dhcp_discover_pxe	net/pxe.c	/^int32 build_dhcp_discover_pxe(struct dhcpmsg* dmsg)$/;"	f	typeref:typename:int32
byte	include/kernel.h	/^typedef	unsigned char	byte;$/;"	t	typeref:typename:unsigned char
bzero	lib/bzero.c	/^void	bzero($/;"	f	typeref:typename:void
capabilities	include/sdmc.h	/^	uint32	capabilities;		\/* capabilities register 		*\/$/;"	m	struct:sdmc_csreg	typeref:typename:uint32
capabilities_2	include/sdmc.h	/^	uint32	capabilities_2;		\/* capabilities register 2 		*\/$/;"	m	struct:sdmc_csreg	typeref:typename:uint32
cfunc	include/shell.h	/^	int32	(*cfunc)(int32,char*[]);\/* Function for command		*\/$/;"	m	struct:cmdent	typeref:typename:int32 (*)(int32,char * [])
check_pcibios	system/pci.c	/^int check_pcibios(void)$/;"	f	typeref:typename:int
checksum	include/pci.h	/^    unsigned char   checksum;           \/* sum of all bytes should be 0      *\/$/;"	m	struct:bios32	typeref:typename:unsigned char
checksum	include/pxe.h	/^	byte   checksum;$/;"	m	struct:sysid_entry_point	typeref:typename:byte
checksum	include/pxe.h	/^	byte checksum;$/;"	m	struct:sysid_bios_struct	typeref:typename:byte
chprio	system/chprio.c	/^syscall	chprio($/;"	f	typeref:typename:syscall
cid	include/sdmc.h	/^	char	cid[16];		\/* Card identifier			*\/$/;"	m	struct:sdmcblk	typeref:typename:char[16]
clean	compile/Makefile	/^clean:$/;"	t
clean	config/Makefile	/^clean:$/;"	t
cli	include/pci.h	/^#define cli() __asm__ __volatile__ ("cli"/;"	d
clk_ctl	include/sdmc.h	/^	uint16	clk_ctl;		\/* clock control register 		*\/$/;"	m	struct:sdmc_csreg	typeref:typename:uint16
clkdisp	system/clkdisp.S	/^		.globl	clkdisp		# Clock interrupt dispatcher$/;"	s
clkdisp	system/clkdisp.S	/^clkdisp:$/;"	l
clkhandler	system/clkhandler.c	/^void	clkhandler()$/;"	f	typeref:typename:void
clkinit	system/clkinit.c	/^void	clkinit(void)$/;"	f	typeref:typename:void
clktime	system/clkinit.c	/^uint32	clktime;		\/* Seconds since boot			*\/$/;"	v	typeref:typename:uint32
close	system/close.c	/^syscall	close($/;"	f	typeref:typename:syscall
cmd	include/e1000e.h	/^	  uint8 	cmd;		\/* Descriptor control 		*\/$/;"	m	struct:eth_tx_desc::__anon2602d319010a::__anon2602d3190208	typeref:typename:uint8
cmd	include/sdmc.h	/^	uint16	cmd;			\/* command register 			*\/$/;"	m	struct:sdmc_csreg	typeref:typename:uint16
cmd12_err_stat	include/sdmc.h	/^	uint16	cmd12_err_stat;		\/* auto cmd12 error status register 	*\/$/;"	m	struct:sdmc_csreg	typeref:typename:uint16
cmd8	include/sdmc.h	/^	uint8	cmd8	:1;		\/* Card supports CMD8			*\/$/;"	m	struct:sdmcblk	typeref:typename:uint8:1
cmd_crc_chk_en	include/sdmc.h	/^	uint16	cmd_crc_chk_en	:1;$/;"	m	struct:sdmc_cmd	typeref:typename:uint16:1
cmd_index	include/sdmc.h	/^	uint16	cmd_index	:6;$/;"	m	struct:sdmc_cmd	typeref:typename:uint16:6
cmd_index_chk_en	include/sdmc.h	/^	uint16	cmd_index_chk_en:1;$/;"	m	struct:sdmc_cmd	typeref:typename:uint16:1
cmd_sem	include/sdmc.h	/^	sid32	cmd_sem;		\/* command semaphore 			*\/$/;"	m	struct:sdmcblk	typeref:typename:sid32
cmd_type	include/sdmc.h	/^	uint16	cmd_type	:2;$/;"	m	struct:sdmc_cmd	typeref:typename:uint16:2
cmdent	include/shell.h	/^struct	cmdent	{			\/* Entry in command table	*\/$/;"	s
cmdline	include/multiboot.h	/^	uint32	cmdline;		\/* Address of command line	*\/$/;"	m	struct:mbootinfo	typeref:typename:uint32
cmdlookup	shell/shell.c	/^int32	cmdlookup(char *name) {$/;"	f	typeref:typename:int32
cmdtab	shell/shell.c	/^const	struct	cmdent	cmdtab[] = {$/;"	v	typeref:typename:const struct cmdent[]
cname	include/shell.h	/^	char	*cname;			\/* Name of command		*\/$/;"	m	struct:cmdent	typeref:typename:char *
commands	include/flash.h	/^    byte commands;             \/**< command set the interface uses      *\/$/;"	m	struct:flash	typeref:typename:byte
conf.c	config/Makefile	/^conf.c:		config Configuration$/;"	t
conf.h	config/Makefile	/^conf.h:		config Configuration$/;"	t
config_table	include/multiboot.h	/^	uint32	config_table;		\/* Address of ROM config table	*\/$/;"	m	struct:mbootinfo	typeref:typename:uint32
configuration	config/config.y	/^configuration:	devtypes DEFBRK devices$/;"	l
configure	compile/Makefile	/^configure:$/;"	t
control	system/control.c	/^syscall	control($/;"	f	typeref:typename:syscall
count	include/ethloop.h	/^    int count;                      \/**< number of packets in buffer        *\/$/;"	m	struct:ethloop	typeref:typename:int
cpudelay	system/start.S	/^	.globl	cpudelay$/;"	s
cpudelay	system/start.S	/^cpudelay:	.long	1$/;"	l
crc	include/flash.h	/^    uint32 crc;                   \/**< 32-bit CRC from flag_vers to EOF    *\/$/;"	m	struct:trx_header	typeref:typename:uint32
create	system/create.c	/^pid32	create($/;"	f	typeref:typename:pid32
cso	include/e1000e.h	/^	  uint8 	cso;		\/* Checksum offset 		*\/$/;"	m	struct:eth_tx_desc::__anon2602d319010a::__anon2602d3190208	typeref:typename:uint8
csr	include/ether.h	/^	void	*csr;		\/* Control and status regsiter address	*\/$/;"	m	struct:ethcblk	typeref:typename:void *
css	include/e1000e.h	/^	  uint8 	css;		\/* Checksum start 		*\/$/;"	m	struct:eth_tx_desc::__anon2602d319030a::__anon2602d3190408	typeref:typename:uint8
csum	include/e1000e.h	/^	uint16  csum;		   	\/* Packet checksum 		*\/$/;"	m	struct:eth_rx_desc	typeref:typename:uint16
ctr1000	system/clkinit.c	/^uint32	ctr1000 = 0;		\/* Milliseconds since boot		*\/$/;"	v	typeref:typename:uint32
ctxsw	system/ctxsw.S	/^		.globl	ctxsw$/;"	s
ctxsw	system/ctxsw.S	/^ctxsw:$/;"	l
curr_block	include/flash.h	/^    byte curr_block;           \/**< offset of the oldest block stored   *\/$/;"	m	struct:flash	typeref:typename:byte
currpid	system/initialize.c	/^pid32	currpid;		\/* ID of currently executing process	*\/$/;"	v	typeref:typename:pid32
dat_pr_sel	include/sdmc.h	/^	uint16	dat_pr_sel	:2;$/;"	m	struct:sdmc_cmd	typeref:typename:uint16:2
data	compile/ld.script	/^    data = ABSOLUTE(.);         \/* data: beginning of data segment      *\/$/;"	s	section:.data
data	include/dns.h	/^	char	data[DNSDATASIZ];	\/* DNS data area		*\/$/;"	m	struct:dnspkt	typeref:typename:char[]
data	include/e1000e.h	/^	 uint32 data;$/;"	m	union:eth_tx_desc::__anon2602d319010a	typeref:typename:uint32
data	include/e1000e.h	/^	 uint32 data;$/;"	m	union:eth_tx_desc::__anon2602d319030a	typeref:typename:uint32
data	include/ether.h	/^	byte	data[1];		\/* Packet payload		*\/$/;"	m	struct:etherPkt	typeref:typename:byte[1]
data	include/flash.h	/^    void *data;$/;"	m	struct:file	typeref:typename:void *
dateinfo	include/date.h	/^struct	dateinfo {$/;"	s
dbid32	include/kernel.h	/^typedef	int32	dbid32;		\/* Data block ID (used in file system)	*\/$/;"	t	typeref:typename:int32
dc_bootp	include/dhcp.h	/^		byte	dc_bootp[192];	\/* DHCP bootp area (zero)	*\/$/;"	m	union:dhcpmsg::__anon47fde26d010a	typeref:typename:byte[192]
dc_bop	include/dhcp.h	/^	byte	dc_bop;			\/* DHCP bootp op 1=req 2=reply	*\/$/;"	m	struct:dhcpmsg	typeref:typename:byte
dc_chaddr	include/dhcp.h	/^	byte	dc_chaddr[16];		\/* DHCP client hardware address	*\/$/;"	m	struct:dhcpmsg	typeref:typename:byte[16]
dc_cip	include/dhcp.h	/^	uint32	dc_cip;			\/* DHCP client IP address	*\/$/;"	m	struct:dhcpmsg	typeref:typename:uint32
dc_cookie	include/dhcp.h	/^	uint32	dc_cookie;		\/* DHCP cookie			*\/$/;"	m	struct:dhcpmsg	typeref:typename:uint32
dc_flags	include/dhcp.h	/^	uint16	dc_flags;		\/* DHCP flags			*\/$/;"	m	struct:dhcpmsg	typeref:typename:uint16
dc_gip	include/dhcp.h	/^	uint32	dc_gip;			\/* DHCP gateway IP address	*\/$/;"	m	struct:dhcpmsg	typeref:typename:uint32
dc_hlen	include/dhcp.h	/^	byte	dc_hlen;		\/* DHCP hardware address length	*\/$/;"	m	struct:dhcpmsg	typeref:typename:byte
dc_hops	include/dhcp.h	/^	byte	dc_hops;		\/* DHCP hop count		*\/$/;"	m	struct:dhcpmsg	typeref:typename:byte
dc_htype	include/dhcp.h	/^	byte	dc_htype;		\/* DHCP hardware type		*\/$/;"	m	struct:dhcpmsg	typeref:typename:byte
dc_opt	include/dhcp.h	/^	byte	dc_opt[1024];		\/* DHCP options area (large	*\/$/;"	m	struct:dhcpmsg	typeref:typename:byte[1024]
dc_secs	include/dhcp.h	/^	uint16	dc_secs;		\/* DHCP seconds			*\/$/;"	m	struct:dhcpmsg	typeref:typename:uint16
dc_sip	include/dhcp.h	/^	uint32	dc_sip;			\/* DHCP server IP address	*\/$/;"	m	struct:dhcpmsg	typeref:typename:uint32
dc_xid	include/dhcp.h	/^	uint32	dc_xid;			\/* DHCP xid			*\/$/;"	m	struct:dhcpmsg	typeref:typename:uint32
dc_yip	include/dhcp.h	/^	uint32	dc_yip;			\/* DHCP your IP address		*\/$/;"	m	struct:dhcpmsg	typeref:typename:uint32
debug_sel	include/sdmc.h	/^	uint8	debug_sel;		\/* debug selection register *\/$/;"	m	struct:sdmc_csreg	typeref:typename:uint8
defclean	compile/Makefile	/^defclean:$/;"	t
defer	include/resched.h	/^struct	defer	{$/;"	s
defevec	system/intr.S	/^	.globl	defevec$/;"	s
defevec	system/intr.S	/^defevec:$/;"	l
delay	system/initialize.c	/^int32	delay(int n)$/;"	f	typeref:typename:int32
delay	system/start.S	/^	.globl delay$/;"	s
dentry	config/conf.h	/^struct	dentry	{$/;"	s
depclean	compile/Makefile	/^depclean:$/;"	t
depend	compile/Makefile	/^depend: $(DEFSFILE)$/;"	t
dequeue	system/queue.c	/^pid32	dequeue($/;"	f	typeref:typename:pid32
dev	include/ether.h	/^	struct	dentry	*dev;	\/* Address in device switch table	*\/$/;"	m	struct:ethcblk	typeref:struct:dentry *
dev	include/ethloop.h	/^    struct dentry *dev;                    \/**< device table entry                 *\/$/;"	m	struct:ethloop	typeref:struct:dentry *
devAddress	include/ether.h	/^	uint8	devAddress[ETH_ADDR_LEN];\/* MAC address 		*\/$/;"	m	struct:ethcblk	typeref:typename:uint8[]
dev_tlist	config/config.y	/^dev_tlist:	theader attr_list$/;"	l
devcall	include/kernel.h	/^typedef int32	devcall;	\/* Device call declaration		*\/$/;"	t	typeref:typename:int32
device	config/config.y	/^device:		dheader attr_list$/;"	l
device	include/flash.h	/^    struct dentry *device;             \/**< flash entry in dev structure        *\/$/;"	m	struct:flash	typeref:struct:dentry *
devices	config/config.y	/^devices:	\/* nothing *\/ { doing = "interface types"; }$/;"	l
devis	config/config.y	/^devis:		IS devisid$/;"	l
devisid	config/config.y	/^devisid:	IDENT { devisid(yytext); }$/;"	l
devon	config/config.y	/^devon:		ON devonid$/;"	l
devonid	config/config.y	/^devonid:	IDENT { devonid(yytext); }$/;"	l
devtab	config/conf.c	/^struct	dentry	devtab[NDEVS] =$/;"	v	typeref:struct:dentry[]
devtype	config/config.y	/^devtype:	tname COLON dev_tlist$/;"	l
devtypes	config/config.y	/^devtypes:	\/* nothing *\/ { doing = "device definitions"; }$/;"	l
dhcp_bld_bootp_msg	net/dhcp.c	/^void 	dhcp_bld_bootp_msg(struct dhcpmsg* dmsg)$/;"	f	typeref:typename:void
dhcp_bld_disc	net/dhcp.c	/^int32 	dhcp_bld_disc(struct dhcpmsg* dmsg)$/;"	f	typeref:typename:int32
dhcp_bld_req	net/dhcp.c	/^int32 	dhcp_bld_req($/;"	f	typeref:typename:int32
dhcp_dump	net/dhcp_dump.c	/^void	dhcp_dump($/;"	f	typeref:typename:void
dhcp_get_opt_val	net/dhcp.c	/^char* 	dhcp_get_opt_val($/;"	f	typeref:typename:char *
dhcpmsg	include/dhcp.h	/^struct	dhcpmsg	{$/;"	s
dheader	config/config.y	/^dheader:	dname devis devon$/;"	l
did32	include/kernel.h	/^typedef	int32	did32;		\/* Device ID				*\/$/;"	t	typeref:typename:int32
disable	system/intr.S	/^	.globl	disable$/;"	s
disable	system/intr.S	/^disable:$/;"	l
disk	include/ramdisk.h	/^	char	disk[RM_BLKSIZ * RM_BLKS];$/;"	m	struct:ramdisk	typeref:typename:char[]
dll	include/uart.h	/^#define	dll	/;"	d
dlm	include/uart.h	/^#define	dlm	/;"	d
dname	config/config.y	/^dname:		IDENT { newdev(yytext); }$/;"	l
dns_bldq	net/dns.c	/^int32	dns_bldq ($/;"	f	typeref:typename:int32
dns_geta	net/dns.c	/^status	dns_geta ($/;"	f	typeref:typename:status
dns_getrname	net/dns.c	/^uint32	dns_getrname ($/;"	f	typeref:typename:uint32
dns_q	include/dns.h	/^struct	dns_q {$/;"	s
dns_rr	include/dns.h	/^struct	dns_rr {$/;"	s
dnslookup	net/dns.c	/^status	dnslookup ($/;"	f	typeref:typename:status
dnspkt	include/dns.h	/^struct	dnspkt {$/;"	s
dnsserver	include/net.h	/^	uint32	dnsserver;		\/* DNS server address		*\/$/;"	m	struct:network	typeref:typename:uint32
dot2ip	net/dot2ip.c	/^status	dot2ip ($/;"	f	typeref:typename:status
drives_addr	include/multiboot.h	/^	uint32	drives_addr;		\/* Address of Drive structures	*\/$/;"	m	struct:mbootinfo	typeref:typename:uint32
drives_length	include/multiboot.h	/^	uint32	drives_length;		\/* Size of drives structures	*\/$/;"	m	struct:mbootinfo	typeref:typename:uint32
dst	include/ether.h	/^	byte	dst[ETH_ADDR_LEN];	\/* Destination Mac address	*\/$/;"	m	struct:etherPkt	typeref:typename:byte[]
dt_boot	include/date.h	/^	uint32	dt_boot;		\/* Time when system booted	*\/$/;"	m	struct:dateinfo	typeref:typename:uint32
dt_bootvalid	include/date.h	/^	bool8	dt_bootvalid;		\/* Is dt_boot field valid?	*\/$/;"	m	struct:dateinfo	typeref:typename:bool8
dt_daylight	include/date.h	/^	int32	dt_daylight;		\/* Whether to compute daylight	*\/$/;"	m	struct:dateinfo	typeref:typename:int32
dt_dnam	include/date.h	/^	char	*dt_dnam[7];		\/* Day names			*\/$/;"	m	struct:dateinfo	typeref:typename:char * [7]
dt_mnam	include/date.h	/^	char	*dt_mnam[12];		\/* Month names			*\/$/;"	m	struct:dateinfo	typeref:typename:char * [12]
dt_msize	include/date.h	/^	int32	dt_msize[12];		\/* Days per month		*\/$/;"	m	struct:dateinfo	typeref:typename:int32[12]
dvclose	config/conf.h	/^	devcall (*dvclose)(struct dentry *);$/;"	m	struct:dentry	typeref:typename:devcall (*)(struct dentry *)
dvcntl	config/conf.h	/^	devcall (*dvcntl) (struct dentry *, int32, int32, int32);$/;"	m	struct:dentry	typeref:typename:devcall (*)(struct dentry *,int32,int32,int32)
dvcsr	config/conf.h	/^	void    *dvcsr;$/;"	m	struct:dentry	typeref:typename:void *
dvgetc	config/conf.h	/^	devcall (*dvgetc) (struct dentry *);$/;"	m	struct:dentry	typeref:typename:devcall (*)(struct dentry *)
dvinit	config/conf.h	/^	devcall (*dvinit) (struct dentry *);$/;"	m	struct:dentry	typeref:typename:devcall (*)(struct dentry *)
dvintr	config/conf.h	/^	void    (*dvintr)(void);$/;"	m	struct:dentry	typeref:typename:void (*)(void)
dvirq	config/conf.h	/^	byte    dvirq;$/;"	m	struct:dentry	typeref:typename:byte
dvminor	config/conf.h	/^	int32   dvminor;$/;"	m	struct:dentry	typeref:typename:int32
dvname	config/conf.h	/^	char    *dvname;$/;"	m	struct:dentry	typeref:typename:char *
dvnum	config/conf.h	/^	int32   dvnum;$/;"	m	struct:dentry	typeref:typename:int32
dvopen	config/conf.h	/^	devcall (*dvopen) (struct dentry *, char *, char *);$/;"	m	struct:dentry	typeref:typename:devcall (*)(struct dentry *,char *,char *)
dvputc	config/conf.h	/^	devcall (*dvputc) (struct dentry *, char);$/;"	m	struct:dentry	typeref:typename:devcall (*)(struct dentry *,char)
dvread	config/conf.h	/^	devcall (*dvread) (struct dentry *, void *, uint32);$/;"	m	struct:dentry	typeref:typename:devcall (*)(struct dentry *,void *,uint32)
dvseek	config/conf.h	/^	devcall (*dvseek) (struct dentry *, int32);$/;"	m	struct:dentry	typeref:typename:devcall (*)(struct dentry *,int32)
dvwrite	config/conf.h	/^	devcall (*dvwrite)(struct dentry *, void *, uint32);$/;"	m	struct:dentry	typeref:typename:devcall (*)(struct dentry *,void *,uint32)
ebss	compile/ld.script	/^    ebss = ABSOLUTE(.) ;        \/* ebss: end of bss                     *\/$/;"	s	section:.bss
echoch	device/tty/ttyhandle_in.c	/^local	void	echoch($/;"	f	typeref:typename:local void
ed_mca	include/ether.h	/^    	Eaddr   ed_mca[ETH_NUM_MCAST];\/* Array of multicast addrs 	*\/$/;"	m	struct:ethcblk	typeref:typename:Eaddr[]
ed_mcc	include/ether.h	/^	int16 	ed_mcc;	 	\/* Count of multicast addresses		*\/$/;"	m	struct:ethcblk	typeref:typename:int16
ed_mcset	include/ether.h	/^	int16 	ed_mcset;       \/* Nonzero => multicast reception set   *\/$/;"	m	struct:ethcblk	typeref:typename:int16
edata	compile/ld.script	/^    edata = ABSOLUTE(.) ;       \/* edata: end of data                   *\/$/;"	s	section:.data
enable	system/intr.S	/^	.globl	enable$/;"	s
enable	system/intr.S	/^enable:$/;"	l
end	compile/ld.script	/^    end = ABSOLUTE(.);          \/* end: end of image                    *\/$/;"	s	section:.bss
enqueue	system/queue.c	/^pid32	enqueue($/;"	f	typeref:typename:pid32
entry	system/start.S	/^entry:	.globl	entry$/;"	l
eputc	device/tty/ttyhandle_in.c	/^local	void	eputc($/;"	f	typeref:typename:local void
erase1	device/tty/ttyhandle_in.c	/^local	void	erase1($/;"	f	typeref:typename:local void
erase_blocks	include/flash.h	/^    struct flash_block erase_blocks[MAX_LIVE_BLOCKS];$/;"	m	struct:flash	typeref:struct:flash_block[]
err_int_sig_en	include/sdmc.h	/^	uint16	err_int_sig_en;		\/* error interrupt signal enable register *\/$/;"	m	struct:sdmc_csreg	typeref:typename:uint16
err_int_stat_en	include/sdmc.h	/^	uint16	err_int_stat_en;	\/* error interrupt status enable register *\/$/;"	m	struct:sdmc_csreg	typeref:typename:uint16
err_int_status	include/sdmc.h	/^	uint16	err_int_status;		\/* error interrupt status register 	*\/$/;"	m	struct:sdmc_csreg	typeref:typename:uint16
errors	include/e1000e.h	/^	uint8   errors;		 	\/* Descriptor Errors 		*\/$/;"	m	struct:eth_rx_desc	typeref:typename:uint8
errors	include/ether.h	/^	uint32	errors;		\/* Number of Ethernet errors 		*\/$/;"	m	struct:ethcblk	typeref:typename:uint32
etext	compile/ld.script	/^    etext = ABSOLUTE(.) ;       \/* etext: end of text                   *\/$/;"	s	section:.text
ethIrqDisable	device/eth/ethcontrol.c	/^void ethIrqDisable($/;"	f	typeref:typename:void
ethIrqEnable	device/eth/ethcontrol.c	/^void ethIrqEnable($/;"	f	typeref:typename:void
eth_hton	net/net.c	/^void 	eth_hton($/;"	f	typeref:typename:void
eth_io_flush	include/e1000e.h	/^#define eth_io_flush(/;"	d
eth_io_readl	include/e1000e.h	/^static 	inline 	uint32 	eth_io_readl($/;"	f	typeref:typename:uint32
eth_io_writel	include/e1000e.h	/^static 	inline 	void 	eth_io_writel($/;"	f	typeref:typename:void
eth_ntoh	net/net.c	/^void 	eth_ntoh($/;"	f	typeref:typename:void
eth_rxPackets	device/eth/ethhandler.c	/^local 	void 	eth_rxPackets($/;"	f	typeref:typename:local void
eth_rx_desc	include/e1000e.h	/^struct	eth_rx_desc {$/;"	s
eth_txPackets	device/eth/ethhandler.c	/^local 	void 	eth_txPackets($/;"	f	typeref:typename:local void
eth_tx_desc	include/e1000e.h	/^struct	eth_tx_desc {$/;"	s
ethbcast	include/net.h	/^	byte	ethbcast[ETH_ADDR_LEN];	\/* Ethernet broadcast address	*\/$/;"	m	struct:network	typeref:typename:byte[]
ethcblk	include/ether.h	/^struct	ethcblk	{$/;"	s
ethcontrol	device/eth/ethcontrol.c	/^devcall	ethcontrol($/;"	f	typeref:typename:devcall
ethdispatch	device/eth/ethdispatch.S	/^		.globl	ethdispatch$/;"	s
ethdispatch	device/eth/ethdispatch.S	/^ethdispatch:$/;"	l
etherPkt	include/ether.h	/^struct	etherPkt {$/;"	s
ethertab	device/eth/ethinit.c	/^struct	ethcblk	ethertab[Neth];		\/* Ethernet control blocks 	*\/$/;"	v	typeref:struct:ethcblk[]
ethhandler	device/eth/ethdispatch.S	/^		.globl	ethhandler$/;"	s
ethhandler	device/eth/ethhandler.c	/^interrupt ethhandler(void)$/;"	f	typeref:typename:interrupt
ethinit	device/eth/ethinit.c	/^devcall	ethinit ($/;"	f	typeref:typename:devcall
ethloop	include/ethloop.h	/^struct ethloop$/;"	s
ethread	device/eth/ethread.c	/^devcall	ethread($/;"	f	typeref:typename:devcall
ethucast	include/net.h	/^	byte	ethucast[ETH_ADDR_LEN];	\/* Ethernet multicast address	*\/$/;"	m	struct:network	typeref:typename:byte[]
ethwrite	device/eth/ethwrite.c	/^devcall	ethwrite($/;"	f	typeref:typename:devcall
exchandler	include/stddef.h	/^typedef void exchandler;        \/**< exception procedure                *\/$/;"	t	typeref:typename:void
exit	system/exit.c	/^void	exit(void)$/;"	f	typeref:typename:void
extended_media_bus_support	include/sdmc.h	/^	uint32	extended_media_bus_support:1;	\/* Extended Media Bus Support		*\/$/;"	m	struct:sdmc_capabilities	typeref:typename:uint32:1
failif	include/testsuite.h	/^#define	failif(/;"	d
fcr	include/uart.h	/^#define	fcr	/;"	d
fgetc	lib/fgetc.c	/^int	fgetc($/;"	f	typeref:typename:int
fgets	lib/fgets.c	/^char	*fgets($/;"	f	typeref:typename:char *
fields	include/e1000e.h	/^	 } fields;$/;"	m	union:eth_tx_desc::__anon2602d319030a	typeref:struct:eth_tx_desc::__anon2602d319030a::__anon2602d3190408
file	include/flash.h	/^struct file$/;"	s
find_pci_device	system/pci.c	/^int find_pci_device(int32 deviceID, int32 vendorID, int32 index)$/;"	f	typeref:typename:int
firstid	include/queue.h	/^#define	firstid(/;"	d
firstkey	include/queue.h	/^#define	firstkey(/;"	d
flags	include/e1000e.h	/^	 } flags;$/;"	m	union:eth_tx_desc::__anon2602d319010a	typeref:struct:eth_tx_desc::__anon2602d319010a::__anon2602d3190208
flags	include/ethloop.h	/^    byte flags;                    \/**< flags                              *\/$/;"	m	struct:ethloop	typeref:typename:byte
flags	include/multiboot.h	/^	uint32	flags;			\/* Multiboot information flags	*\/$/;"	m	struct:mbootinfo	typeref:typename:uint32
flags_vers	include/flash.h	/^    uint32 flags_vers;             \/**< 0-15 flags, 16-31 version           *\/$/;"	m	struct:trx_header	typeref:typename:uint32
flash	include/flash.h	/^struct flash$/;"	s
flash_block	include/flash.h	/^struct flash_block$/;"	s
flash_region	include/flash.h	/^struct flash_region$/;"	s
force_event_cmd12_err_stat	include/sdmc.h	/^	uint16	force_event_cmd12_err_stat;	\/* force event register for auto cmd12 error status *\/$/;"	m	struct:sdmc_csreg	typeref:typename:uint16
force_event_err_int_stat	include/sdmc.h	/^	uint16	force_event_err_int_stat;	\/* force event register for error interrupt status *\/$/;"	m	struct:sdmc_csreg	typeref:typename:uint16
fp	system/evec.c	/^static long *fp;$/;"	v	typeref:typename:long *	file:
fprintf	lib/fprintf.c	/^int	fprintf($/;"	f	typeref:typename:int
fputc	lib/fputc.c	/^int	fputc($/;"	f	typeref:typename:int
fputs	lib/fputs.c	/^int	fputs($/;"	f	typeref:typename:int
freebuf	system/freebuf.c	/^syscall	freebuf($/;"	f	typeref:typename:syscall
freemem	system/freemem.c	/^syscall	freemem($/;"	f	typeref:typename:syscall
freestk	include/memory.h	/^#define	freestk(/;"	d
fscanf	lib/fscanf.c	/^int	fscanf($/;"	f	typeref:typename:int
gdt	system/start.S	/^	.globl	gdt$/;"	s
gdt	system/start.S	/^gdt:	.space	64	# must equal NGD*8 (64 = 8 segments)$/;"	l
gdt1	system/start.S	/^gdt1:$/;"	l
gdt_copy	system/i386.c	/^struct sd gdt_copy[NGD] = {$/;"	v	typeref:struct:sd[]
gdtr	system/start.S	/^	.globl	gdtr$/;"	s
gdtr	system/start.S	/^gdtr:	.word	63	# sizeof _gdt -1 (in bytes)$/;"	l
get_sysid_entry_point	net/pxe.c	/^struct sysid_entry_point* get_sysid_entry_point()$/;"	f	typeref:struct:sysid_entry_point *
get_uuid	net/pxe.c	/^char* get_uuid(uint16* uuid_len)$/;"	f	typeref:typename:char *
getbuf	system/getbuf.c	/^char    *getbuf($/;"	f	typeref:typename:char *
getc	system/getc.c	/^syscall	getc($/;"	f	typeref:typename:syscall
getch	lib/fscanf.c	/^static int	getch($/;"	f	typeref:typename:int	file:
getchar	lib/getchar.c	/^int	getchar($/;"	f	typeref:typename:int
getdev	system/getdev.c	/^did32	getdev($/;"	f	typeref:typename:did32
getfirst	system/getitem.c	/^pid32	getfirst($/;"	f	typeref:typename:pid32
getitem	system/getitem.c	/^pid32	getitem($/;"	f	typeref:typename:pid32
getlast	system/getitem.c	/^pid32	getlast($/;"	f	typeref:typename:pid32
getlocalip	net/dhcp.c	/^uint32	getlocalip(void)$/;"	f	typeref:typename:uint32
getmem	system/getmem.c	/^char  	*getmem($/;"	f	typeref:typename:char *
getpid	system/getpid.c	/^pid32	getpid(void)$/;"	f	typeref:typename:pid32
getport	net/net.c	/^uint16 	getport()$/;"	f	typeref:typename:uint16
getprio	system/getprio.c	/^syscall	getprio($/;"	f	typeref:typename:syscall
getstk	system/getstk.c	/^char  	*getstk($/;"	f	typeref:typename:char *
getticks	system/getticks.c	/^uint64  	getticks()$/;"	f	typeref:typename:uint64
gettime	system/gettime.c	/^status	gettime($/;"	f	typeref:typename:status
getutime	system/getutime.c	/^status	getutime($/;"	f	typeref:typename:status
girmask	system/evec.c	/^uint16	girmask;$/;"	v	typeref:typename:uint16
halt	system/intr.S	/^	.globl	halt$/;"	s
halt	system/intr.S	/^halt:$/;"	l
header	include/pxe.h	/^	byte   header[7];$/;"	m	struct:sysid_entry_point	typeref:typename:byte[7]
header	include/pxe.h	/^	byte header[6];$/;"	m	struct:sysid_bios_struct	typeref:typename:byte[6]
hexadump	net/hexdump.c	/^void	hexadump	($/;"	f	typeref:typename:void
hexdump	net/hexdump.c	/^void	hexdump	($/;"	f	typeref:typename:void
hexdump	system/debug.c	/^void	hexdump($/;"	f	typeref:typename:void
hexdump_print	system/debug.c	/^static void hexdump_print($/;"	f	typeref:typename:void	file:
high_speed_support	include/sdmc.h	/^	uint32	high_speed_support	:1;	\/* High Speed Support			*\/$/;"	m	struct:sdmc_capabilities	typeref:typename:uint32:1
hold	include/ethloop.h	/^    char *hold;                 \/**< hold buffer                        *\/$/;"	m	struct:ethloop	typeref:typename:char *
holdlen	include/ethloop.h	/^    int holdlen;                    \/**< length of packet in hold buffer    *\/$/;"	m	struct:ethloop	typeref:typename:int
host_ctl	include/sdmc.h	/^	uint8	host_ctl;		\/* host control register 		*\/$/;"	m	struct:sdmc_csreg	typeref:typename:uint8
host_ctrl_2	include/sdmc.h	/^	uint16	host_ctrl_2;		\/* host control 2 register 		*\/$/;"	m	struct:sdmc_csreg	typeref:typename:uint16
host_ctrl_ver	include/sdmc.h	/^	uint16	host_ctrl_ver;		\/* host controller version register *\/$/;"	m	struct:sdmc_csreg	typeref:typename:uint16
hsem	include/ethloop.h	/^    sid32	hsem;                 \/**< number of held packets             *\/$/;"	m	struct:ethloop	typeref:typename:sid32
htonl	include/prototypes.h	/^#define	htonl(/;"	d
htons	include/prototypes.h	/^#define	htons(/;"	d
ib2disp	include/lfilesys.h	/^#define	ib2disp(/;"	d
ib2sect	include/lfilesys.h	/^#define	ib2sect(/;"	d
ib_dba	include/lfilesys.h	/^	dbid32		ib_dba[LF_IBLEN];\/* Ptrs to data blocks indexed	*\/$/;"	m	struct:lfiblk	typeref:typename:dbid32[]
ib_next	include/lfilesys.h	/^	ibid32		ib_next;	\/* Address of next index block	*\/$/;"	m	struct:lfiblk	typeref:typename:ibid32
ib_offset	include/lfilesys.h	/^	uint32		ib_offset;	\/* First data byte of the file	*\/$/;"	m	struct:lfiblk	typeref:typename:uint32
ibid32	include/kernel.h	/^typedef	int32	ibid32;		\/* Index block ID (used in file system)	*\/$/;"	t	typeref:typename:int32
iccount	include/icmp.h	/^	int32	iccount;		\/* Count of packets enqueued	*\/$/;"	m	struct:icmpentry	typeref:typename:int32
ichead	include/icmp.h	/^	int32	ichead;			\/* Index of next packet to read	*\/$/;"	m	struct:icmpentry	typeref:typename:int32
icmp_cksum	net/icmp.c	/^uint16	icmp_cksum ($/;"	f	typeref:typename:uint16
icmp_hton	net/icmp.c	/^void	icmp_hton ($/;"	f	typeref:typename:void
icmp_in	net/icmp.c	/^void	icmp_in($/;"	f	typeref:typename:void
icmp_init	net/icmp.c	/^void	icmp_init(void) {$/;"	f	typeref:typename:void
icmp_mkpkt	net/icmp.c	/^struct	netpacket *icmp_mkpkt ($/;"	f	typeref:struct:netpacket *
icmp_ntoh	net/icmp.c	/^void	icmp_ntoh ($/;"	f	typeref:typename:void
icmp_recv	net/icmp.c	/^int32	icmp_recv ($/;"	f	typeref:typename:int32
icmp_register	net/icmp.c	/^int32	icmp_register ($/;"	f	typeref:typename:int32
icmp_release	net/icmp.c	/^status	icmp_release ($/;"	f	typeref:typename:status
icmp_send	net/icmp.c	/^status	icmp_send ($/;"	f	typeref:typename:status
icmpentry	include/icmp.h	/^struct	icmpentry {			\/* Entry in the ICMP table	*\/$/;"	s
icmptab	net/icmp.c	/^struct	icmpentry icmptab[ICMP_SLOTS];	\/* Table of processes using ping*\/$/;"	v	typeref:struct:icmpentry[]
icpid	include/icmp.h	/^	pid32	icpid;			\/* ID of waiting process	*\/$/;"	m	struct:icmpentry	typeref:typename:pid32
icqueue	include/icmp.h	/^	struct	netpacket *icqueue[ICMP_QSIZ];\/* Circular packet queue	*\/$/;"	m	struct:icmpentry	typeref:struct:netpacket * []
icremip	include/icmp.h	/^	uint32	icremip;		\/* Remote IP address		*\/$/;"	m	struct:icmpentry	typeref:typename:uint32
icstate	include/icmp.h	/^	int32	icstate;		\/* State of entry: free\/used	*\/$/;"	m	struct:icmpentry	typeref:typename:int32
ictail	include/icmp.h	/^	int32	ictail;			\/* Index of next slot to insert	*\/$/;"	m	struct:icmpentry	typeref:typename:int32
id	config/config.y	/^id:		IDENT { $$ = 0; getattrid(yytext); }$/;"	l
id	include/dns.h	/^	uint16	id;			\/* DNS Query ID			*\/$/;"	m	struct:dnspkt	typeref:typename:uint16
idt	include/i386.h	/^struct idt {$/;"	s
idt	system/start.S	/^	.globl	idt$/;"	s
idt	system/start.S	/^idt:	.space	1024	# must equal NID*8 (1024 == 256 entries * 8 bytes per entry)$/;"	l
idtr	system/start.S	/^	.globl	idtr$/;"	s
idtr	system/start.S	/^idtr:	.word	1023	# size of _idt -1 (in bytes)$/;"	l
ier	include/uart.h	/^	volatile byte	ier;	\/* interrupt enable			*\/$/;"	m	struct:uart_csreg	typeref:typename:volatile byte
igd_dpl	include/i386.h	/^    unsigned int	igd_dpl : 2;$/;"	m	struct:idt	typeref:typename:unsigned int:2
igd_hoffset	include/i386.h	/^    unsigned short	igd_hoffset;$/;"	m	struct:idt	typeref:typename:unsigned short
igd_loffset	include/i386.h	/^    unsigned short	igd_loffset;$/;"	m	struct:idt	typeref:typename:unsigned short
igd_mbz	include/i386.h	/^    unsigned int	igd_mbz : 3;$/;"	m	struct:idt	typeref:typename:unsigned int:3
igd_present	include/i386.h	/^    unsigned int	igd_present : 1;$/;"	m	struct:idt	typeref:typename:unsigned int:1
igd_rsvd	include/i386.h	/^    unsigned int	igd_rsvd : 5;$/;"	m	struct:idt	typeref:typename:unsigned int:5
igd_segsel	include/i386.h	/^    unsigned short	igd_segsel;$/;"	m	struct:idt	typeref:typename:unsigned short
igd_type	include/i386.h	/^    unsigned int	igd_type : 5;$/;"	m	struct:idt	typeref:typename:unsigned int:5
iir	include/uart.h	/^	volatile byte	iir;	\/* interrupt identification (when read)	*\/$/;"	m	struct:uart_csreg	typeref:typename:volatile byte
inPool	include/ether.h	/^	int16	inPool;		\/* Buffer pool ID for input buffers 	*\/$/;"	m	struct:ethcblk	typeref:typename:int16
inames	system/evec.c	/^char *inames[] = {$/;"	v	typeref:typename:char * []
inb	system/start.S	/^	.globl	inb$/;"	s
inb	system/start.S	/^inb:	movl	4(%esp), %edx$/;"	l
index	include/ethloop.h	/^    int index;                  \/**< index of first packet in buffer    *\/$/;"	m	struct:ethloop	typeref:typename:int
init	system/init.c	/^syscall	init($/;"	f	typeref:typename:syscall
init8259	system/i386.c	/^void	init8259()$/;"	f	typeref:typename:void
initevec	system/evec.c	/^int32	initevec()$/;"	f	typeref:typename:int32
initsp	system/i386.c	/^long	initsp;		\/* initial SP for nulluser() *\/$/;"	v	typeref:typename:long
inl	system/start.S	/^	.globl  inl$/;"	s
inl	system/start.S	/^inl:	movl	4(%esp), %edx$/;"	l
insert	system/insert.c	/^status	insert($/;"	f	typeref:typename:status
insertd	system/insertd.c	/^status	insertd(			\/* Assumes interrupts disabled	*\/$/;"	f	typeref:typename:status
install	config/Makefile	/^install:	conf.h conf.c$/;"	t
insw	system/start.S	/^	.globl	insw$/;"	s
insw	system/start.S	/^insw:$/;"	l
int16	include/kernel.h	/^typedef	short		int16;$/;"	t	typeref:typename:short
int32	include/kernel.h	/^typedef	int		int32;$/;"	t	typeref:typename:int
interrupt	include/kernel.h	/^typedef	void	interrupt;	\/* Interrupt function			*\/$/;"	t	typeref:typename:void
intmask	include/kernel.h	/^typedef	uint32	intmask;	\/* Saved interrupt mask			*\/$/;"	t	typeref:typename:uint32
inw	system/start.S	/^	.globl	inw$/;"	s
inw	system/start.S	/^inw:	movl	4(%esp), %edx$/;"	l
io_inb	include/io.h	/^#define	io_inb(/;"	d
io_inl	include/io.h	/^#define	io_inl(/;"	d
io_inw	include/io.h	/^#define	io_inw(/;"	d
io_outb	include/io.h	/^#define	io_outb(/;"	d
io_outl	include/io.h	/^#define	io_outl(/;"	d
io_outw	include/io.h	/^#define	io_outw(/;"	d
iobase	include/ether.h	/^	uint32	iobase;		\/* I\/O base from config			*\/$/;"	m	struct:ethcblk	typeref:typename:uint32
ioerr	system/ioerr.c	/^devcall	ioerr(void)$/;"	f	typeref:typename:devcall
ionull	system/ionull.c	/^devcall	ionull(void)$/;"	f	typeref:typename:devcall
ip_enqueue	net/ip.c	/^status	ip_enqueue($/;"	f	typeref:typename:status
ip_hton	net/ip.c	/^void 	ip_hton($/;"	f	typeref:typename:void
ip_in	net/ip.c	/^void	ip_in($/;"	f	typeref:typename:void
ip_local	net/ip.c	/^void	ip_local($/;"	f	typeref:typename:void
ip_ntoh	net/ip.c	/^void 	ip_ntoh($/;"	f	typeref:typename:void
ip_out	net/ip.c	/^status	ip_out($/;"	f	typeref:typename:status
ip_send	net/ip.c	/^status	ip_send($/;"	f	typeref:typename:status
ipbcast	include/net.h	/^	uint32	ipbcast;		\/* IP broadcast address		*\/$/;"	m	struct:network	typeref:typename:uint32
ipcksum	net/ip.c	/^uint16	ipcksum($/;"	f	typeref:typename:uint16
ipmask	include/net.h	/^	uint32	ipmask;			\/* IP address mask		*\/$/;"	m	struct:network	typeref:typename:uint32
ipoqueue	net/ip.c	/^struct	iqentry	ipoqueue;		\/* Queue of outgoing packets	*\/$/;"	v	typeref:struct:iqentry
ipout	net/ip.c	/^process	ipout(void)$/;"	f	typeref:typename:process
ipprefix	include/net.h	/^	uint32	ipprefix;		\/* IP (network) prefix		*\/$/;"	m	struct:network	typeref:typename:uint32
iprouter	include/net.h	/^	uint32	iprouter;		\/* Default router address	*\/$/;"	m	struct:network	typeref:typename:uint32
ipucast	include/net.h	/^	uint32	ipucast;		\/* Computer's IP unicast address*\/$/;"	m	struct:network	typeref:typename:uint32
ipvalid	include/net.h	/^	bool8	ipvalid;		\/* Nonzero => above are valid	*\/$/;"	m	struct:network	typeref:typename:bool8
iqbuf	include/ip.h	/^	struct	netpacket *iqbuf[IP_OQSIZ];\/* Circular packet queue	*\/$/;"	m	struct:iqentry	typeref:struct:netpacket * []
iqentry	include/ip.h	/^struct	iqentry	{$/;"	s
iqhead	include/ip.h	/^	int32	iqhead;			\/* Index of next packet to send	*\/$/;"	m	struct:iqentry	typeref:typename:int32
iqsem	include/ip.h	/^	sid32	iqsem;			\/* Semaphore that counts pkts	*\/$/;"	m	struct:iqentry	typeref:typename:sid32
iqtail	include/ip.h	/^	int32	iqtail;			\/* Index of next free slot	*\/$/;"	m	struct:iqentry	typeref:typename:int32
isalnum	include/ctype.h	/^#define isalnum(/;"	d
isalpha	include/ctype.h	/^#define isalpha(/;"	d
isascii	include/ctype.h	/^#define isascii(/;"	d
isbaddev	include/device.h	/^#define isbaddev(/;"	d
isbadpid	include/process.h	/^#define	isbadpid(/;"	d
isbadport	include/ports.h	/^#define	isbadport(/;"	d
isbadqid	include/queue.h	/^#define	isbadqid(/;"	d
isbadsem	include/semaphore.h	/^#define	isbadsem(/;"	d
iscntrl	include/ctype.h	/^#define iscntrl(/;"	d
isdigit	include/ctype.h	/^#define isdigit(/;"	d
isem	include/ether.h	/^	sid32	isem;		\/* Semaphore for Ethernet input		*\/$/;"	m	struct:ethcblk	typeref:typename:sid32
isempty	include/queue.h	/^#define	isempty(/;"	d
iseof	include/ctype.h	/^#define iseof(/;"	d
isleap	include/date.h	/^#define	isleap(/;"	d
islower	include/ctype.h	/^#define islower(/;"	d
isprint	include/ctype.h	/^#define isprint(/;"	d
ispunct	include/ctype.h	/^#define ispunct(/;"	d
isspace	include/ctype.h	/^#define isspace(/;"	d
istart	include/ether.h	/^	uint16	istart;		\/* Index of next packet in the ring     *\/$/;"	m	struct:ethcblk	typeref:typename:uint16
isupper	include/ctype.h	/^#define isupper(/;"	d
isxdigit	include/ctype.h	/^#define isxdigit(/;"	d
jumptobootcode	system/start.S	/^	.globl  jumptobootcode$/;"	s
jumptobootcode	system/start.S	/^jumptobootcode:$/;"	l
jumptocode	system/start.S	/^	.globl  jumptocode$/;"	s
jumptocode	system/start.S	/^jumptocode:$/;"	l
kgetc	system/kprintf.c	/^syscall kgetc(void)$/;"	f	typeref:typename:syscall
kill	system/kill.c	/^syscall	kill($/;"	f	typeref:typename:syscall
kprintf	system/kprintf.c	/^syscall kprintf(char *fmt, ...)$/;"	f	typeref:typename:syscall
kputc	system/kprintf.c	/^syscall	kputc($/;"	f	typeref:typename:syscall
labs	lib/labs.c	/^long	labs($/;"	f	typeref:typename:long
lastid	include/queue.h	/^#define	lastid(/;"	d
lastkey	include/queue.h	/^#define	lastkey(/;"	d
lcr	include/uart.h	/^	volatile byte	lcr;	\/* line control register		*\/$/;"	m	struct:uart_csreg	typeref:typename:volatile byte
ld_ilist	include/lfilesys.h	/^	ibid32	ld_ilist;		\/* ID of first i-block for file	*\/$/;"	m	struct:ldentry	typeref:typename:ibid32
ld_name	include/lfilesys.h	/^	char	ld_name[LF_NAME_LEN];	\/* Null-terminated file name	*\/$/;"	m	struct:ldentry	typeref:typename:char[]
ld_size	include/lfilesys.h	/^	uint32	ld_size;		\/* Curr. size of file in bytes	*\/$/;"	m	struct:ldentry	typeref:typename:uint32
ldentry	include/lfilesys.h	/^struct	ldentry	{			\/* Description of entry for one	*\/$/;"	s
len	include/flash.h	/^    uint32 len;                   \/**< Length of file including header     *\/$/;"	m	struct:trx_header	typeref:typename:uint32
len	include/flash.h	/^    uint32 len;$/;"	m	struct:file	typeref:typename:uint32
len	include/i386.h	/^    unsigned int	len : 16;$/;"	m	struct:segtr	typeref:typename:unsigned int:16
len	include/pxe.h	/^	uint16 len;$/;"	m	struct:sysid_bios_struct	typeref:typename:uint16
len	include/pxe.h	/^	uint16 len;$/;"	m	struct:sysid_entry_point	typeref:typename:uint16
length	include/e1000e.h	/^	  uint16 	length; 	\/* Data buffer length 		*\/$/;"	m	struct:eth_tx_desc::__anon2602d319010a::__anon2602d3190208	typeref:typename:uint16
length	include/e1000e.h	/^	uint16  length;			\/* Length of data DMAed into 	*\/$/;"	m	struct:eth_rx_desc	typeref:typename:uint16
length	include/multiboot.h	/^	uint64	length;			\/* Memory region length		*\/$/;"	m	struct:mbmregion	typeref:typename:uint64
length	include/pci.h	/^    unsigned char   length;             \/* length of data in 16 byte units   *\/$/;"	m	struct:bios32	typeref:typename:unsigned char
lex.yy.c	config/Makefile	/^lex.yy.c:	config.l$/;"	t
lexan	shell/lexan.c	/^int32	lexan ($/;"	f	typeref:typename:int32
lf_dir	include/lfilesys.h	/^	struct	lfdir	lf_dir;		\/* In-memory copy of directory	*\/$/;"	m	struct:lfdata	typeref:struct:lfdir
lf_dirdirty	include/lfilesys.h	/^	bool8	lf_dirdirty;		\/* Has the directory changed?	*\/$/;"	m	struct:lfdata	typeref:typename:bool8
lf_dirpresent	include/lfilesys.h	/^	bool8	lf_dirpresent;		\/* True when directory is in	*\/$/;"	m	struct:lfdata	typeref:typename:bool8
lf_dskdev	include/lfilesys.h	/^	did32	lf_dskdev;		\/* Device ID of disk to use	*\/$/;"	m	struct:lfdata	typeref:typename:did32
lf_mutex	include/lfilesys.h	/^	sid32	lf_mutex;		\/* Mutex for the directory and	*\/$/;"	m	struct:lfdata	typeref:typename:sid32
lf_nextdb	include/lfilesys.h	/^	dbid32	lf_nextdb;		\/* Next data block on the list	*\/$/;"	m	struct:lfdbfree	typeref:typename:dbid32
lf_unused	include/lfilesys.h	/^	char	lf_unused[LF_BLKSIZ - sizeof(dbid32)];$/;"	m	struct:lfdbfree	typeref:typename:char[]
lfbyte	include/lfilesys.h	/^	char	*lfbyte;		\/* Ptr to byte in lfdblock or	*\/$/;"	m	struct:lflcblk	typeref:typename:char *
lfd_allones	include/lfilesys.h	/^	uint32	lfd_allones;		\/* All 1 bits			*\/$/;"	m	struct:lfdir	typeref:typename:uint32
lfd_allzeros	include/lfilesys.h	/^	uint32	lfd_allzeros;		\/* All 0 bits			*\/$/;"	m	struct:lfdir	typeref:typename:uint32
lfd_dfree	include/lfilesys.h	/^	dbid32	lfd_dfree;		\/* List of free d-blocks on disk*\/$/;"	m	struct:lfdir	typeref:typename:dbid32
lfd_files	include/lfilesys.h	/^	struct	ldentry lfd_files[LF_NUM_DIR_ENT]; \/* Set of files	*\/$/;"	m	struct:lfdir	typeref:struct:ldentry[]
lfd_fsysid	include/lfilesys.h	/^	uint32	lfd_fsysid;		\/* File system ID		*\/$/;"	m	struct:lfdir	typeref:typename:uint32
lfd_ifree	include/lfilesys.h	/^	ibid32	lfd_ifree;		\/* List of free i-blocks on disk*\/$/;"	m	struct:lfdir	typeref:typename:ibid32
lfd_nfiles	include/lfilesys.h	/^	int32	lfd_nfiles;		\/* Current number of files	*\/$/;"	m	struct:lfdir	typeref:typename:int32
lfd_revid	include/lfilesys.h	/^	uint32	lfd_revid;		\/* Fsysid in reverse byte order	*\/$/;"	m	struct:lfdir	typeref:typename:uint32
lfd_subvers	include/lfilesys.h	/^	int16	lfd_subvers;		\/* File system subversion	*\/$/;"	m	struct:lfdir	typeref:typename:int16
lfd_vers	include/lfilesys.h	/^	int16	lfd_vers;		\/* File system version		*\/$/;"	m	struct:lfdir	typeref:typename:int16
lfdata	include/lfilesys.h	/^struct	lfdata	{			\/* Local file system data	*\/$/;"	s
lfdballoc	device/lfs/lfdballoc.c	/^dbid32	lfdballoc ($/;"	f	typeref:typename:dbid32
lfdbdirty	include/lfilesys.h	/^	bool8	lfdbdirty;		\/* Has lfdblock changed?	*\/$/;"	m	struct:lflcblk	typeref:typename:bool8
lfdbfree	device/lfs/lfdbfree.c	/^status	lfdbfree($/;"	f	typeref:typename:status
lfdbfree	include/lfilesys.h	/^struct	lfdbfree {$/;"	s
lfdblock	include/lfilesys.h	/^	char	lfdblock[LF_BLKSIZ];	\/* In-mem copy of current data	*\/$/;"	m	struct:lflcblk	typeref:typename:char[]
lfdev	include/lfilesys.h	/^	did32	lfdev;			\/* Device ID of this device	*\/$/;"	m	struct:lflcblk	typeref:typename:did32
lfdir	include/lfilesys.h	/^struct	lfdir	{			\/* Entire directory on disk	*\/$/;"	s
lfdirptr	include/lfilesys.h	/^	struct	ldentry	*lfdirptr;	\/* Ptr to file's entry in the	*\/$/;"	m	struct:lflcblk	typeref:struct:ldentry *
lfdnum	include/lfilesys.h	/^	dbid32	lfdnum;			\/* Number of current data block	*\/$/;"	m	struct:lflcblk	typeref:typename:dbid32
lfflush	device/lfs/lfflush.c	/^status	lfflush ($/;"	f	typeref:typename:status
lfgetmode	device/lfs/lfgetmode.c	/^int32	lfgetmode ($/;"	f	typeref:typename:int32
lfiballoc	device/lfs/lfiballoc.c	/^ibid32	lfiballoc (void)$/;"	f	typeref:typename:ibid32
lfibclear	device/lfs/lfibclear.c	/^void	lfibclear($/;"	f	typeref:typename:void
lfibdirty	include/lfilesys.h	/^	bool8	lfibdirty;		\/* Has lfiblock changed?	*\/$/;"	m	struct:lflcblk	typeref:typename:bool8
lfibget	device/lfs/lfibget.c	/^void	lfibget($/;"	f	typeref:typename:void
lfiblk	include/lfilesys.h	/^struct	lfiblk		{		\/* Format of index block	*\/$/;"	s
lfiblock	include/lfilesys.h	/^	struct	lfiblk	lfiblock;	\/* In-mem copy of current index	*\/$/;"	m	struct:lflcblk	typeref:struct:lfiblk
lfibput	device/lfs/lfibput.c	/^status	lfibput($/;"	f	typeref:typename:status
lfinum	include/lfilesys.h	/^	ibid32	lfinum;			\/* ID of current index block in	*\/$/;"	m	struct:lflcblk	typeref:typename:ibid32
lflcblk	include/lfilesys.h	/^struct	lflcblk	{			\/* Local file control block	*\/$/;"	s
lflclose	device/lfs/lflclose.c	/^devcall	lflclose ($/;"	f	typeref:typename:devcall
lflcontrol	device/lfs/lflcontrol.c	/^devcall	lflcontrol ($/;"	f	typeref:typename:devcall
lflgetc	device/lfs/lflgetc.c	/^devcall	lflgetc ($/;"	f	typeref:typename:devcall
lflinit	device/lfs/lflinit.c	/^devcall	lflinit ($/;"	f	typeref:typename:devcall
lflputc	device/lfs/lflputc.c	/^devcall	lflputc ($/;"	f	typeref:typename:devcall
lflread	device/lfs/lflread.c	/^devcall	lflread ($/;"	f	typeref:typename:devcall
lflseek	device/lfs/lflseek.c	/^devcall	lflseek ($/;"	f	typeref:typename:devcall
lfltab	device/lfs/lflinit.c	/^struct	lflcblk	lfltab[Nlfl];		\/* Pseudo-device control blocks	*\/$/;"	v	typeref:struct:lflcblk[]
lflwrite	device/lfs/lflwrite.c	/^devcall	lflwrite ($/;"	f	typeref:typename:devcall
lfmode	include/lfilesys.h	/^	int32	lfmode;			\/* Mode (read\/write\/both)	*\/$/;"	m	struct:lflcblk	typeref:typename:int32
lfmutex	include/lfilesys.h	/^	sid32	lfmutex;		\/* Mutex for this file		*\/$/;"	m	struct:lflcblk	typeref:typename:sid32
lfname	include/lfilesys.h	/^	char	lfname[LF_NAME_LEN];	\/* Name of the file		*\/$/;"	m	struct:lflcblk	typeref:typename:char[]
lfpos	include/lfilesys.h	/^	uint32	lfpos;			\/* Byte position of next byte	*\/$/;"	m	struct:lflcblk	typeref:typename:uint32
lfscheck	device/lfs/lfscheck.c	/^status	lfscheck ($/;"	f	typeref:typename:status
lfsckfmt	device/lfs/lfsckfmt.c	/^status	lfsckfmt ($/;"	f	typeref:typename:status
lfscreate	device/lfs/lfscreate.c	/^status	lfscreate ($/;"	f	typeref:typename:status
lfsetup	device/lfs/lfsetup.c	/^status	lfsetup ($/;"	f	typeref:typename:status
lfsinit	device/lfs/lfsinit.c	/^devcall	lfsinit ($/;"	f	typeref:typename:devcall
lfsopen	device/lfs/lfsopen.c	/^devcall	lfsopen ($/;"	f	typeref:typename:devcall
lfstate	include/lfilesys.h	/^	byte	lfstate;		\/* Is entry free or used	*\/$/;"	m	struct:lflcblk	typeref:typename:byte
lftruncate	device/lfs/lftruncate.c	/^status	lftruncate ($/;"	f	typeref:typename:status
lidt	system/start.S	/^	.globl	lidt$/;"	s
lidt	system/start.S	/^lidt:$/;"	l
livn	system/getutime.c	/^		byte	livn;		\/* LI:2 VN:3 and mode:3 fields	*\/$/;"	m	struct:getutime::ntp	typeref:typename:byte	file:
local	include/kernel.h	/^#define local	/;"	d
lock	include/flash.h	/^    sid32	lock;             \/**< lock for execution flash operations *\/$/;"	m	struct:flash	typeref:typename:sid32
log_size	include/flash.h	/^    uint32 log_size;             \/**< size of logical disk blocks         *\/$/;"	m	struct:flash	typeref:typename:uint32
lower	include/e1000e.h	/^	} lower;$/;"	m	struct:eth_tx_desc	typeref:union:eth_tx_desc::__anon2602d319010a
lsr	include/uart.h	/^	volatile byte	lsr;	\/* line status register			*\/$/;"	m	struct:uart_csreg	typeref:typename:volatile byte
ltim2utim	include/date.h	/^#define	ltim2utim(/;"	d
magic	include/flash.h	/^    uint32 magic;                 \/**< "HDR0"                              *\/$/;"	m	struct:trx_header	typeref:typename:uint32
main	system/main.c	/^process	main(void)$/;"	f	typeref:typename:process
mark	system/mark.c	/^syscall	mark($/;"	f	typeref:typename:syscall
markinit	system/mark.c	/^void	markinit(void)$/;"	f	typeref:typename:void
marks	system/mark.c	/^int32	*marks[MAXMARK];		\/* Pointers to marked locations	*\/$/;"	v	typeref:typename:int32 * []
max_block_length	include/sdmc.h	/^	uint32	max_block_length	:2;	\/* Max Block Length			*\/$/;"	m	struct:sdmc_capabilities	typeref:typename:uint32:2
max_cur_cap	include/sdmc.h	/^	uint32	max_cur_cap;		\/* maximum current capabilities register *\/$/;"	m	struct:sdmc_csreg	typeref:typename:uint32
maxheap	system/meminit.c	/^void	*maxheap;		\/* Highest valid heap address		*\/$/;"	v	typeref:typename:void *
mbmregion	include/multiboot.h	/^struct mbmregion {$/;"	s
mbootheader	system/start.S	/^mbootheader:  				# Beginning of multiboot header, embedded in ELF header$/;"	l
mbootinfo	include/multiboot.h	/^struct mbootinfo {$/;"	s
mcr	include/uart.h	/^	volatile byte	mcr;	\/* modem control register		*\/$/;"	m	struct:uart_csreg	typeref:typename:volatile byte
mem_lower	include/multiboot.h	/^	uint32	mem_lower;		\/* Memory in KB below 1M	*\/$/;"	m	struct:mbootinfo	typeref:typename:uint32
mem_upper	include/multiboot.h	/^	uint32	mem_upper;		\/* Memory in KB above 1M	*\/$/;"	m	struct:mbootinfo	typeref:typename:uint32
memblk	include/memory.h	/^struct	memblk	{			\/* See roundmb & truncmb	*\/$/;"	s
memcmp	lib/memcmp.c	/^int	memcmp($/;"	f	typeref:typename:int
memcpy	lib/memcpy.c	/^void	*memcpy($/;"	f	typeref:typename:void *
meminit	system/meminit.c	/^void	meminit(void) {$/;"	f	typeref:typename:void
memlist	system/initialize.c	/^struct	memblk	memlist;	\/* List of free memory blocks		*\/$/;"	v	typeref:struct:memblk
memmark	include/mark.h	/^typedef	int32	memmark[1];	\/* Declare a memory mark to be an array	*\/$/;"	t	typeref:typename:int32[1]
memset	lib/memset.c	/^void	*memset($/;"	f	typeref:typename:void *
message	include/stddef.h	/^typedef int message;            \/**< message passing content            *\/$/;"	t	typeref:typename:int
minheap	system/meminit.c	/^void	*minheap;		\/* Start of heap			*\/$/;"	v	typeref:typename:void *
mkbufpool	system/mkbufpool.c	/^bpid32	mkbufpool($/;"	f	typeref:typename:bpid32
mkmutex	system/mark.c	/^sid32	mkmutex;			\/* Mutual exclusion semaphore	*\/$/;"	v	typeref:typename:sid32
mlength	include/memory.h	/^	uint32	mlength;		\/* Size of blk (includes memblk)*\/$/;"	m	struct:memblk	typeref:typename:uint32
mmap_addr	include/multiboot.h	/^	uint32	mmap_addr;		\/* Address of the mmap regios	*\/$/;"	m	struct:mbootinfo	typeref:typename:uint32
mmap_length	include/multiboot.h	/^	uint32	mmap_length;		\/* Length(bytes) of mmap region	*\/$/;"	m	struct:mbootinfo	typeref:typename:uint32
mnext	include/memory.h	/^	struct	memblk	*mnext;		\/* Ptr to next free memory blk	*\/$/;"	m	struct:memblk	typeref:struct:memblk *
mode	include/flash.h	/^    byte mode;                 \/**< current mode of flash               *\/$/;"	m	struct:flash	typeref:typename:byte
mods_addr	include/multiboot.h	/^	uint32	mods_addr;		\/* Address to the module info	*\/$/;"	m	struct:mbootinfo	typeref:typename:uint32
mods_count	include/multiboot.h	/^	uint32	mods_count;		\/* No. of modules loaded	*\/$/;"	m	struct:mbootinfo	typeref:typename:uint32
mount	device/nam/mount.c	/^syscall	mount($/;"	f	typeref:typename:syscall
msr	include/uart.h	/^	volatile byte	msr;	\/* modem status register		*\/$/;"	m	struct:uart_csreg	typeref:typename:volatile byte
mtu	include/ether.h	/^	uint16	mtu;	    	\/* Maximum transmission unit (payload)  *\/$/;"	m	struct:ethcblk	typeref:typename:uint16
namcpy	device/nam/nammap.c	/^status	namcpy($/;"	f	typeref:typename:status
name	include/flash.h	/^    char *name;$/;"	m	struct:file	typeref:typename:char *
name	include/testsuite.h	/^    char	*name;		\/* Name of test case			*\/$/;"	m	struct:testcase	typeref:typename:char *
nametab	device/nam/naminit.c	/^struct	nmentry	nametab[NNAMES];	\/* Table of name mappings	*\/$/;"	v	typeref:struct:nmentry[]
naminit	device/nam/naminit.c	/^status	naminit(void)$/;"	f	typeref:typename:status
namlen	device/nam/mount.c	/^int32	namlen($/;"	f	typeref:typename:int32
nammap	device/nam/nammap.c	/^devcall	nammap($/;"	f	typeref:typename:devcall
namopen	device/nam/namopen.c	/^devcall	namopen($/;"	f	typeref:typename:devcall
namrepl	device/nam/nammap.c	/^did32	namrepl($/;"	f	typeref:typename:did32
nblocks	include/flash.h	/^    uint32 nblocks;              \/**< number of blocks within region      *\/$/;"	m	struct:flash_region	typeref:typename:uint32
nbpools	system/bufinit.c	/^bpid32	nbpools;$/;"	v	typeref:typename:bpid32
ncmd	shell/shell.c	/^uint32	ncmd = sizeof(cmdtab) \/ sizeof(struct cmdent);$/;"	v	typeref:typename:uint32
ndefers	include/resched.h	/^	int32	ndefers;	\/* Number of outstanding defers 	*\/$/;"	m	struct:defer	typeref:typename:int32
ndevice	include/name.h	/^	did32	ndevice;		\/* Device descriptor for prefix	*\/$/;"	m	struct:nmentry	typeref:typename:did32
net_ethdst	include/net.h	/^	byte	net_ethdst[ETH_ADDR_LEN];\/* Ethernet dest. MAC address	*\/$/;"	m	struct:netpacket	typeref:typename:byte[]
net_ethsrc	include/net.h	/^	byte	net_ethsrc[ETH_ADDR_LEN];\/* Ethernet source MAC address	*\/$/;"	m	struct:netpacket	typeref:typename:byte[]
net_ethtype	include/net.h	/^	uint16	net_ethtype;		\/* Ethernet type field		*\/$/;"	m	struct:netpacket	typeref:typename:uint16
net_iccksum	include/net.h	/^	  uint16	net_iccksum;	\/* ICMP message checksum	*\/$/;"	m	struct:netpacket::__anona5cac555010a::__anona5cac5550308	typeref:typename:uint16
net_iccode	include/net.h	/^	  byte		net_iccode;	\/* ICMP code field (0 for ping)	*\/$/;"	m	struct:netpacket::__anona5cac555010a::__anona5cac5550308	typeref:typename:byte
net_icdata	include/net.h	/^	  byte		net_icdata[1500-28];\/* ICMP payload (1500-above)*\/$/;"	m	struct:netpacket::__anona5cac555010a::__anona5cac5550308	typeref:typename:byte[]
net_icident	include/net.h	/^	  uint16	net_icident; 	\/* ICMP identifier		*\/$/;"	m	struct:netpacket::__anona5cac555010a::__anona5cac5550308	typeref:typename:uint16
net_icseq	include/net.h	/^	  uint16	net_icseq;	\/* ICMP sequence number		*\/$/;"	m	struct:netpacket::__anona5cac555010a::__anona5cac5550308	typeref:typename:uint16
net_ictype	include/net.h	/^	  byte		net_ictype;	\/* ICMP message type		*\/$/;"	m	struct:netpacket::__anona5cac555010a::__anona5cac5550308	typeref:typename:byte
net_init	net/net.c	/^void	net_init (void)$/;"	f	typeref:typename:void
net_ipcksum	include/net.h	/^	uint16	net_ipcksum;		\/* IP checksum			*\/$/;"	m	struct:netpacket	typeref:typename:uint16
net_ipdst	include/net.h	/^	uint32	net_ipdst;		\/* IP destination address	*\/$/;"	m	struct:netpacket	typeref:typename:uint32
net_ipfrag	include/net.h	/^	uint16	net_ipfrag;		\/* IP flags & fragment offset	*\/$/;"	m	struct:netpacket	typeref:typename:uint16
net_ipid	include/net.h	/^	uint16	net_ipid;		\/* IP datagram ID		*\/$/;"	m	struct:netpacket	typeref:typename:uint16
net_iplen	include/net.h	/^	uint16	net_iplen;		\/* IP total packet length	*\/$/;"	m	struct:netpacket	typeref:typename:uint16
net_ipproto	include/net.h	/^	byte	net_ipproto;		\/* IP protocol (actually type)	*\/$/;"	m	struct:netpacket	typeref:typename:byte
net_ipsrc	include/net.h	/^	uint32	net_ipsrc;		\/* IP source address		*\/$/;"	m	struct:netpacket	typeref:typename:uint32
net_iptos	include/net.h	/^	byte	net_iptos;		\/* IP type of service		*\/$/;"	m	struct:netpacket	typeref:typename:byte
net_ipttl	include/net.h	/^	byte	net_ipttl;		\/* IP time-to-live		*\/$/;"	m	struct:netpacket	typeref:typename:byte
net_ipvh	include/net.h	/^	byte	net_ipvh;		\/* IP version and hdr length	*\/$/;"	m	struct:netpacket	typeref:typename:byte
net_udpcksum	include/net.h	/^	  uint16	net_udpcksum;	\/* UDP checksum			*\/$/;"	m	struct:netpacket::__anona5cac555010a::__anona5cac5550208	typeref:typename:uint16
net_udpdata	include/net.h	/^	  byte		net_udpdata[1500-28];\/* UDP payload (1500-above)*\/$/;"	m	struct:netpacket::__anona5cac555010a::__anona5cac5550208	typeref:typename:byte[]
net_udpdport	include/net.h	/^	  uint16	net_udpdport;	\/* UDP destination protocol port*\/$/;"	m	struct:netpacket::__anona5cac555010a::__anona5cac5550208	typeref:typename:uint16
net_udplen	include/net.h	/^	  uint16	net_udplen;	\/* UDP total length		*\/$/;"	m	struct:netpacket::__anona5cac555010a::__anona5cac5550208	typeref:typename:uint16
net_udpsport	include/net.h	/^	  uint16 	net_udpsport;	\/* UDP source protocol port	*\/$/;"	m	struct:netpacket::__anona5cac555010a::__anona5cac5550208	typeref:typename:uint16
netbufpool	net/net.c	/^bpid32	netbufpool;$/;"	v	typeref:typename:bpid32
netin	net/net.c	/^process	netin ()$/;"	f	typeref:typename:process
netpacket	include/net.h	/^struct	netpacket	{$/;"	s
netportseed	net/net.c	/^uint64	netportseed;$/;"	v	typeref:typename:uint64
network	include/net.h	/^struct	network	{			\/* Network information		*\/$/;"	s
newpid	system/create.c	/^local	pid32	newpid(void)$/;"	f	typeref:typename:local pid32
newqueue	system/newqueue.c	/^qid16	newqueue(void)$/;"	f	typeref:typename:qid16
newsem	system/semcreate.c	/^local	sid32	newsem(void)$/;"	f	typeref:typename:local sid32
newversion	compile/Makefile	/^newversion:$/;"	t
nlog_blocks	include/flash.h	/^    uint32 nlog_blocks;          \/**< number of logical blocks on disk    *\/$/;"	m	struct:flash	typeref:typename:uint32
nmarks	system/mark.c	/^int32	nmarks;				\/* Number of marked locations	*\/$/;"	v	typeref:typename:int32
nmentry	include/name.h	/^struct	nmentry	{			\/* Definition of prefix table	*\/$/;"	s
nml_int_status	include/sdmc.h	/^	uint16	nml_int_status;		\/* normal interrupt status register 	*\/$/;"	m	struct:sdmc_csreg	typeref:typename:uint16
nnames	device/nam/naminit.c	/^int32	nnames;				\/* Number of entries allocated	*\/$/;"	v	typeref:typename:int32
nonempty	include/queue.h	/^#define	nonempty(/;"	d
notmarked	system/mark.c	/^syscall	notmarked(memmark loc)$/;"	f	typeref:typename:syscall
nout	include/ethloop.h	/^    uint32 nout;                      \/**< number of packets written          *\/$/;"	m	struct:ethloop	typeref:typename:uint32
nprefix	include/name.h	/^	char	nprefix[NM_PRELEN];	\/* Null-terminated prefix	*\/$/;"	m	struct:nmentry	typeref:typename:char[]
nregions	include/flash.h	/^    uint16 nregions;            \/**< number of regions on device         *\/$/;"	m	struct:flash	typeref:typename:uint16
nreplace	include/name.h	/^	char	nreplace[NM_REPLLEN];	\/* Null-terminated replacement	*\/$/;"	m	struct:nmentry	typeref:typename:char[]
nrm_int_sig_en	include/sdmc.h	/^	uint16	nrm_int_sig_en;		\/* normal interrupt signal enable register *\/$/;"	m	struct:sdmc_csreg	typeref:typename:uint16
nrm_int_status_en	include/sdmc.h	/^	uint16	nrm_int_status_en;	\/* normal interrupt status enable 	*\/$/;"	m	struct:sdmc_csreg	typeref:typename:uint16
nscount	include/dns.h	/^	uint16	nscount;		\/* No of Name Server RRs	*\/$/;"	m	struct:dnspkt	typeref:typename:uint16
ntim2xtim	include/date.h	/^#define	ntim2xtim(/;"	d
ntohl	include/prototypes.h	/^#define	ntohl(/;"	d
ntohs	include/prototypes.h	/^#define	ntohs(/;"	d
ntp	system/getutime.c	/^	struct	ntp {			\/* Format of an NTP message	*\/$/;"	s	function:getutime	file:
ntpserver	include/net.h	/^	uint32	ntpserver;		\/* NTP (time) server address	*\/$/;"	m	struct:network	typeref:typename:uint32
nulluser	system/initialize.c	/^void	nulluser()$/;"	f	typeref:typename:void
nulluser	system/start.S	/^	.globl	nulluser$/;"	s
number	config/config.y	/^number:		INTEGER { $$ = config_atoi(yytext, yyleng); }$/;"	l
objects	compile/Makefile	/^objects: $(LD_LIST)$/;"	t
offsets	include/flash.h	/^    uint32 offsets[3];            \/**< Partition offsets from header start *\/$/;"	m	struct:trx_header	typeref:typename:uint32[3]
opcode	include/dns.h	/^		byte	opcode:4;	\/* Operation Code		*\/$/;"	m	struct:dnspkt::__anona51abb730108	typeref:typename:byte:4
open	system/open.c	/^syscall	open($/;"	f	typeref:typename:syscall
oritimestamp	system/getutime.c	/^		uint32	oritimestamp[2];\/* Originate timestamp		*\/$/;"	m	struct:getutime::ntp	typeref:typename:uint32[2]	file:
osem	include/ether.h	/^	sid32	osem; 		\/* Semaphore for Ethernet output	*\/$/;"	m	struct:ethcblk	typeref:typename:sid32
outPool	include/ether.h	/^	int16	outPool;	\/* Buffer pool ID for output buffers	*\/$/;"	m	struct:ethcblk	typeref:typename:int16
outb	system/start.S	/^	.globl	outb$/;"	s
outb	system/start.S	/^outb:	movl	4(%esp), %edx$/;"	l
outl	system/start.S	/^	.globl	outl$/;"	s
outl	system/start.S	/^outl:	movl	4(%esp), %edx$/;"	l
outsw	system/start.S	/^	.globl	outsw$/;"	s
outsw	system/start.S	/^outsw:$/;"	l
outw	system/start.S	/^	.globl	outw$/;"	s
outw	system/start.S	/^outw:	movl	4(%esp), %edx$/;"	l
padding	include/pci.h	/^    unsigned char   padding[5];         \/* all zeros                         *\/$/;"	m	struct:bios32	typeref:typename:unsigned char[5]
panic	system/panic.c	/^void	panic ($/;"	f	typeref:typename:void
parseval	shell/xsh_memdump.c	/^static	uint32	parseval($/;"	f	typeref:typename:uint32	file:
pause	system/intr.S	/^	.globl	pause$/;"	s
pause	system/intr.S	/^pause:$/;"	l
pavail	include/pipe.h	/^	int32	pavail;		\/* Available characters during drain	*\/$/;"	m	struct:pipecblk	typeref:typename:int32
pbuf	include/pipe.h	/^	byte	pbuf[PIPE_BUF_SIZE]; \/* Buffer for the pipe		*\/$/;"	m	struct:pipecblk	typeref:typename:byte[]
pci_bios_read_config_byte	system/pci.c	/^int pci_bios_read_config_byte(uint32 dev, int where, unsigned char *value)$/;"	f	typeref:typename:int
pci_bios_read_config_dword	system/pci.c	/^int pci_bios_read_config_dword(uint32 dev, int where, uint32 *value)$/;"	f	typeref:typename:int
pci_bios_read_config_word	system/pci.c	/^int pci_bios_read_config_word(uint32 dev, int where, unsigned short *value)$/;"	f	typeref:typename:int
pci_bios_write_config_byte	system/pci.c	/^int pci_bios_write_config_byte(uint32 dev, int where, unsigned char value)$/;"	f	typeref:typename:int
pci_bios_write_config_dword	system/pci.c	/^int pci_bios_write_config_dword(uint32 dev, int where, uint32 value)$/;"	f	typeref:typename:int
pci_bios_write_config_word	system/pci.c	/^int pci_bios_write_config_word(uint32 dev, int where, unsigned short value)$/;"	f	typeref:typename:int
pci_indirect	system/pci.c	/^} pci_indirect = { 0, 0+5*0x08 \/* 0x10  KERNEL_CS *\/ };$/;"	v	typeref:struct:__anon6a33e0860208
pci_init	system/pci.c	/^int32	pci_init(void)$/;"	f	typeref:typename:int32
pcibios_entry	system/pci.c	/^static long pcibios_entry = 0;$/;"	v	typeref:typename:long	file:
pcibios_init	system/pci.c	/^int pcibios_init(void)$/;"	f	typeref:typename:int
pcidev	include/ether.h	/^	uint32	pcidev;		\/* PCI device number			*\/$/;"	m	struct:ethcblk	typeref:typename:uint32
pcsem	include/pipe.h	/^	sid32	pcsem;		\/* Consumer semaphore for the pipe	*\/$/;"	m	struct:pipecblk	typeref:typename:sid32
pdat_entry_desc	include/quark_pdat.h	/^	char	pdat_entry_desc[10];  \/* Description string of the platform entry *\/$/;"	m	struct:quark_pdat_entry	typeref:typename:char[10]
pdat_entry_id	include/quark_pdat.h	/^	uint16	pdat_entry_id;        \/* Type identifier for the platform data entry *\/$/;"	m	struct:quark_pdat_entry	typeref:typename:uint16
pdat_entry_len	include/quark_pdat.h	/^	uint16	pdat_entry_len;       \/* Length in bytes of the platform entry (not including the entry/;"	m	struct:quark_pdat_entry	typeref:typename:uint16
pdat_entry_ver	include/quark_pdat.h	/^	uint16	pdat_entry_ver;       \/* Version of the platform entry *\/$/;"	m	struct:quark_pdat_entry	typeref:typename:uint16
pdevid	include/pipe.h	/^	did32	pdevid;		\/* Device ID of this pseudo device	*\/$/;"	m	struct:pipecblk	typeref:typename:did32
pdump	net/pdump.c	/^void	pdump(struct  netpacket *pptr)$/;"	f	typeref:typename:void
pdumph	net/pdump.c	/^void	pdumph(struct  netpacket *pptr)$/;"	f	typeref:typename:void
phead	include/pipe.h	/^	int32	phead;		\/* Index of next byte in pbuf to read	*\/$/;"	m	struct:pipecblk	typeref:typename:int32
phy	include/ether.h	/^	struct	dentry	*phy;	\/* physical eth device for Tx DMA 	*\/$/;"	m	struct:ethcblk	typeref:struct:dentry *
physbase	compile/ld.script	/^physbase = 0x100000;$/;"	s
pid32	include/kernel.h	/^typedef	int32	pid32;		\/* Process ID				*\/$/;"	t	typeref:typename:int32
pipe_close	device/pipe/pipe_close.c	/^devcall	pipe_close ($/;"	f	typeref:typename:devcall
pipe_getc	device/pipe/pipe_getc.c	/^devcall	pipe_getc($/;"	f	typeref:typename:devcall
pipe_init	device/pipe/pipe_init.c	/^devcall	pipe_init ($/;"	f	typeref:typename:devcall
pipe_open	device/pipe/pipe_open.c	/^devcall	pipe_open($/;"	f	typeref:typename:devcall
pipe_putc	device/pipe/pipe_putc.c	/^devcall	pipe_putc($/;"	f	typeref:typename:devcall
pipe_read	device/pipe/pipe_read.c	/^devcall	pipe_read($/;"	f	typeref:typename:devcall
pipe_write	device/pipe/pipe_write.c	/^devcall	pipe_write($/;"	f	typeref:typename:devcall
pipecblk	include/pipe.h	/^struct	pipecblk {$/;"	s
pipetab	device/pipe/pipe_init.c	/^struct	pipecblk pipetab[Npip];$/;"	v	typeref:struct:pipecblk[]
pktlen	include/ethloop.h	/^    int pktlen[ELOOP_NBUF];         \/**< length of packet in buffer         *\/$/;"	m	struct:ethloop	typeref:typename:int[]
poll	system/getutime.c	/^		byte	poll;		\/* Poll interval		*\/$/;"	m	struct:getutime::ntp	typeref:typename:byte	file:
poolid	include/ethloop.h	/^    int poolid;                     \/**< poolid for the buffer pool         *\/$/;"	m	struct:ethloop	typeref:typename:int
porttab	system/ptinit.c	/^struct	ptentry	porttab[NPORTS];	\/* Port table			*\/$/;"	v	typeref:struct:ptentry[]
ppsem	include/pipe.h	/^	sid32	ppsem;		\/* Producer semaphore for the pipe	*\/$/;"	m	struct:pipecblk	typeref:typename:sid32
prcount	system/initialize.c	/^int	prcount;		\/* Total number of live processes	*\/$/;"	v	typeref:typename:int
prdesc	include/process.h	/^	int16	prdesc[NDESC];	\/* Device descriptors for process	*\/$/;"	m	struct:procent	typeref:typename:int16[]
pre_state	include/sdmc.h	/^	uint32	pre_state;		\/* present state register 		*\/$/;"	m	struct:sdmc_csreg	typeref:typename:uint32
precision	system/getutime.c	/^		byte	precision;	\/* Precision			*\/$/;"	m	struct:getutime::ntp	typeref:typename:byte	file:
preempt	system/clkinit.c	/^uint32	preempt;		\/* Preemption counter			*\/$/;"	v	typeref:typename:uint32
preset_value_0	include/sdmc.h	/^	uint16	preset_value_0;		\/* initialization preset values register *\/$/;"	m	struct:sdmc_csreg	typeref:typename:uint16
preset_value_1	include/sdmc.h	/^	uint16	preset_value_1;		\/* default speed preset values register *\/$/;"	m	struct:sdmc_csreg	typeref:typename:uint16
preset_value_2	include/sdmc.h	/^	uint16	preset_value_2;		\/* high speed preset values register *\/$/;"	m	struct:sdmc_csreg	typeref:typename:uint16
preset_value_3	include/sdmc.h	/^	uint16	preset_value_3;		\/* sdr12 preset values register *\/$/;"	m	struct:sdmc_csreg	typeref:typename:uint16
preset_value_4	include/sdmc.h	/^	uint16	preset_value_4;		\/* sdr25 preset values register *\/$/;"	m	struct:sdmc_csreg	typeref:typename:uint16
preset_value_5	include/sdmc.h	/^	uint16	preset_value_5;		\/* sdr50 preset values register *\/$/;"	m	struct:sdmc_csreg	typeref:typename:uint16
preset_value_6	include/sdmc.h	/^	uint16	preset_value_6;		\/* sdr104 preset values register *\/$/;"	m	struct:sdmc_csreg	typeref:typename:uint16
preset_value_7	include/sdmc.h	/^	uint16	preset_value_7;		\/* ddr50 preset values register *\/$/;"	m	struct:sdmc_csreg	typeref:typename:uint16
prhasmsg	include/process.h	/^	bool8	prhasmsg;	\/* Nonzero iff msg is valid		*\/$/;"	m	struct:procent	typeref:typename:bool8
pri16	include/kernel.h	/^typedef	int16	pri16;		\/* Process priority			*\/$/;"	t	typeref:typename:int16
printFreeList	shell/xsh_memstat.c	/^static void printFreeList(void)$/;"	f	typeref:typename:void	file:
printMemUse	shell/xsh_memstat.c	/^static void printMemUse(void)$/;"	f	typeref:typename:void	file:
printf	lib/printf.c	/^int	printf($/;"	f	typeref:typename:int
prmsg	include/process.h	/^	umsg32	prmsg;		\/* Message sent to this process		*\/$/;"	m	struct:procent	typeref:typename:umsg32
prname	include/process.h	/^	char	prname[PNMLEN];	\/* Process name				*\/$/;"	m	struct:procent	typeref:typename:char[]
procent	include/process.h	/^struct procent {		\/* Entry in the process table		*\/$/;"	s
process	include/kernel.h	/^typedef int32	process;	\/* Top-level function of a process	*\/$/;"	t	typeref:typename:int32
proctab	system/initialize.c	/^struct	procent	proctab[NPROC];	\/* Process table			*\/$/;"	v	typeref:struct:procent[]
proms	include/ether.h	/^	int16 	proms; 		\/* Nonzero => promiscuous mode 		*\/$/;"	m	struct:ethcblk	typeref:typename:int16
prparent	include/process.h	/^	pid32	prparent;	\/* ID of the creating process		*\/$/;"	m	struct:procent	typeref:typename:pid32
prprio	include/process.h	/^	pri16	prprio;		\/* Process priority			*\/$/;"	m	struct:procent	typeref:typename:pri16
prsem	include/process.h	/^	sid32	prsem;		\/* Semaphore on which process waits	*\/$/;"	m	struct:procent	typeref:typename:sid32
prstate	include/process.h	/^	uint16	prstate;	\/* Process state: PR_CURR, etc.		*\/$/;"	m	struct:procent	typeref:typename:uint16
prstkbase	include/process.h	/^	char	*prstkbase;	\/* Base of run time stack		*\/$/;"	m	struct:procent	typeref:typename:char *
prstklen	include/process.h	/^	uint32	prstklen;	\/* Stack length in bytes		*\/$/;"	m	struct:procent	typeref:typename:uint32
prstkptr	include/process.h	/^	char	*prstkptr;	\/* Saved stack pointer			*\/$/;"	m	struct:procent	typeref:typename:char *
pseg	system/i386.c	/^void	pseg(struct sd *psd)$/;"	f	typeref:typename:void
pstate	include/pipe.h	/^	int32	pstate;		\/* State of this pipe device		*\/$/;"	m	struct:pipecblk	typeref:typename:int32
ptail	include/pipe.h	/^	int32	ptail;		\/* Index of next byte in pbuf to write	*\/$/;"	m	struct:pipecblk	typeref:typename:int32
ptcount	system/ptcount.c	/^int32	ptcount($/;"	f	typeref:typename:int32
ptcreate	system/ptcreate.c	/^syscall	ptcreate($/;"	f	typeref:typename:syscall
ptdelete	system/ptdelete.c	/^syscall	ptdelete($/;"	f	typeref:typename:syscall
ptentry	include/ports.h	/^struct	ptentry	{			\/* Entry in the port table	*\/$/;"	s
ptfree	system/ptinit.c	/^struct	ptnode	*ptfree;		\/* List of free message nodes	*\/$/;"	v	typeref:struct:ptnode *
pthead	include/ports.h	/^	struct	ptnode	*pthead;	\/* List of message pointers	*\/$/;"	m	struct:ptentry	typeref:struct:ptnode *
ptinit	system/ptinit.c	/^syscall	ptinit($/;"	f	typeref:typename:syscall
ptmaxcnt	include/ports.h	/^	uint16	ptmaxcnt;		\/* Max messages to be queued	*\/$/;"	m	struct:ptentry	typeref:typename:uint16
ptmsg	include/ports.h	/^	uint32	ptmsg;			\/* A one-word message		*\/$/;"	m	struct:ptnode	typeref:typename:uint32
ptnext	include/ports.h	/^	struct	ptnode	*ptnext;	\/* Pointer to next node on list	*\/$/;"	m	struct:ptnode	typeref:struct:ptnode *
ptnextid	system/ptinit.c	/^int32	ptnextid;			\/* Next table entry to try	*\/$/;"	v	typeref:typename:int32
ptnode	include/ports.h	/^struct	ptnode	{			\/* Node on list of messages 	*\/$/;"	s
ptrecv	system/ptrecv.c	/^uint32	ptrecv($/;"	f	typeref:typename:uint32
ptreset	system/ptreset.c	/^syscall	ptreset($/;"	f	typeref:typename:syscall
ptrsem	include/ports.h	/^	sid32	ptrsem;			\/* Receiver semaphore		*\/$/;"	m	struct:ptentry	typeref:typename:sid32
ptsend	system/ptsend.c	/^syscall	ptsend($/;"	f	typeref:typename:syscall
ptseq	include/ports.h	/^	int32	ptseq;			\/* Sequence changed at creation	*\/$/;"	m	struct:ptentry	typeref:typename:int32
ptssem	include/ports.h	/^	sid32	ptssem;			\/* Sender semaphore		*\/$/;"	m	struct:ptentry	typeref:typename:sid32
ptstate	include/ports.h	/^	uint16	ptstate;		\/* Port state (FREE\/LIMBO\/ALLOC)*\/$/;"	m	struct:ptentry	typeref:typename:uint16
pttail	include/ports.h	/^	struct	ptnode	*pttail;	\/* Tail of message list		*\/$/;"	m	struct:ptentry	typeref:struct:ptnode *
putc	system/putc.c	/^syscall	putc($/;"	f	typeref:typename:syscall
putchar	lib/putchar.c	/^int	putchar($/;"	f	typeref:typename:int
pwr_ctl	include/sdmc.h	/^	uint8	pwr_ctl;		\/* power control register 		*\/$/;"	m	struct:sdmc_csreg	typeref:typename:uint8
qclass	include/dns.h	/^	uint16	*qclass;		\/* Question Class		*\/$/;"	m	struct:dns_q	typeref:typename:uint16 *
qentry	include/queue.h	/^struct	qentry	{		\/* One per process plus two per list	*\/$/;"	s
qid16	include/kernel.h	/^typedef	int16	qid16;		\/* Queue ID				*\/$/;"	t	typeref:typename:int16
qkey	include/queue.h	/^	int32	qkey;		\/* Key on which the queue is ordered	*\/$/;"	m	struct:qentry	typeref:typename:int32
qname	include/dns.h	/^	char	*qname;			\/* Domain Name in the query	*\/$/;"	m	struct:dns_q	typeref:typename:char *
qnext	include/queue.h	/^	qid16	qnext;		\/* Index of next process or tail	*\/$/;"	m	struct:qentry	typeref:typename:qid16
qprev	include/queue.h	/^	qid16	qprev;		\/* Index of previous process or head	*\/$/;"	m	struct:qentry	typeref:typename:qid16
qr	include/dns.h	/^		byte	qr:1;		\/* Query=0, Response=1		*\/$/;"	m	struct:dnspkt::__anona51abb730108	typeref:typename:byte:1
qs1	lib/qsort.c	/^static void	qs1($/;"	f	typeref:typename:void	file:
qscmp	lib/qsort.c	/^static int (*qscmp) (char *, char *);$/;"	v	typeref:typename:int (*)(char *,char *)	file:
qses	lib/qsort.c	/^static int qses;$/;"	v	typeref:typename:int	file:
qsexc	lib/qsort.c	/^static void	qsexc($/;"	f	typeref:typename:void	file:
qsort	lib/qsort.c	/^void	qsort($/;"	f	typeref:typename:void
qstexc	lib/qsort.c	/^static void	qstexc($/;"	f	typeref:typename:void	file:
qtype	include/dns.h	/^	uint16	*qtype;			\/* Question Type		*\/$/;"	m	struct:dns_q	typeref:typename:uint16 *
quark_pdat_crc	include/quark_pdat.h	/^	uint32	quark_pdat_crc;       \/* CRC value for the platform data (not including the header) *\/$/;"	m	struct:quark_pdat_header	typeref:typename:uint32
quark_pdat_entry	include/quark_pdat.h	/^struct quark_pdat_entry {$/;"	s
quark_pdat_header	include/quark_pdat.h	/^struct quark_pdat_header {$/;"	s
quark_pdat_len	include/quark_pdat.h	/^	uint32 	quark_pdat_len;       \/* Size in bytes of the platform data (not including the header /;"	m	struct:quark_pdat_header	typeref:typename:uint32
quark_pdat_magic	include/quark_pdat.h	/^	char 	quark_pdat_magic[4];  \/* Platform header signature *\/$/;"	m	struct:quark_pdat_header	typeref:typename:char[4]
qucount	include/dns.h	/^	uint16	qucount;		\/* No. of Questions		*\/$/;"	m	struct:dnspkt	typeref:typename:uint16
queuehead	include/queue.h	/^#define	queuehead(/;"	d
queuetab	system/queue.c	/^struct qentry	queuetab[NQENT];	\/* Table of process queues	*\/$/;"	v	typeref:struct:qentry[]
queuetail	include/queue.h	/^#define	queuetail(/;"	d
ra	include/dns.h	/^		byte	ra:1;		\/* Recursion Available		*\/$/;"	m	struct:dnspkt::__anona51abb730208	typeref:typename:byte:1
ramclose	device/ram/ramclose.c	/^devcall	ramclose ($/;"	f	typeref:typename:devcall
ramdisk	include/ramdisk.h	/^struct	ramdisk	{$/;"	s
raminit	device/ram/raminit.c	/^devcall	raminit ($/;"	f	typeref:typename:devcall
ramopen	device/ram/ramopen.c	/^devcall	ramopen ($/;"	f	typeref:typename:devcall
ramread	device/ram/ramread.c	/^devcall	ramread ($/;"	f	typeref:typename:devcall
ramwrite	device/ram/ramwrite.c	/^devcall	ramwrite ($/;"	f	typeref:typename:devcall
rand	lib/rand.c	/^int	rand()$/;"	f	typeref:typename:int
rand_r	lib/rand.c	/^int	rand_r($/;"	f	typeref:typename:int
rand_seed	lib/rand.c	/^static unsigned int rand_seed = 1;$/;"	v	typeref:typename:unsigned int	file:
rbr	include/uart.h	/^#define	rbr	/;"	d
rca	include/sdmc.h	/^	uint32	rca;			\/* relative card address		*\/$/;"	m	struct:sdmcblk	typeref:typename:uint32
rclass	include/dns.h	/^	uint16	*rclass;		\/* Resource Record Class	*\/$/;"	m	struct:dns_rr	typeref:typename:uint16 *
rcode	include/dns.h	/^		byte	rcode:4;	\/* Response Code		*\/$/;"	m	struct:dnspkt::__anona51abb730208	typeref:typename:byte:4
rd	include/dns.h	/^		byte	rd:1;		\/* Recursion Desired		*\/$/;"	m	struct:dnspkt::__anona51abb730108	typeref:typename:byte:1
rd_blk	include/rdisksys.h	/^	uint32	rd_blk;			\/* Block number that was read	*\/$/;"	m	struct:rd_msg_rres	typeref:typename:RD_MSG_HDR uint32
rd_blk	include/rdisksys.h	/^	uint32	rd_blk;			\/* Block number that was written*\/$/;"	m	struct:rd_msg_wres	typeref:typename:RD_MSG_HDR uint32
rd_blk	include/rdisksys.h	/^	uint32	rd_blk;			\/* Block number to read		*\/$/;"	m	struct:rd_msg_rreq	typeref:typename:RD_MSG_HDR uint32
rd_blk	include/rdisksys.h	/^	uint32	rd_blk;			\/* Block number to write	*\/$/;"	m	struct:rd_msg_wreq	typeref:typename:RD_MSG_HDR uint32
rd_blknum	include/rdisksys.h	/^	uint32	rd_blknum;		\/* Disk block number to use	*\/$/;"	m	struct:rdqnode	typeref:typename:uint32
rd_blknum	include/rdisksys.h	/^	uint32	rd_blknum;		\/* Disk block number to use	*\/$/;"	m	struct:rdsent	typeref:typename:uint32
rd_blknum	include/rdisksys.h	/^	uint32	rd_blknum;		\/* Number of this disk block	*\/$/;"	m	struct:rdcnode	typeref:typename:uint32
rd_callbuf	include/rdisksys.h	/^	char	*rd_callbuf;		\/* Address of caller's buffer	*\/$/;"	m	struct:rdqnode	typeref:typename:char *
rd_callbuf	include/rdisksys.h	/^	char	*rd_callbuf;		\/* Address of caller's buffer	*\/$/;"	m	struct:rdsent	typeref:typename:char *
rd_cfree	include/rdisksys.h	/^	struct	rdcnode	*rd_cfree;	\/* Free list of cache nodes	*\/$/;"	m	struct:rdscblk	typeref:struct:rdcnode *
rd_chead	include/rdisksys.h	/^	struct	rdcnode	*rd_chead;	\/* Head of cache		*\/$/;"	m	struct:rdscblk	typeref:struct:rdcnode *
rd_comproc	include/rdisksys.h	/^	pid32	rd_comproc;		\/* Process ID of comm. process	*\/$/;"	m	struct:rdscblk	typeref:typename:pid32
rd_ctail	include/rdisksys.h	/^	struct	rdcnode	*rd_ctail;	\/* Tail of cache		*\/$/;"	m	struct:rdscblk	typeref:struct:rdcnode *
rd_data	include/rdisksys.h	/^	byte	rd_data[RD_BLKSIZ];	\/* Data for the disk block	*\/$/;"	m	struct:rdcnode	typeref:typename:byte[]
rd_data	include/rdisksys.h	/^	char	rd_data[RD_BLKSIZ];	\/* Array containing one block	*\/$/;"	m	struct:rd_msg_rres	typeref:typename:char[]
rd_data	include/rdisksys.h	/^	char	rd_data[RD_BLKSIZ];	\/* Array containing one block	*\/$/;"	m	struct:rd_msg_wreq	typeref:typename:char[]
rd_id	include/rdisksys.h	/^	char	rd_id[RD_IDLEN];	\/* Disk ID currently being used	*\/$/;"	m	struct:rdscblk	typeref:typename:char[]
rd_loc_port	include/rdisksys.h	/^	uint16	rd_loc_port;		\/* Local (client) UPD port	*\/$/;"	m	struct:rdscblk	typeref:typename:uint16
rd_msg_creq	include/rdisksys.h	/^struct	rd_msg_creq	{		\/* Remote disk close request	*\/$/;"	s
rd_msg_cres	include/rdisksys.h	/^struct	rd_msg_cres	{		\/* Remote disk close response	*\/$/;"	s
rd_msg_dreq	include/rdisksys.h	/^struct	rd_msg_dreq	{		\/* Remote disk delete request	*\/$/;"	s
rd_msg_dres	include/rdisksys.h	/^struct	rd_msg_dres	{		\/* Remote disk delete response	*\/$/;"	s
rd_msg_hdr	include/rdisksys.h	/^struct	rd_msg_hdr {			\/* Header fields present in each*\/$/;"	s
rd_msg_oreq	include/rdisksys.h	/^struct	rd_msg_oreq	{		\/* Remote disk open request	*\/$/;"	s
rd_msg_ores	include/rdisksys.h	/^struct	rd_msg_ores	{		\/* Remote disk open response	*\/$/;"	s
rd_msg_rreq	include/rdisksys.h	/^struct	rd_msg_rreq	{		\/* Remote disk read request	*\/$/;"	s
rd_msg_rres	include/rdisksys.h	/^struct	rd_msg_rres	{		\/* Remote disk read reply	*\/$/;"	s
rd_msg_wreq	include/rdisksys.h	/^struct	rd_msg_wreq	{		\/* Remote disk write request	*\/$/;"	s
rd_msg_wres	include/rdisksys.h	/^struct	rd_msg_wres	{		\/* Remote disk write response	*\/$/;"	s
rd_next	include/rdisksys.h	/^	struct	rdcnode	*rd_next;	\/* Pointer to next node		*\/$/;"	m	struct:rdcnode	typeref:struct:rdcnode *
rd_next	include/rdisksys.h	/^	struct	rdqnode	*rd_next;	\/* Pointer to next node		*\/$/;"	m	struct:rdqnode	typeref:struct:rdqnode *
rd_op	include/rdisksys.h	/^	int32	rd_op;			\/* Operation - read\/write\/sync	*\/$/;"	m	struct:rdqnode	typeref:typename:int32
rd_op	include/rdisksys.h	/^	int32	rd_op;			\/* Operation - read\/write\/sync	*\/$/;"	m	struct:rdsent	typeref:typename:int32
rd_pid	include/rdisksys.h	/^	pid32	rd_pid;			\/* Process making the request	*\/$/;"	m	struct:rdqnode	typeref:typename:pid32
rd_pid	include/rdisksys.h	/^	pid32	rd_pid;			\/* Process that initiated the	*\/$/;"	m	struct:rdsent	typeref:typename:pid32
rd_prev	include/rdisksys.h	/^	struct	rdcnode	*rd_prev;	\/* Pointer to previous node	*\/$/;"	m	struct:rdcnode	typeref:struct:rdcnode *
rd_prev	include/rdisksys.h	/^	struct	rdqnode	*rd_prev;	\/* Pointer to previous node	*\/$/;"	m	struct:rdqnode	typeref:struct:rdqnode *
rd_qfree	include/rdisksys.h	/^	struct	rdqnode	*rd_qfree;	\/* Free list of request nodes	*\/$/;"	m	struct:rdscblk	typeref:struct:rdqnode *
rd_qhead	include/rdisksys.h	/^	struct	rdqnode	*rd_qhead;	\/* Head of request queue	*\/$/;"	m	struct:rdscblk	typeref:struct:rdqnode *
rd_qtail	include/rdisksys.h	/^	struct	rdqnode	*rd_qtail;	\/* Tail of request queue	*\/$/;"	m	struct:rdscblk	typeref:struct:rdqnode *
rd_registered	include/rdisksys.h	/^	bool8	rd_registered;		\/* Has UDP port been registered?*\/$/;"	m	struct:rdscblk	typeref:typename:bool8
rd_seq	include/rdisksys.h	/^	int32	rd_seq;			\/* Next sequence number to use	*\/$/;"	m	struct:rdscblk	typeref:typename:int32
rd_ser_ip	include/rdisksys.h	/^	uint32	rd_ser_ip;		\/* Server IP address		*\/$/;"	m	struct:rdscblk	typeref:typename:uint32
rd_ser_port	include/rdisksys.h	/^	uint16	rd_ser_port;		\/* Server UDP port		*\/$/;"	m	struct:rdscblk	typeref:typename:uint16
rd_sq	include/rdisksys.h	/^	struct	rdsent	rd_sq[RD_SSIZE];\/* Serial queue circular buffer	*\/$/;"	m	struct:rdscblk	typeref:struct:rdsent[]
rd_state	include/rdisksys.h	/^	int32	rd_state;		\/* State of device		*\/$/;"	m	struct:rdscblk	typeref:typename:int32
rd_udpslot	include/rdisksys.h	/^	int32	rd_udpslot;		\/* Registered UDP slot		*\/$/;"	m	struct:rdscblk	typeref:typename:int32
rd_wbuf	include/rdisksys.h	/^	char	rd_wbuf[RD_BLKSIZ];	\/* Data for a write operation	*\/$/;"	m	struct:rdqnode	typeref:typename:char[]
rdata	include/dns.h	/^	char	*rdata;			\/* Resource Record Data area	*\/$/;"	m	struct:dns_rr	typeref:typename:char *
rdcadd	device/rds/rdsqfcns.c	/^void rdcadd ($/;"	f	typeref:typename:void
rdcdump	device/rds/rdsqfcns.c	/^void rdcdump ($/;"	f	typeref:typename:void
rdcget	device/rds/rdsqfcns.c	/^int32	rdcget ($/;"	f	typeref:typename:int32
rdcnode	include/rdisksys.h	/^struct	rdcnode {			\/* Node in the cache		*\/$/;"	s
rdlen	include/dns.h	/^	uint16	*rdlen;			\/* Resource Record RD Length	*\/$/;"	m	struct:dns_rr	typeref:typename:uint16 *
rdqadd	device/rds/rdsqfcns.c	/^void rdqadd ($/;"	f	typeref:typename:void
rdqdump	device/rds/rdsqfcns.c	/^void rdqdump ($/;"	f	typeref:typename:void
rdqfree	device/rds/rdsqfcns.c	/^struct rdqnode * rdqfree($/;"	f	typeref:struct:rdqnode *
rdqnode	include/rdisksys.h	/^struct	rdqnode {			\/* Node in the request queue	*\/$/;"	s
rdsars	device/rds/rdsars.c	/^syscall	rdsars($/;"	f	typeref:typename:syscall
rdscblk	include/rdisksys.h	/^struct	rdscblk	{			\/* Remote disk control block	*\/$/;"	s
rdscomm	device/rds/rdscomm.c	/^status	rdscomm ($/;"	f	typeref:typename:status
rdscontrol	device/rds/rdscontrol.c	/^devcall	rdscontrol ($/;"	f	typeref:typename:devcall
rdscount	include/rdisksys.h	/^	int32	rdscount;		\/* Count serial queue items	*\/$/;"	m	struct:rdscblk	typeref:typename:int32
rdsent	include/rdisksys.h	/^struct	rdsent {			\/* Entry in the serial queue	*\/$/;"	s
rdshead	include/rdisksys.h	/^	int32	rdshead;		\/* Head of the serial queue	*\/$/;"	m	struct:rdscblk	typeref:typename:int32
rdsinit	device/rds/rdsinit.c	/^devcall	rdsinit ($/;"	f	typeref:typename:devcall
rdsopen	device/rds/rdsopen.c	/^devcall	rdsopen ($/;"	f	typeref:typename:devcall
rdsprocess	device/rds/rdsprocess.c	/^void	rdsprocess ($/;"	f	typeref:typename:void
rdsread	device/rds/rdsread.c	/^devcall	rdsread ($/;"	f	typeref:typename:devcall
rdstab	device/rds/rdsinit.c	/^struct	rdscblk	rdstab[Nrds];$/;"	v	typeref:struct:rdscblk[]
rdstail	include/rdisksys.h	/^	int32	rdstail;		\/* Tail of the serial queue	*\/$/;"	m	struct:rdscblk	typeref:typename:int32
rdswrite	device/rds/rdswrite.c	/^devcall	rdswrite ($/;"	f	typeref:typename:devcall
read	system/read.c	/^syscall	read($/;"	f	typeref:typename:syscall
ready	system/ready.c	/^status	ready($/;"	f	typeref:typename:status
readylist	system/ready.c	/^qid16	readylist;			\/* Index of ready list		*\/$/;"	v	typeref:typename:qid16
rebuild	compile/Makefile	/^rebuild: $(CONFC)$/;"	t
receive	system/receive.c	/^umsg32	receive(void)$/;"	f	typeref:typename:umsg32
rectimestamp	system/getutime.c	/^		uint32	rectimestamp[2];\/* Receive timestamp		*\/$/;"	m	struct:getutime::ntp	typeref:typename:uint32[2]	file:
recvclr	system/recvclr.c	/^umsg32	recvclr(void)$/;"	f	typeref:typename:umsg32
recvtime	system/recvtime.c	/^umsg32	recvtime($/;"	f	typeref:typename:umsg32
refid	system/getutime.c	/^		uint32	refid;		\/* Reference identifier		*\/$/;"	m	struct:getutime::ntp	typeref:typename:uint32	file:
reftimestamp	system/getutime.c	/^		uint32	reftimestamp[2];\/* Reference timestamp		*\/$/;"	m	struct:getutime::ntp	typeref:typename:uint32[2]	file:
region_size	include/flash.h	/^    uint32 region_size;          \/**< size of region in bytes             *\/$/;"	m	struct:flash_region	typeref:typename:uint32
region_start	include/flash.h	/^    uint32 region_start;         \/**< beginning of region in memory       *\/$/;"	m	struct:flash_region	typeref:typename:uint32
regions	include/flash.h	/^    struct flash_region regions[MAX_REGIONS];     \/**< region info.      *\/$/;"	m	struct:flash	typeref:struct:flash_region[]
resched	system/resched.c	/^void	resched(void)		\/* Assumes interrupts are disabled	*\/$/;"	f	typeref:typename:void
resched_cntl	system/resched.c	/^status	resched_cntl(		\/* Assumes interrupts are disabled	*\/$/;"	f	typeref:typename:status
resp_type_sel	include/sdmc.h	/^	uint16	resp_type_sel	:2;$/;"	m	struct:sdmc_cmd	typeref:typename:uint16:2
response0	include/sdmc.h	/^	uint32	response0;		\/* response register 0 			*\/$/;"	m	struct:sdmc_csreg	typeref:typename:uint32
response2	include/sdmc.h	/^	uint32	response2;		\/* response register 2 			*\/$/;"	m	struct:sdmc_csreg	typeref:typename:uint32
response4	include/sdmc.h	/^	uint32	response4;		\/* response register 4 			*\/$/;"	m	struct:sdmc_csreg	typeref:typename:uint32
response6	include/sdmc.h	/^	uint32	response6;		\/* response register 6 			*\/$/;"	m	struct:sdmc_csreg	typeref:typename:uint32
restore	system/intr.S	/^	.globl	restore$/;"	s
restore	system/intr.S	/^restore:$/;"	l
restore_flags	include/pci.h	/^#define restore_flags(/;"	d
resume	system/resume.c	/^syscall	resume($/;"	f	typeref:typename:syscall
revision	include/pci.h	/^    unsigned char   revision;           \/* should be 0x00                    *\/$/;"	m	struct:bios32	typeref:typename:unsigned char
rf_data	include/rfilesys.h	/^	char	rf_data[RF_DATALEN];	\/* Array containing data from	*\/$/;"	m	struct:rf_msg_rres	typeref:typename:char[]
rf_data	include/rfilesys.h	/^	char	rf_data[RF_DATALEN];	\/* Array containing data to be	*\/$/;"	m	struct:rf_msg_wreq	typeref:typename:char[]
rf_len	include/rfilesys.h	/^	uint32	rf_len;			\/* Number of bytes that follow	*\/$/;"	m	struct:rf_msg_rres	typeref:typename:uint32
rf_len	include/rfilesys.h	/^	uint32	rf_len;			\/* Number of bytes to read	*\/$/;"	m	struct:rf_msg_rreq	typeref:typename:uint32
rf_len	include/rfilesys.h	/^	uint32	rf_len;			\/* Number of bytes written	*\/$/;"	m	struct:rf_msg_wres	typeref:typename:uint32
rf_len	include/rfilesys.h	/^	uint32	rf_len;			\/* Number of valid bytes in	*\/$/;"	m	struct:rf_msg_wreq	typeref:typename:uint32
rf_loc_port	include/rfilesys.h	/^	uint16	rf_loc_port;		\/* Local (client) UPD port	*\/$/;"	m	struct:rfdata	typeref:typename:uint16
rf_mode	include/rfilesys.h	/^	int32	rf_mode;		\/* Xinu mode bits		*\/$/;"	m	struct:rf_msg_oreq	typeref:typename:RF_MSG_HDR int32
rf_mode	include/rfilesys.h	/^	int32	rf_mode;		\/* Xinu mode bits		*\/$/;"	m	struct:rf_msg_ores	typeref:typename:RF_MSG_HDR int32
rf_msg_creq	include/rfilesys.h	/^struct	rf_msg_creq	{		\/* Remote file close request	*\/$/;"	s
rf_msg_cres	include/rfilesys.h	/^struct	rf_msg_cres	{		\/* Remote file close response	*\/$/;"	s
rf_msg_dreq	include/rfilesys.h	/^struct	rf_msg_dreq	{		\/* Remote file delete request	*\/$/;"	s
rf_msg_dres	include/rfilesys.h	/^struct	rf_msg_dres	{		\/* Remote file delete response	*\/$/;"	s
rf_msg_hdr	include/rfilesys.h	/^struct	rf_msg_hdr {			\/* Header fields present in each*\/$/;"	s
rf_msg_mreq	include/rfilesys.h	/^struct	rf_msg_mreq	{		\/* Remote file mkdir request	*\/$/;"	s
rf_msg_mres	include/rfilesys.h	/^struct	rf_msg_mres	{		\/* Remote file mkdir response	*\/$/;"	s
rf_msg_oreq	include/rfilesys.h	/^struct	rf_msg_oreq	{		\/* Remote file open request	*\/$/;"	s
rf_msg_ores	include/rfilesys.h	/^struct	rf_msg_ores	{		\/* Remote file open response	*\/$/;"	s
rf_msg_rreq	include/rfilesys.h	/^struct	rf_msg_rreq	{		\/* Remote file read request	*\/$/;"	s
rf_msg_rres	include/rfilesys.h	/^struct	rf_msg_rres	{		\/* Remote file read reply	*\/$/;"	s
rf_msg_sreq	include/rfilesys.h	/^struct	rf_msg_sreq	{		\/* Remote file size request	*\/$/;"	s
rf_msg_sres	include/rfilesys.h	/^struct	rf_msg_sres	{		\/* Remote file status response	*\/$/;"	s
rf_msg_treq	include/rfilesys.h	/^struct	rf_msg_treq	{		\/* Remote file truncate request	*\/$/;"	s
rf_msg_tres	include/rfilesys.h	/^struct	rf_msg_tres	{		\/* Remote file truncate response*\/$/;"	s
rf_msg_wreq	include/rfilesys.h	/^struct	rf_msg_wreq	{		\/* Remote file write request	*\/$/;"	s
rf_msg_wres	include/rfilesys.h	/^struct	rf_msg_wres	{		\/* Remote file write response	*\/$/;"	s
rf_msg_xreq	include/rfilesys.h	/^struct	rf_msg_xreq	{		\/* Remote file rmdir request	*\/$/;"	s
rf_msg_xres	include/rfilesys.h	/^struct	rf_msg_xres	{		\/* Remote file rmdir response	*\/$/;"	s
rf_mutex	include/rfilesys.h	/^	sid32	rf_mutex;		\/* Mutual exclusion for access	*\/$/;"	m	struct:rfdata	typeref:typename:sid32
rf_pos	include/rfilesys.h	/^	uint32	rf_pos;			\/* Original position in file	*\/$/;"	m	struct:rf_msg_wres	typeref:typename:RF_MSG_HDR uint32
rf_pos	include/rfilesys.h	/^	uint32	rf_pos;			\/* Position in file		*\/$/;"	m	struct:rf_msg_rres	typeref:typename:RF_MSG_HDR uint32
rf_pos	include/rfilesys.h	/^	uint32	rf_pos;			\/* Position in file		*\/$/;"	m	struct:rf_msg_wreq	typeref:typename:RF_MSG_HDR uint32
rf_pos	include/rfilesys.h	/^	uint32	rf_pos;			\/* Position in file to read	*\/$/;"	m	struct:rf_msg_rreq	typeref:typename:RF_MSG_HDR uint32
rf_registered	include/rfilesys.h	/^	bool8	rf_registered;		\/* Has UDP port been registered?*\/$/;"	m	struct:rfdata	typeref:typename:bool8
rf_seq	include/rfilesys.h	/^	int32	rf_seq;			\/* Next sequence number to use	*\/$/;"	m	struct:rfdata	typeref:typename:int32
rf_ser_ip	include/rfilesys.h	/^	uint32	rf_ser_ip;		\/* Server IP address		*\/$/;"	m	struct:rfdata	typeref:typename:uint32
rf_ser_port	include/rfilesys.h	/^	uint16	rf_ser_port;		\/* Server UDP port		*\/$/;"	m	struct:rfdata	typeref:typename:uint16
rf_size	include/rfilesys.h	/^	uint32	rf_size;		\/* Size of file in bytes	*\/$/;"	m	struct:rf_msg_sres	typeref:typename:RF_MSG_HDR uint32
rf_udp_slot	include/rfilesys.h	/^	int32	rf_udp_slot;		\/* UDP slot to use		*\/$/;"	m	struct:rfdata	typeref:typename:int32
rfdata	include/rfilesys.h	/^struct	rfdata	{$/;"	s
rfdev	include/rfilesys.h	/^	int32	rfdev;			\/* Device number of this dev.	*\/$/;"	m	struct:rflcblk	typeref:typename:int32
rflcblk	include/rfilesys.h	/^struct	rflcblk	{$/;"	s
rflclose	device/rfs/rflclose.c	/^devcall	rflclose ($/;"	f	typeref:typename:devcall
rflgetc	device/rfs/rflgetc.c	/^devcall	rflgetc($/;"	f	typeref:typename:devcall
rflinit	device/rfs/rflinit.c	/^devcall	rflinit($/;"	f	typeref:typename:devcall
rflputc	device/rfs/rflputc.c	/^devcall	rflputc($/;"	f	typeref:typename:devcall
rflread	device/rfs/rflread.c	/^devcall	rflread ($/;"	f	typeref:typename:devcall
rflseek	device/rfs/rflseek.c	/^devcall	rflseek ($/;"	f	typeref:typename:devcall
rfltab	device/rfs/rflinit.c	/^struct	rflcblk	rfltab[Nrfl];		\/* Remote file control blocks	*\/$/;"	v	typeref:struct:rflcblk[]
rflwrite	device/rfs/rflwrite.c	/^devcall	rflwrite ($/;"	f	typeref:typename:devcall
rfmode	include/rfilesys.h	/^	uint32	rfmode;			\/* Mode: read access, write	*\/$/;"	m	struct:rflcblk	typeref:typename:uint32
rfname	include/rfilesys.h	/^	char	rfname[RF_NAMLEN];	\/* Name of the file		*\/$/;"	m	struct:rflcblk	typeref:typename:char[]
rfpos	include/rfilesys.h	/^	uint32	rfpos;			\/* Current file position	*\/$/;"	m	struct:rflcblk	typeref:typename:uint32
rfscomm	device/rfs/rfscomm.c	/^int32	rfscomm ($/;"	f	typeref:typename:int32
rfscontrol	device/rfs/rfscontrol.c	/^devcall	rfscontrol ($/;"	f	typeref:typename:devcall
rfsgetmode	device/rfs/rfsgetmode.c	/^int32	rfsgetmode ($/;"	f	typeref:typename:int32
rfsinit	device/rfs/rfsinit.c	/^devcall	rfsinit($/;"	f	typeref:typename:devcall
rfsndmsg	device/rfs/rfsndmsg.c	/^status	rfsndmsg ($/;"	f	typeref:typename:status
rfsopen	device/rfs/rfsopen.c	/^devcall	rfsopen ($/;"	f	typeref:typename:devcall
rfstate	include/rfilesys.h	/^	int32	rfstate;		\/* Entry is free or used	*\/$/;"	m	struct:rflcblk	typeref:typename:int32
rname	include/dns.h	/^	char	*rname;			\/* Domain Name			*\/$/;"	m	struct:dns_rr	typeref:typename:char *
rootdelay	system/getutime.c	/^		uint32	rootdelay;	\/* Root delay			*\/$/;"	m	struct:getutime::ntp	typeref:typename:uint32	file:
rootdisp	system/getutime.c	/^		uint32	rootdisp;	\/* Root dispersion		*\/$/;"	m	struct:getutime::ntp	typeref:typename:uint32	file:
roundmb	include/memory.h	/^#define	roundmb(/;"	d
rsvd	include/sdmc.h	/^	uint16	rsvd		:2;$/;"	m	struct:sdmc_cmd	typeref:typename:uint16:2
rsvd	include/sdmc.h	/^	uint8	rsvd	:6;$/;"	m	struct:sdmcblk	typeref:typename:uint8:6
rsvd1	include/sdmc.h	/^	byte	rsvd1[4];$/;"	m	struct:sdmc_csreg	typeref:typename:byte[4]
rsvd2	include/sdmc.h	/^	byte	rsvd2[3];$/;"	m	struct:sdmc_csreg	typeref:typename:byte[3]
rsvd3	include/sdmc.h	/^	byte	rsvd3[4];$/;"	m	struct:sdmc_csreg	typeref:typename:byte[4]
rsvd4	include/sdmc.h	/^	byte	rsvd4[107];$/;"	m	struct:sdmc_csreg	typeref:typename:byte[107]
rsvd4	include/sdmc.h	/^	uint32	rsvd4			:1;	\/* RSVD4				*\/$/;"	m	struct:sdmc_capabilities	typeref:typename:uint32:1
rsvd5	include/sdmc.h	/^	byte	rsvd5[12];$/;"	m	struct:sdmc_csreg	typeref:typename:byte[12]
rsvd5	include/sdmc.h	/^	uint32	rsvd5			:1;	\/* RSVD5				*\/$/;"	m	struct:sdmc_capabilities	typeref:typename:uint32:1
rsvd6	include/sdmc.h	/^	byte	rsvd6[11];$/;"	m	struct:sdmc_csreg	typeref:typename:byte[11]
rsvd6	include/sdmc.h	/^	uint32	rsvd6			:1;	\/* RSVD6				*\/$/;"	m	struct:sdmc_capabilities	typeref:typename:uint32:1
rtype	include/dns.h	/^	uint16	*rtype;			\/* Resource Record Type		*\/$/;"	m	struct:dns_rr	typeref:typename:uint16 *
rxBufs	include/ether.h	/^	void    *rxBufs; 	\/* Ptr to Rx packet buffers in memory	*\/$/;"	m	struct:ethcblk	typeref:typename:void *
rxHead	include/ether.h	/^	uint32	rxHead;		\/* Index of current head of Rx ring	*\/$/;"	m	struct:ethcblk	typeref:typename:uint32
rxIrq	include/ether.h	/^	uint32	rxIrq;		\/* Count of Rx interrupt requests       *\/$/;"	m	struct:ethcblk	typeref:typename:uint32
rxRing	include/ether.h	/^	void    *rxRing;	\/* Ptr to array of recv ring descriptors*\/$/;"	m	struct:ethcblk	typeref:typename:void *
rxRingSize	include/ether.h	/^	uint32	rxRingSize;	\/* Size of Rx ring descriptor array	*\/$/;"	m	struct:ethcblk	typeref:typename:uint32
rxTail	include/ether.h	/^	uint32	rxTail;		\/* Index of current tail of Rx ring	*\/$/;"	m	struct:ethcblk	typeref:typename:uint32
save_flags	include/pci.h	/^#define save_flags(/;"	d
savearea	system/start.S	/^savearea:	.long	0,0	# sp & bp to return to$/;"	l
sbzero	system/start.S	/^	.globl sbzero$/;"	s
sbzero	system/start.S	/^sbzero:$/;"	l
scanf	include/stdio.h	/^#define	scanf(fmt, args)	fscanf(/;"	d
scindex	shell/shell.c	/^	    int32	scindex;	\/* Index in cmdtab of the	*\/$/;"	m	struct:shell::segent	typeref:typename:int32	file:
scount	include/semaphore.h	/^	int32	scount;		\/* Count for the semaphore		*\/$/;"	m	struct:sentry	typeref:typename:int32
scr	include/uart.h	/^	volatile byte	scr;	\/* scratch register			*\/$/;"	m	struct:uart_csreg	typeref:typename:volatile byte
sd	include/i386.h	/^struct sd {$/;"	s
sd_32b	include/i386.h	/^    unsigned int	sd_32b : 1;$/;"	m	struct:sd	typeref:typename:unsigned int:1
sd_avl	include/i386.h	/^    unsigned int	sd_avl : 1;$/;"	m	struct:sd	typeref:typename:unsigned int:1
sd_dpl	include/i386.h	/^    unsigned int	sd_dpl : 2;$/;"	m	struct:sd	typeref:typename:unsigned int:2
sd_gran	include/i386.h	/^    unsigned int	sd_gran : 1;$/;"	m	struct:sd	typeref:typename:unsigned int:1
sd_hibase	include/i386.h	/^    unsigned char	sd_hibase;$/;"	m	struct:sd	typeref:typename:unsigned char
sd_hilimit	include/i386.h	/^    unsigned int	sd_hilimit : 4;$/;"	m	struct:sd	typeref:typename:unsigned int:4
sd_isapp	include/i386.h	/^    unsigned int	sd_isapp : 1;$/;"	m	struct:sd	typeref:typename:unsigned int:1
sd_iscode	include/i386.h	/^    unsigned int	sd_iscode : 1;$/;"	m	struct:sd	typeref:typename:unsigned int:1
sd_lobase	include/i386.h	/^    unsigned short	sd_lobase;$/;"	m	struct:sd	typeref:typename:unsigned short
sd_lolimit	include/i386.h	/^    unsigned short	sd_lolimit;$/;"	m	struct:sd	typeref:typename:unsigned short
sd_mbz	include/i386.h	/^    unsigned int	sd_mbz : 1;		\/* must be '0' *\/$/;"	m	struct:sd	typeref:typename:unsigned int:1
sd_midbase	include/i386.h	/^    unsigned char	sd_midbase;$/;"	m	struct:sd	typeref:typename:unsigned char
sd_perm	include/i386.h	/^    unsigned int	sd_perm : 3;$/;"	m	struct:sd	typeref:typename:unsigned int:3
sd_present	include/i386.h	/^    unsigned int	sd_present : 1;$/;"	m	struct:sd	typeref:typename:unsigned int:1
sd_type	include/i386.h	/^#define	sd_type	/;"	d
sdio	include/sdmc.h	/^	uint8	sdio	:1;		\/* Card is an SDIO card			*\/$/;"	m	struct:sdmcblk	typeref:typename:uint8:1
sdma_support	include/sdmc.h	/^	uint32	sdma_support		:1;	\/* SDMA Support				*\/$/;"	m	struct:sdmc_capabilities	typeref:typename:uint32:1
sdmc_capabilities	include/sdmc.h	/^struct sdmc_capabilities {$/;"	s
sdmc_cmd	include/sdmc.h	/^struct sdmc_cmd {$/;"	s
sdmc_cmd_err_rcvy	device/sdmc/sdmccmd.c	/^devcall sdmc_cmd_err_rcvy ($/;"	f	typeref:typename:devcall
sdmc_csreg	include/sdmc.h	/^struct sdmc_csreg {$/;"	s
sdmc_finalize_cmd_async	device/sdmc/sdmccmd.c	/^devcall sdmc_finalize_cmd_async ($/;"	f	typeref:typename:devcall
sdmc_issue_cmd_async	device/sdmc/sdmccmd.c	/^devcall sdmc_issue_cmd_async ($/;"	f	typeref:typename:devcall
sdmc_issue_cmd_sync	device/sdmc/sdmccmd.c	/^devcall sdmc_issue_cmd_sync ($/;"	f	typeref:typename:devcall
sdmc_set_bus_power	device/sdmc/sdmcopen.c	/^devcall sdmc_set_bus_power ($/;"	f	typeref:typename:devcall
sdmc_set_clock	device/sdmc/sdmcopen.c	/^devcall sdmc_set_clock ($/;"	f	typeref:typename:devcall
sdmc_set_dat_timeout	device/sdmc/sdmcopen.c	/^devcall sdmc_set_dat_timeout ($/;"	f	typeref:typename:devcall
sdmcblk	include/sdmc.h	/^struct sdmcblk {$/;"	s
sdmcclose	device/sdmc/sdmcclose.c	/^devcall	sdmcclose ($/;"	f	typeref:typename:devcall
sdmcdispatch	device/sdmc/sdmcdispatch.S	/^		.globl	sdmcdispatch$/;"	s
sdmcdispatch	device/sdmc/sdmcdispatch.S	/^sdmcdispatch:$/;"	l
sdmcinit	device/sdmc/sdmcinit.c	/^devcall	sdmcinit ($/;"	f	typeref:typename:devcall
sdmcinterrupt	device/sdmc/sdmcdispatch.S	/^		.globl	sdmcinterrupt$/;"	s
sdmcinterrupt	device/sdmc/sdmcinterrupt.c	/^void sdmcinterrupt(void) {$/;"	f	typeref:typename:void
sdmcopen	device/sdmc/sdmcopen.c	/^devcall	sdmcopen ($/;"	f	typeref:typename:devcall
sdmcread	device/sdmc/sdmcread.c	/^devcall	sdmcread ($/;"	f	typeref:typename:devcall
sdmcread_dma	device/sdmc/sdmcread.c	/^devcall sdmcread_dma ($/;"	f	typeref:typename:devcall
sdmcread_nodma	device/sdmc/sdmcread.c	/^devcall sdmcread_nodma ($/;"	f	typeref:typename:devcall
sdmctab	device/sdmc/sdmcinit.c	/^struct	sdmcblk	sdmctab[Nsdmc];$/;"	v	typeref:struct:sdmcblk[]
sdmcwrite	device/sdmc/sdmcwrite.c	/^devcall	sdmcwrite ($/;"	f	typeref:typename:devcall
seek	system/seek.c	/^syscall	seek($/;"	f	typeref:typename:syscall
segent	shell/shell.c	/^	struct segent {			\/* One segment of the pipeline	*\/$/;"	s	function:shell	file:
segment	system/pci.c	/^	unsigned short segment;$/;"	m	struct:__anon6a33e0860108	typeref:typename:unsigned short	file:
segment	system/pci.c	/^    unsigned short segment;$/;"	m	struct:__anon6a33e0860208	typeref:typename:unsigned short	file:
segtr	include/i386.h	/^struct segtr {$/;"	s
sem	include/ethloop.h	/^    sid32	sem;              \/**< number of packets in buffer        *\/$/;"	m	struct:ethloop	typeref:typename:sid32
semcount	system/semcount.c	/^syscall semcount($/;"	f	typeref:typename:syscall
semcreate	system/semcreate.c	/^sid32	semcreate($/;"	f	typeref:typename:sid32
semdelete	system/semdelete.c	/^syscall	semdelete($/;"	f	typeref:typename:syscall
semreset	system/semreset.c	/^syscall	semreset($/;"	f	typeref:typename:syscall
semtab	system/initialize.c	/^struct	sentry	semtab[NSEM];	\/* Semaphore table			*\/$/;"	v	typeref:struct:sentry[]
send	shell/shell.c	/^	    int32	send;		\/* Ending token index		*\/$/;"	m	struct:shell::segent	typeref:typename:int32	file:
send	system/send.c	/^syscall	send($/;"	f	typeref:typename:syscall
sentry	include/semaphore.h	/^struct	sentry	{$/;"	s
set_evec	system/evec.c	/^int32	set_evec(uint32 xnum, uint32 handler)$/;"	f	typeref:typename:int32
setirmask	system/i386.c	/^void	setirmask(void)$/;"	f	typeref:typename:void
setsegs	system/i386.c	/^void	setsegs()$/;"	f	typeref:typename:void
sgetch	lib/sscanf.c	/^static int	sgetch($/;"	f	typeref:typename:int	file:
shared_bus	include/sdmc.h	/^	uint32	shared_bus;		\/* shared bus control register *\/$/;"	m	struct:sdmc_csreg	typeref:typename:uint32
shell	shell/shell.c	/^process	shell ($/;"	f	typeref:typename:process
shellcmd	include/kernel.h	/^typedef int32	shellcmd;	\/* Shell command declaration		*\/$/;"	t	typeref:typename:int32
sid32	include/kernel.h	/^typedef	int32	sid32;		\/* Semaphore ID				*\/$/;"	t	typeref:typename:int32
signal	system/signal.c	/^syscall	signal($/;"	f	typeref:typename:syscall
signaln	system/signaln.c	/^syscall	signaln($/;"	f	typeref:typename:syscall
signature	include/pci.h	/^    unsigned long   signature;          \/* "_32_"                            *\/$/;"	m	struct:bios32	typeref:typename:unsigned long
sindev	shell/shell.c	/^	    did32	sindev;		\/* Input device (pipe, except	*\/$/;"	m	struct:shell::segent	typeref:typename:did32	file:
size	include/flash.h	/^    uint32 size;                 \/**< size (in bytes) of flash memory     *\/$/;"	m	struct:flash	typeref:typename:uint32
size	include/flash.h	/^    uint32 size;                 \/**< size of this block                  *\/$/;"	m	struct:flash_block	typeref:typename:uint32
size	include/multiboot.h	/^	uint32	size;			\/* Entry Size			*\/$/;"	m	struct:mbmregion	typeref:typename:uint32
sleep	system/sleep.c	/^syscall	sleep($/;"	f	typeref:typename:syscall
sleepms	system/sleep.c	/^syscall	sleepms($/;"	f	typeref:typename:syscall
sleepq	system/clkinit.c	/^qid16	sleepq;			\/* Queue of sleeping processes		*\/$/;"	v	typeref:typename:qid16
slot_int_stat	include/sdmc.h	/^	uint16	slot_int_stat;		\/* slot interrupt status register *\/$/;"	m	struct:sdmc_csreg	typeref:typename:uint16
slot_type	include/sdmc.h	/^	uint32	slot_type		:2;	\/* Slot Type				*\/$/;"	m	struct:sdmc_capabilities	typeref:typename:uint32:2
sname	include/dhcp.h	/^			byte   sname[64];	\/* TFTP Server Name	*\/$/;"	m	struct:dhcpmsg::__anon47fde26d010a::__anon47fde26d0208	typeref:typename:byte[64]
soutdev	shell/shell.c	/^	    did32	soutdev;	\/* Output device (pipe, except	*\/$/;"	m	struct:shell::segent	typeref:typename:did32	file:
special	include/e1000e.h	/^	  uint16 	special;$/;"	m	struct:eth_tx_desc::__anon2602d319030a::__anon2602d3190408	typeref:typename:uint16
special	include/e1000e.h	/^	uint16  special;$/;"	m	struct:eth_rx_desc	typeref:typename:uint16
spi_int_sup	include/sdmc.h	/^	uint8	spi_int_sup;		\/* spi interrupt support register *\/$/;"	m	struct:sdmc_csreg	typeref:typename:uint8
spid	shell/shell.c	/^	    pid32	spid;		\/* Process ID for this segment	*\/$/;"	m	struct:shell::segent	typeref:typename:pid32	file:
sprintf	lib/sprintf.c	/^int	sprintf($/;"	f	typeref:typename:int
sprntf	lib/sprintf.c	/^static int	sprntf($/;"	f	typeref:typename:int	file:
spurious_irq15	system/intr.S	/^	.globl	spurious_irq15$/;"	s
spurious_irq15	system/intr.S	/^spurious_irq15:$/;"	l
spurious_irq7	system/intr.S	/^	.globl	spurious_irq7$/;"	s
spurious_irq7	system/intr.S	/^spurious_irq7:$/;"	l
squeue	include/semaphore.h	/^	qid16	squeue;		\/* Queue of processes that are waiting	*\/$/;"	m	struct:sentry	typeref:typename:qid16
srand	lib/rand.c	/^void	srand($/;"	f	typeref:typename:void
src	include/ether.h	/^	byte	src[ETH_ADDR_LEN];	\/* Source Mac address		*\/$/;"	m	struct:etherPkt	typeref:typename:byte[]
sscanf	lib/sscanf.c	/^int	sscanf($/;"	f	typeref:typename:int
sstart	shell/shell.c	/^	    int32	sstart;		\/* Starting token index		*\/$/;"	m	struct:shell::segent	typeref:typename:int32	file:
sstate	include/semaphore.h	/^	byte	sstate;		\/* Whether entry is S_FREE or S_USED	*\/$/;"	m	struct:sentry	typeref:typename:byte
stacktrace	system/stacktrace.c	/^syscall stacktrace(int pid)$/;"	f	typeref:typename:syscall
start	system/start.S	/^	.globl	start$/;"	s
start	system/start.S	/^start:$/;"	l
start_pos	include/flash.h	/^    uint32 start_pos;            \/**< physical position data starts at    *\/$/;"	m	struct:flash_block	typeref:typename:uint32
startup	system/initialize.c	/^local process	startup(void)$/;"	f	typeref:typename:local process
state	include/ether.h	/^	byte	state; 		\/* ETH_STATE_... as defined above 	*\/$/;"	m	struct:ethcblk	typeref:typename:byte
state	include/ethloop.h	/^    int state;                      \/**< device state                       *\/$/;"	m	struct:ethloop	typeref:typename:int
state	include/flash.h	/^    byte state;                \/**< state of this block                 *\/$/;"	m	struct:flash_block	typeref:typename:byte
status	include/e1000e.h	/^	  uint8 	status; 	\/* Descriptor status 		*\/$/;"	m	struct:eth_tx_desc::__anon2602d319030a::__anon2602d3190408	typeref:typename:uint8
status	include/e1000e.h	/^	uint8   status;		 	\/* Descriptor status 		*\/$/;"	m	struct:eth_rx_desc	typeref:typename:uint8
status	include/kernel.h	/^typedef	int32	status;		\/* Returned status value (OK\/SYSERR)	*\/$/;"	t	typeref:typename:int32
stderr	include/stdio.h	/^#define	stderr	/;"	d
stdin	include/stdio.h	/^#define	stdin	/;"	d
stdout	include/stdio.h	/^#define	stdout	/;"	d
stop	system/initialize.c	/^int32	stop(char *s)$/;"	f	typeref:typename:int32
strat	system/getutime.c	/^		byte	strat;		\/* Stratum			*\/$/;"	m	struct:getutime::ntp	typeref:typename:byte	file:
strchr	lib/strchr.c	/^char	*strchr($/;"	f	typeref:typename:char *
strcmp	lib/strcmp.c	/^int	strcmp($/;"	f	typeref:typename:int
strcpy	lib/strcpy.c	/^int	strcpy($/;"	f	typeref:typename:int
strlen	lib/strlen.c	/^int	strlen($/;"	f	typeref:typename:int
strncat	lib/strncat.c	/^char	*strncat($/;"	f	typeref:typename:char *
strncmp	lib/strncmp.c	/^int	strncmp($/;"	f	typeref:typename:int
strncpy	lib/strncpy.c	/^char	*strncpy($/;"	f	typeref:typename:char *
strnlen	lib/strnlen.c	/^int	strnlen($/;"	f	typeref:typename:int
strrchr	lib/strrchr.c	/^char	*strrchr($/;"	f	typeref:typename:char *
strstr	lib/strstr.c	/^char	*strstr($/;"	f	typeref:typename:char *
sungetch	lib/sscanf.c	/^static int	sungetch($/;"	f	typeref:typename:int	file:
suspend	system/suspend.c	/^syscall	suspend($/;"	f	typeref:typename:syscall
suspend_resume_support	include/sdmc.h	/^	uint32	suspend_resume_support	:1;	\/* Suspend \/ Resume Support		*\/$/;"	m	struct:sdmc_capabilities	typeref:typename:uint32:1
sw_rst	include/sdmc.h	/^	uint8	sw_rst;			\/* software reset register 		*\/$/;"	m	struct:sdmc_csreg	typeref:typename:uint8
syms	include/multiboot.h	/^	uint32	syms[4];		\/* Info regarding ELF sections	*\/$/;"	m	struct:mbootinfo	typeref:typename:uint32[4]
sys_adr	include/sdmc.h	/^	uint32	sys_adr;		\/* sdma system address register 	*\/$/;"	m	struct:sdmc_csreg	typeref:typename:uint32
sys_bus_support_64b	include/sdmc.h	/^	uint32	sys_bus_support_64b	:1;	\/* 64-bit System Bus Support		*\/$/;"	m	struct:sdmc_capabilities	typeref:typename:uint32:1
syscall	include/kernel.h	/^typedef int32	syscall;	\/* System call declaration		*\/$/;"	t	typeref:typename:int32
sysid_bios_revision	include/pxe.h	/^	byte   sysid_bios_revision;$/;"	m	struct:sysid_entry_point	typeref:typename:byte
sysid_bios_struct	include/pxe.h	/^struct sysid_bios_struct$/;"	s
sysid_entry_point	include/pxe.h	/^struct sysid_entry_point$/;"	s
sysinit	system/initialize.c	/^static	void	sysinit()$/;"	f	typeref:typename:void	file:
tc	include/dns.h	/^		byte	tc:1;		\/* Truncation			*\/$/;"	m	struct:dnspkt::__anona51abb730108	typeref:typename:byte:1
test	include/testsuite.h	/^    process	(*test) (bool8);\/* Test case function			*\/$/;"	m	struct:testcase	typeref:typename:process (*)(bool8)
testcase	include/testsuite.h	/^struct	testcase {$/;"	s
text	compile/ld.script	/^    text = ABSOLUTE(.);         \/* text: beginning of text segment      *\/$/;"	s	section:.text
tf_ablk	include/tftp.h	/^	  uint16	tf_ablk;	\/* Block number being acked	*\/$/;"	m	struct:tftp_msg::__anon6d358dec010a::__anon6d358dec0408	typeref:typename:uint16
tf_data	include/tftp.h	/^	  char		tf_data[TFTP_MAXDATA]; \/* Actual data		*\/$/;"	m	struct:tftp_msg::__anon6d358dec010a::__anon6d358dec0308	typeref:typename:char[]
tf_dblk	include/tftp.h	/^	  uint16	tf_dblk;	\/* Block number of this data	*\/$/;"	m	struct:tftp_msg::__anon6d358dec010a::__anon6d358dec0308	typeref:typename:uint16
tf_ercode	include/tftp.h	/^	  uint16	tf_ercode;	\/* Integer error code		*\/$/;"	m	struct:tftp_msg::__anon6d358dec010a::__anon6d358dec0508	typeref:typename:uint16
tf_ermsg	include/tftp.h	/^	  char		tf_ermsg[TFTP_MAXDATA]; \/* Error message	*\/$/;"	m	struct:tftp_msg::__anon6d358dec010a::__anon6d358dec0508	typeref:typename:char[]
tf_filemode	include/tftp.h	/^	  char	tf_filemode[TFTP_MAXNAM+10]; \/* file name and mode	*\/$/;"	m	struct:tftp_msg::__anon6d358dec010a::__anon6d358dec0208	typeref:typename:char[]
tf_opcode	include/tftp.h	/^	uint16		tf_opcode;	\/* One of the opcodes above	*\/$/;"	m	struct:tftp_msg	typeref:typename:uint16
tftp_msg	include/tftp.h	/^struct	tftp_msg {$/;"	s
tftp_send1	net/tftp.c	/^status	tftp_send1 ($/;"	f	typeref:typename:status
tftpget	net/tftp.c	/^status  tftpget($/;"	f	typeref:typename:status
tftpget_mb	net/tftp.c	/^status  tftpget_mb($/;"	f	typeref:typename:status
theader	config/config.y	/^theader:	ON tonid { $$ = $2; }$/;"	l
thr	include/uart.h	/^#define	thr	/;"	d
timeout_clock_frequency	include/sdmc.h	/^	uint32	timeout_clock_frequency	:6;	\/* Timeout Clock Frequency		*\/$/;"	m	struct:sdmc_capabilities	typeref:typename:uint32:6
timeout_clock_unit	include/sdmc.h	/^	uint32	timeout_clock_unit	:1;	\/* Timeout Clock Unit			*\/$/;"	m	struct:sdmc_capabilities	typeref:typename:uint32:1
timeout_ctl	include/sdmc.h	/^	uint8	timeout_ctl;		\/* timeout control register 		*\/$/;"	m	struct:sdmc_csreg	typeref:typename:uint8
tname	config/config.y	/^tname:		IDENT { $$ = newtype(yytext); }$/;"	l
toascii	include/ctype.h	/^#define toascii(/;"	d
tolower	include/ctype.h	/^#define tolower(/;"	d
tonid	config/config.y	/^tonid:		IDENT { $$ = addton(yytext); }$/;"	l
toupper	include/ctype.h	/^#define toupper(/;"	d
trap	system/evec.c	/^void trap(int inum)$/;"	f	typeref:typename:void
trntimestamp	system/getutime.c	/^		uint32	trntimestamp[2];\/* Transmit timestamp		*\/$/;"	m	struct:getutime::ntp	typeref:typename:uint32[2]	file:
truncmb	include/memory.h	/^#define	truncmb(/;"	d
trx_header	include/flash.h	/^struct trx_header$/;"	s
ttl	include/dns.h	/^	uint32	*ttl;			\/* Resource Record Time-to-Live	*\/$/;"	m	struct:dns_rr	typeref:typename:uint32 *
ttycblk	include/tty.h	/^struct	ttycblk	{			\/* Tty line control block	*\/$/;"	s
ttycontrol	device/tty/ttycontrol.c	/^devcall	ttycontrol($/;"	f	typeref:typename:devcall
ttydispatch	device/tty/ttydispatch.S	/^		.globl	ttydispatch$/;"	s
ttydispatch	device/tty/ttydispatch.S	/^ttydispatch:$/;"	l
ttygetc	device/tty/ttygetc.c	/^devcall	ttygetc($/;"	f	typeref:typename:devcall
ttyhandle_in	device/tty/ttyhandle_in.c	/^void	ttyhandle_in ($/;"	f	typeref:typename:void
ttyhandle_out	device/tty/ttyhandle_out.c	/^void	ttyhandle_out($/;"	f	typeref:typename:void
ttyhandler	device/tty/ttydispatch.S	/^		.globl	ttyhandler$/;"	s
ttyhandler	device/tty/ttyhandler.c	/^void ttyhandler(void) {$/;"	f	typeref:typename:void
ttyinit	device/tty/ttyinit.c	/^devcall	ttyinit($/;"	f	typeref:typename:devcall
ttykickout	device/tty/ttykickout.c	/^void	ttykickout($/;"	f	typeref:typename:void
ttyputc	device/tty/ttyputc.c	/^devcall	ttyputc($/;"	f	typeref:typename:devcall
ttyread	device/tty/ttyread.c	/^devcall	ttyread($/;"	f	typeref:typename:devcall
ttytab	device/tty/ttyinit.c	/^struct	ttycblk	ttytab[Ntty];$/;"	v	typeref:struct:ttycblk[]
ttywrite	device/tty/ttywrite.c	/^devcall	ttywrite($/;"	f	typeref:typename:devcall
txBufs	include/ether.h	/^	void    *txBufs; 	\/* Ptr to Tx packet buffers in memory	*\/$/;"	m	struct:ethcblk	typeref:typename:void *
txHead	include/ether.h	/^	uint32	txHead;		\/* Index of current head of Tx ring	*\/$/;"	m	struct:ethcblk	typeref:typename:uint32
txIrq	include/ether.h	/^	uint32	txIrq;		\/* Count of Tx interrupt requests       *\/$/;"	m	struct:ethcblk	typeref:typename:uint32
txRing	include/ether.h	/^	void    *txRing; 	\/* Ptr to array of xmit ring descriptors*\/$/;"	m	struct:ethcblk	typeref:typename:void *
txRingSize	include/ether.h	/^	uint32	txRingSize;	\/* Size of Tx ring descriptor array	*\/$/;"	m	struct:ethcblk	typeref:typename:uint32
txTail	include/ether.h	/^	uint32	txTail;		\/* Index of current tail of Tx ring	*\/$/;"	m	struct:ethcblk	typeref:typename:uint32
tx_mode	include/sdmc.h	/^	uint16	tx_mode;		\/* transfer mode register 		*\/$/;"	m	struct:sdmc_csreg	typeref:typename:uint16
tx_sem	include/sdmc.h	/^	sid32	tx_sem;			\/* transfer semaphore			*\/$/;"	m	struct:sdmcblk	typeref:typename:sid32
tyebuff	include/tty.h	/^	char	tyebuff[TY_EBUFLEN];	\/* Echo buffer			*\/$/;"	m	struct:ttycblk	typeref:typename:char[]
tyecrlf	include/tty.h	/^	bool8	tyecrlf;		\/* Echo CR-LF for newline?	*\/$/;"	m	struct:ttycblk	typeref:typename:bool8
tyehead	include/tty.h	/^	char	*tyehead;		\/* Next echo char to xmit	*\/$/;"	m	struct:ttycblk	typeref:typename:char *
tyeof	include/tty.h	/^	bool8	tyeof;			\/* Honor EOF character?		*\/$/;"	m	struct:ttycblk	typeref:typename:bool8
tyeofch	include/tty.h	/^	char	tyeofch;		\/* EOF character (usually ^D)	*\/$/;"	m	struct:ttycblk	typeref:typename:char
tyetail	include/tty.h	/^	char	*tyetail;		\/* Next slot to deposit echo ch	*\/$/;"	m	struct:ttycblk	typeref:typename:char *
tyevis	include/tty.h	/^	bool8	tyevis;			\/* Echo control chars as ^X ?	*\/$/;"	m	struct:ttycblk	typeref:typename:bool8
tyibuff	include/tty.h	/^	char	tyibuff[TY_IBUFLEN];	\/* Input buffer (holds one line)*\/$/;"	m	struct:ttycblk	typeref:typename:char[]
tyicrlf	include/tty.h	/^	bool8	tyicrlf;		\/* Map '\\r' to '\\n' on input?	*\/$/;"	m	struct:ttycblk	typeref:typename:bool8
tyicursor	include/tty.h	/^	int32	tyicursor;		\/* Current cursor position	*\/$/;"	m	struct:ttycblk	typeref:typename:int32
tyieback	include/tty.h	/^	bool8	tyieback;		\/* Do erasing backspace on echo?*\/$/;"	m	struct:ttycblk	typeref:typename:bool8
tyiecho	include/tty.h	/^	bool8	tyiecho;		\/* Is input echoed?		*\/$/;"	m	struct:ttycblk	typeref:typename:bool8
tyierase	include/tty.h	/^	bool8	tyierase;		\/* Honor erase character?	*\/$/;"	m	struct:ttycblk	typeref:typename:bool8
tyierasec	include/tty.h	/^	char	tyierasec;		\/* Primary erase character	*\/$/;"	m	struct:ttycblk	typeref:typename:char
tyierasec2	include/tty.h	/^	char	tyierasec2;		\/* Alternate erase character	*\/$/;"	m	struct:ttycblk	typeref:typename:char
tyifullc	include/tty.h	/^	char	tyifullc;		\/* Char to send when input full	*\/$/;"	m	struct:ttycblk	typeref:typename:char
tyihead	include/tty.h	/^	char	*tyihead;		\/* Next input char to read	*\/$/;"	m	struct:ttycblk	typeref:typename:char *
tyikill	include/tty.h	/^	bool8	tyikill;		\/* Honor line kill character?	*\/$/;"	m	struct:ttycblk	typeref:typename:bool8
tyikillc	include/tty.h	/^	char	tyikillc;		\/* Line kill character		*\/$/;"	m	struct:ttycblk	typeref:typename:char
tyimode	include/tty.h	/^	char	tyimode;		\/* Input mode raw\/cbreak\/cooked	*\/$/;"	m	struct:ttycblk	typeref:typename:char
tyisem	include/tty.h	/^	sid32	tyisem;			\/* Input semaphore		*\/$/;"	m	struct:ttycblk	typeref:typename:sid32
tyitail	include/tty.h	/^	char	*tyitail;		\/* Next slot for arriving char	*\/$/;"	m	struct:ttycblk	typeref:typename:char *
tyobuff	include/tty.h	/^	char	tyobuff[TY_OBUFLEN];	\/* Output buffer		*\/$/;"	m	struct:ttycblk	typeref:typename:char[]
tyocrlf	include/tty.h	/^	bool8	tyocrlf;		\/* Output CR\/LF for LF ?	*\/$/;"	m	struct:ttycblk	typeref:typename:bool8
tyoflow	include/tty.h	/^	bool8	tyoflow;		\/* Honor ostop\/ostart?		*\/$/;"	m	struct:ttycblk	typeref:typename:bool8
tyohead	include/tty.h	/^	char	*tyohead;		\/* Next output char to xmit	*\/$/;"	m	struct:ttycblk	typeref:typename:char *
tyoheld	include/tty.h	/^	bool8	tyoheld;		\/* Output currently being held?	*\/$/;"	m	struct:ttycblk	typeref:typename:bool8
tyosem	include/tty.h	/^	sid32	tyosem;			\/* Output semaphore		*\/$/;"	m	struct:ttycblk	typeref:typename:sid32
tyostart	include/tty.h	/^	char	tyostart;		\/* Character that starts output	*\/$/;"	m	struct:ttycblk	typeref:typename:char
tyostop	include/tty.h	/^	char	tyostop;		\/* Character that stops output	*\/$/;"	m	struct:ttycblk	typeref:typename:char
tyotail	include/tty.h	/^	char	*tyotail;		\/* Next slot for outgoing char	*\/$/;"	m	struct:ttycblk	typeref:typename:char *
type	include/ether.h	/^	byte 	type; 		\/* NIC type_... as defined above 	*\/$/;"	m	struct:ethcblk	typeref:typename:byte
type	include/ether.h	/^	uint16	type;			\/* Ether type field		*\/$/;"	m	struct:etherPkt	typeref:typename:uint16
type	include/multiboot.h	/^	uint32	type;			\/* Memory region type		*\/$/;"	m	struct:mbmregion	typeref:typename:uint32
uart_csreg	include/uart.h	/^struct	uart_csreg$/;"	s
udcount	include/udp.h	/^	int32	udcount;		\/* Count of packets enqueued	*\/$/;"	m	struct:udpentry	typeref:typename:int32
udhead	include/udp.h	/^	int32	udhead;			\/* Index of next packet to read	*\/$/;"	m	struct:udpentry	typeref:typename:int32
udlocport	include/udp.h	/^	uint16	udlocport;		\/* Local protocol port number	*\/$/;"	m	struct:udpentry	typeref:typename:uint16
udp_hton	net/udp.c	/^void 	udp_hton($/;"	f	typeref:typename:void
udp_in	net/udp.c	/^void	udp_in($/;"	f	typeref:typename:void
udp_init	net/udp.c	/^void	udp_init(void)$/;"	f	typeref:typename:void
udp_ntoh	net/udp.c	/^void 	udp_ntoh($/;"	f	typeref:typename:void
udp_recv	net/udp.c	/^int32	udp_recv ($/;"	f	typeref:typename:int32
udp_recvaddr	net/udp.c	/^int32	udp_recvaddr ($/;"	f	typeref:typename:int32
udp_register	net/udp.c	/^uid32	udp_register ($/;"	f	typeref:typename:uid32
udp_release	net/udp.c	/^status	udp_release ($/;"	f	typeref:typename:status
udp_send	net/udp.c	/^status	udp_send ($/;"	f	typeref:typename:status
udp_sendto	net/udp.c	/^status	udp_sendto ($/;"	f	typeref:typename:status
udpentry	include/udp.h	/^struct	udpentry {			\/* Entry in the UDP endpoint tbl*\/$/;"	s
udpid	include/udp.h	/^	pid32	udpid;			\/* ID of waiting process	*\/$/;"	m	struct:udpentry	typeref:typename:pid32
udptab	net/udp.c	/^struct	udpentry udptab[UDP_SLOTS];	\/* Table of UDP endpoints	*\/$/;"	v	typeref:struct:udpentry[]
udqueue	include/udp.h	/^	struct	netpacket *udqueue[UDP_QSIZ];\/* Circular packet queue	*\/$/;"	m	struct:udpentry	typeref:struct:netpacket * []
udremip	include/udp.h	/^	uint32	udremip;		\/* Remote IP address (zero	*\/$/;"	m	struct:udpentry	typeref:typename:uint32
udremport	include/udp.h	/^	uint16	udremport;		\/* Remote protocol port number	*\/$/;"	m	struct:udpentry	typeref:typename:uint16
udstate	include/udp.h	/^	int32	udstate;		\/* State of entry: free\/used	*\/$/;"	m	struct:udpentry	typeref:typename:int32
udtail	include/udp.h	/^	int32	udtail;			\/* Index of next slot to insert	*\/$/;"	m	struct:udpentry	typeref:typename:int32
uid32	include/kernel.h	/^typedef	int32	uid32;		\/* ID for UDP table descriptor		*\/$/;"	t	typeref:typename:int32
uint16	include/kernel.h	/^typedef	unsigned short	uint16;$/;"	t	typeref:typename:unsigned short
uint32	include/kernel.h	/^typedef	unsigned int	uint32;$/;"	t	typeref:typename:unsigned int
uint64	include/kernel.h	/^typedef	unsigned long long uint64;$/;"	t	typeref:typename:unsigned long long
uint8	include/kernel.h	/^typedef	unsigned char	uint8;$/;"	t	typeref:typename:unsigned char
umsg32	include/kernel.h	/^typedef	uint32	umsg32;		\/* Message passed among processes	*\/$/;"	t	typeref:typename:uint32
ungetch	lib/fscanf.c	/^static int	ungetch($/;"	f	typeref:typename:int	file:
unsleep	system/unsleep.c	/^status	unsleep($/;"	f	typeref:typename:status
upper	include/e1000e.h	/^	} upper;$/;"	m	struct:eth_tx_desc	typeref:union:eth_tx_desc::__anon2602d319030a
userret	system/userret.c	/^void	userret(void)$/;"	f	typeref:typename:void
utim2ltim	include/date.h	/^#define	utim2ltim(/;"	d
va_arg	include/stdarg.h	/^#define va_arg(va, type)	__builtin_va_arg(/;"	d
va_copy	include/stdarg.h	/^#define va_copy(dst, src)	__builtin_va_copy(/;"	d
va_end	include/stdarg.h	/^#define va_end(va)		__builtin_va_end(/;"	d
va_list	include/stdarg.h	/^typedef __builtin_va_list va_list;$/;"	t	typeref:typename:__builtin_va_list
va_start	include/stdarg.h	/^#define va_start(last, va)	__builtin_va_start(/;"	d
vbe_control_info	include/multiboot.h	/^	uint32	vbe_control_info;	\/* VBE control info		*\/$/;"	m	struct:mbootinfo	typeref:typename:uint32
vbe_interface_len	include/multiboot.h	/^	uint32	vbe_interface_len;	\/* VBE related informarion	*\/$/;"	m	struct:mbootinfo	typeref:typename:uint32
vbe_interface_off	include/multiboot.h	/^	uint16	vbe_interface_off;	\/* VBE related information	*\/$/;"	m	struct:mbootinfo	typeref:typename:uint16
vbe_interface_seg	include/multiboot.h	/^	uint16	vbe_interface_seg;	\/* VBE related information	*\/$/;"	m	struct:mbootinfo	typeref:typename:uint16
vbe_mode	include/multiboot.h	/^	uint16	vbe_mode;		\/* Current Video mode		*\/$/;"	m	struct:mbootinfo	typeref:typename:uint16
vbe_mode_info	include/multiboot.h	/^	uint32	vbe_mode_info;		\/* VBE mode info		*\/$/;"	m	struct:mbootinfo	typeref:typename:uint32
volt_support_1p8v	include/sdmc.h	/^	uint32	volt_support_1p8v	:1;	\/* Voltage Support 1.8V			*\/$/;"	m	struct:sdmc_capabilities	typeref:typename:uint32:1
volt_support_3p0v	include/sdmc.h	/^	uint32	volt_support_3p0v	:1;	\/* Voltage Support 3.0V			*\/$/;"	m	struct:sdmc_capabilities	typeref:typename:uint32:1
volt_support_3p3v	include/sdmc.h	/^	uint32	volt_support_3p3v	:1;	\/* Voltage Support 3.3V			*\/$/;"	m	struct:sdmc_capabilities	typeref:typename:uint32:1
wait	system/wait.c	/^syscall	wait($/;"	f	typeref:typename:syscall
wakeup	system/wakeup.c	/^void	wakeup(void)$/;"	f	typeref:typename:void
wakeup_ctl	include/sdmc.h	/^	uint8	wakeup_ctl;		\/* wakeup control register 		*\/$/;"	m	struct:sdmc_csreg	typeref:typename:uint8
write	system/write.c	/^syscall	write($/;"	f	typeref:typename:syscall
xdone	system/xdone.c	/^void	xdone(void)$/;"	f	typeref:typename:void
xinu	compile/Makefile	/^xinu:	Makefile rebuild $(BLDDIRS) $(DEFSFILE) $(DEPSFILE) $(CONFH) $(CONFC) $(LD_LIST)$/;"	t
xsh_argecho	shell/xsh_argecho.c	/^shellcmd xsh_argecho(int nargs, char *args[])$/;"	f	typeref:typename:shellcmd
xsh_arp	shell/xsh_arp.c	/^shellcmd xsh_arp(int nargs, char *args[])$/;"	f	typeref:typename:shellcmd
xsh_cat	shell/xsh_cat.c	/^shellcmd xsh_cat(int nargs, char *args[])$/;"	f	typeref:typename:shellcmd
xsh_clear	shell/xsh_clear.c	/^shellcmd xsh_clear(int nargs, char *args[])$/;"	f	typeref:typename:shellcmd
xsh_date	shell/xsh_date.c	/^shellcmd xsh_date(int nargs, char *args[]) {$/;"	f	typeref:typename:shellcmd
xsh_devdump	shell/xsh_devdump.c	/^shellcmd xsh_devdump ($/;"	f	typeref:typename:shellcmd
xsh_echo	shell/xsh_echo.c	/^shellcmd xsh_echo(int nargs, char *args[])$/;"	f	typeref:typename:shellcmd
xsh_exit	shell/xsh_exit.c	/^shellcmd xsh_exit(int nargs, char *args[])$/;"	f	typeref:typename:shellcmd
xsh_help	shell/xsh_help.c	/^shellcmd xsh_help(int nargs, char *args[])$/;"	f	typeref:typename:shellcmd
xsh_kill	shell/xsh_kill.c	/^shellcmd xsh_kill(int nargs, char *args[]) {$/;"	f	typeref:typename:shellcmd
xsh_ls	shell/xsh_ls.c	/^shellcmd xsh_ls(int nargs, char *args[])$/;"	f	typeref:typename:shellcmd
xsh_memdump	shell/xsh_memdump.c	/^shellcmd xsh_memdump(int nargs, char *args[])$/;"	f	typeref:typename:shellcmd
xsh_memstat	shell/xsh_memstat.c	/^shellcmd xsh_memstat(int nargs, char *args[])$/;"	f	typeref:typename:shellcmd
xsh_netinfo	shell/xsh_netinfo.c	/^shellcmd xsh_netinfo(int nargs, char *args[]) {$/;"	f	typeref:typename:shellcmd
xsh_ns	shell/xsh_ns.c	/^shellcmd xsh_ns ($/;"	f	typeref:typename:shellcmd
xsh_ping	shell/xsh_ping.c	/^shellcmd xsh_ping(int nargs, char *args[])$/;"	f	typeref:typename:shellcmd
xsh_ps	shell/xsh_ps.c	/^shellcmd xsh_ps(int nargs, char *args[])$/;"	f	typeref:typename:shellcmd
xsh_rdstest	shell/xsh_rdstest.c	/^shellcmd xsh_rdstest(int nargs, char *args[])$/;"	f	typeref:typename:shellcmd
xsh_sleep	shell/xsh_sleep.c	/^shellcmd xsh_sleep(int nargs, char *args[])$/;"	f	typeref:typename:shellcmd
xsh_tee	shell/xsh_tee.c	/^shellcmd xsh_tee(int nargs, char *args[])$/;"	f	typeref:typename:shellcmd
xsh_udpdump	shell/xsh_udpdump.c	/^shellcmd xsh_udpdump(int nargs, char *args[])$/;"	f	typeref:typename:shellcmd
xsh_udpecho	shell/xsh_udpecho.c	/^shellcmd xsh_udpecho(int nargs, char *args[])$/;"	f	typeref:typename:shellcmd
xsh_udpeserver	shell/xsh_udpserver.c	/^shellcmd xsh_udpeserver(int nargs, char *args[])$/;"	f	typeref:typename:shellcmd
xsh_uptime	shell/xsh_uptime.c	/^shellcmd xsh_uptime(int nargs, char *args[])$/;"	f	typeref:typename:shellcmd
xtim2ntim	include/date.h	/^#define	xtim2ntim(/;"	d
y.tab.c	config/Makefile	/^y.tab.c:	config.y$/;"	t
yield	system/yield.c	/^syscall	yield(void)$/;"	f	typeref:typename:syscall
z	include/dns.h	/^		byte	z:3;		\/* Reserved, must be 0		*\/$/;"	m	struct:dnspkt::__anona51abb730208	typeref:typename:byte:3
